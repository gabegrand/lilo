{
    "cmd": "python run_iterative_experiment.py --experiment_name runs_human --experiment_type baseline_dreamcoder --domain re2_human --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --stitch_params {\"iterations\": 10, \"max_arity\": 3} --random_seeds 111 222 333",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true
        }
    },
    "original_cost": 12023,
    "final_cost": 5659,
    "compression_ratio": 2.1245803145432056,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _g $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (map (lam _j) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam _j) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam _j) (_rsplit (_rnot _a) $0))))",
        "(lam (_rflatten (map (lam _j) (_rsplit (_rnot _b) $0))))",
        "(lam (_rflatten (map (lam _j) (_rsplit (_rnot _q) $0))))",
        "(lam (_rflatten (cons _f (_rsplit _a $0))))",
        "(lam (_rflatten (cons _f (_rsplit _b $0))))",
        "(lam (_rflatten (cons _f (_rsplit _c $0))))",
        "(lam (_rflatten (cons _f (_rsplit _g $0))))",
        "(lam (_rflatten (cons _f (_rsplit _i $0))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _a) $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _b) $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _n) $0))))))",
        "(lam (_rflatten (cons _y (cons _c (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _y (cons _c (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _y _c) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _y _c) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _y (cdr (_rsplit _rempty (_rflatten (cons _c (cons _c (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rappend _y (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _i _y) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _i _y) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (_rappend _y (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (cons _f (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _i (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _i (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _i _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _i _s) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rempty (_rflatten (cons _i (cons _s (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (map (lam (_rconcat _l $0)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _l $0)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _l $0)) (car (map (lam (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (car (map (lam (_rconcat _l $1)) (_rsplit _rempty $1)))) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _l (car (cdr (_rsplit _rempty $0))))) (map (lam (_rflatten (map (lam (_rconcat _l $1)) (_rsplit _rempty $1)))) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _n) $0)))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _h $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _i $0))))",
        "(lam (_rflatten (cons _b (_rsplit _a $0))))",
        "(lam (_rflatten (cons _b (_rsplit _b $0))))",
        "(lam (_rflatten (cons _b (_rsplit _c $0))))",
        "(lam (_rflatten (cons _b (_rsplit _d $0))))",
        "(lam (_rflatten (cons _b (_rsplit _g $0))))"
    ],
    "rewritten": [
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (fn_4 $0 _d))",
        "(lam (_rflatten (_rappend _d (_rsplit _g $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_2 $0 _f))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (map (lam _j) (_rsplit _rdot $0))))",
        "(lam (fn_1 $0 (lam _j)))",
        "(lam (_rflatten (map (lam _j) (_rsplit (_rnot _a) $0))))",
        "(lam (_rflatten (map (lam _j) (_rsplit (_rnot _b) $0))))",
        "(lam (_rflatten (map (lam _j) (_rsplit (_rnot _q) $0))))",
        "(lam (_rflatten (cons _f (_rsplit _a $0))))",
        "(lam (_rflatten (cons _f (_rsplit _b $0))))",
        "(lam (_rflatten (cons _f (_rsplit _c $0))))",
        "(lam (fn_3 $0 _f))",
        "(lam (_rflatten (cons _f (_rsplit _i $0))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 _f))",
        "(lam (_rflatten (cons _f (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _f (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (fn_6 $0 (lam (cdr $0)) _w))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _a) $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _b) $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _n) $0))))))",
        "(lam (fn_6 $0 (lam (cons _c $0)) _y))",
        "(lam (_rflatten (cons _y (cons _c (cdr (_rsplit _rempty $0))))))",
        "(lam (fn_9 $0 _c _y))",
        "(lam (fn_0 $0 (_rconcat _y _c)))",
        "(lam (fn_0 (_rflatten (cons _c (cons _c (cdr (_rsplit _rempty $0))))) _y))",
        "(lam (fn_7 $0 _i _n))",
        "(lam (fn_1 $0 (lam (_rconcat _n _i))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (_rappend _y (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _n _i)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (fn_8 _y) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (fn_2 $0 (fn_8 _y)))",
        "(lam (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (fn_7 $0 _x _h))",
        "(lam (fn_1 $0 (lam (_rconcat _h _x))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (_rappend _y (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _x)) (cons _f (cdr (_rsplit _rempty $0))))))",
        "(lam (fn_6 $0 (lam (cons _s $0)) _i))",
        "(lam (fn_5 $0 _i))",
        "(lam (_rflatten (cons (fn_8 _s) (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 (fn_8 _s)))",
        "(lam (fn_0 (fn_5 $0 _i) _i))",
        "(lam (fn_6 $0 (lam (cons _s $0)) _e))",
        "(lam (fn_5 $0 _e))",
        "(lam (fn_9 $0 _s _e))",
        "(lam (fn_0 $0 (_rconcat _e _s)))",
        "(lam (fn_0 (fn_5 $0 _e) _e))",
        "(lam (_rflatten (map (lam (_rconcat _l $0)) (_rsplit _rdot $0))))",
        "(lam (fn_1 $0 (lam (_rconcat _l $0))))",
        "(lam (_rflatten (map (lam (_rconcat _l $0)) (car (map (lam (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lam (fn_1 $0 (lam (car (map (lam (_rconcat _l $1)) (_rsplit _rempty $1))))))",
        "(lam (_rflatten (map (lam (_rconcat _l (car (cdr (_rsplit _rempty $0))))) (map (lam (fn_1 $1 (lam (_rconcat _l $1)))) (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lam (fn_0 $0 _a))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _n) $0)))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (fn_4 $0 _u))",
        "(lam (_rflatten (_rappend _u (_rsplit _h $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _i $0))))",
        "(lam (_rflatten (cons _b (_rsplit _a $0))))",
        "(lam (_rflatten (cons _b (_rsplit _b $0))))",
        "(lam (_rflatten (cons _b (_rsplit _c $0))))",
        "(lam (_rflatten (cons _b (_rsplit _d $0))))",
        "(lam (fn_3 $0 _b))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1))))) $0 _d))",
        "(lambda (_rflatten (_rappend _d (_rsplit _g $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _i $0))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 _f))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (_rappend _f (_rrevcdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (_rflatten (map (lambda _j) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda _j)))",
        "(lambda (_rflatten (map (lambda _j) (_rsplit (_rnot _a) $0))))",
        "(lambda (_rflatten (map (lambda _j) (_rsplit (_rnot _b) $0))))",
        "(lambda (_rflatten (map (lambda _j) (_rsplit (_rnot _q) $0))))",
        "(lambda (_rflatten (cons _f (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _f (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _f (_rsplit _c $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _g $1))))) $0 _f))",
        "(lambda (_rflatten (cons _f (_rsplit _i $0))))",
        "(lambda (_rflatten (cons _f (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _f))",
        "(lambda (_rflatten (cons _f (cdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (cons _f (cdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (cons _f (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 ($1 (cdr (_rsplit _rdot $2)))))))) $0 (lambda (cdr $0)) _w))",
        "(lambda (_rflatten (cons _w (cdr (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _a) $0))))))",
        "(lambda (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _b) $0))))))",
        "(lambda (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _n) $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 ($1 (cdr (_rsplit _rdot $2)))))))) $0 (lambda (cons _c $0)) _y))",
        "(lambda (_rflatten (cons _y (cons _c (cdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons (_rconcat $0 $1) (cdr (_rsplit _rdot $2))))))) $0 _c _y))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _y _c)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (_rflatten (cons _c (cons _c (cdr (_rsplit _rempty $0))))) _y))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (_rsplit _rdot $2)))))) $0 _i _n))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _n _i))))",
        "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (_rappend _y (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _n _i)) (cons _b (cdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend (#(lambda (_rconcat _i $0)) _y) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1)))))) $0 (#(lambda (_rconcat _i $0)) _y)))",
        "(lambda (_rflatten (_rappend _y (_rappend _i (_rrevcdr (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (_rsplit _rdot $2)))))) $0 _x _h))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _h _x))))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _x)) (_rappend _i (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _x)) (_rappend _y (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _x)) (cons _f (cdr (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 ($1 (cdr (_rsplit _rdot $2)))))))) $0 (lambda (cons _s $0)) _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cons _s (cdr (_rsplit _rempty $1))))))) $0 _i))",
        "(lambda (_rflatten (cons (#(lambda (_rconcat _i $0)) _s) (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (#(lambda (_rconcat _i $0)) _s)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (cons $0 (cons _s (cdr (_rsplit _rempty $1))))))) $0 _i) _i))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 ($1 (cdr (_rsplit _rdot $2)))))))) $0 (lambda (cons _s $0)) _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cons _s (cdr (_rsplit _rempty $1))))))) $0 _e))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons (_rconcat $0 $1) (cdr (_rsplit _rdot $2))))))) $0 _s _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _e _s)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (_rflatten (cons $0 (cons _s (cdr (_rsplit _rempty $1))))))) $0 _e) _e))",
        "(lambda (_rflatten (map (lambda (_rconcat _l $0)) (_rsplit _rdot $0))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (_rconcat _l $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _l $0)) (car (map (lambda (_rsplit _rempty $1)) (_rsplit _rempty $0))))))",
        "(lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $0 (lambda (car (map (lambda (_rconcat _l $1)) (_rsplit _rempty $1))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _l (car (cdr (_rsplit _rempty $0))))) (map (lambda (#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1))))) $1 (lambda (_rconcat _l $1)))) (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _a))",
        "(lambda (_rflatten (cons _a (cdr (_rsplit (_rnot _a) $0)))))",
        "(lambda (_rflatten (cons _a (cdr (_rsplit (_rnot _b) $0)))))",
        "(lambda (_rflatten (cons _a (cdr (_rsplit (_rnot _n) $0)))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1))))) $0 _u))",
        "(lambda (_rflatten (_rappend _u (_rsplit _h $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _i $0))))",
        "(lambda (_rflatten (cons _b (_rsplit _a $0))))",
        "(lambda (_rflatten (cons _b (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _b (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _b (_rsplit _d $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _g $1))))) $0 _b))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_0",
            "utility": 2020,
            "final_cost": 10003,
            "compression_ratio": 1.2019394181745475,
            "cumulative_compression_ratio": 1.2019394181745475,
            "num_uses": 8,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 (_rconcat _e _s)": "(_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _i _s)": "(_rflatten (cons (_rconcat _i _s) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _y _c)": "(_rflatten (cons (_rconcat _y _c) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0))))) _e": "(_rflatten (cons _e (cdr (_rsplit _rempty (_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 $0 _f": "(_rflatten (cons _f (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 (_rflatten (cons _i (cons _s (cdr (_rsplit _rempty $0))))) _i": "(_rflatten (cons _i (cdr (_rsplit _rempty (_rflatten (cons _i (cons _s (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _c (cons _c (cdr (_rsplit _rempty $0))))) _y": "(_rflatten (cons _y (cdr (_rsplit _rempty (_rflatten (cons _c (cons _c (cdr (_rsplit _rempty $0)))))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map #1 (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (map $0 (_rsplit _rempty $1)))))",
            "arity": 2,
            "name": "fn_1",
            "utility": 1212,
            "final_cost": 8791,
            "compression_ratio": 1.1378682743715163,
            "cumulative_compression_ratio": 1.3676487316573769,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 (lam (_rconcat _h _x))": "(_rflatten (map (lam (_rconcat _h _x)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _l $0))": "(_rflatten (map (lam (_rconcat _l $0)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $1 (lam (_rconcat _l $1))": "(_rflatten (map (lam (_rconcat _l $1)) (_rsplit _rempty $1)))"
                },
                {
                    "fn_1 $0 (lam (_rconcat _n _i))": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam (car (map (lam (_rconcat _l $1)) (_rsplit _rempty $1))))": "(_rflatten (map (lam (car (map (lam (_rconcat _l $1)) (_rsplit _rempty $1)))) (_rsplit _rempty $0)))"
                },
                {
                    "fn_1 $0 (lam _j)": "(_rflatten (map (lam _j) (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rrevcdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rrevcdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_2",
            "utility": 808,
            "final_cost": 7983,
            "compression_ratio": 1.101215082049355,
            "cumulative_compression_ratio": 1.5060754102467744,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 (_rconcat _i _y)": "(_rflatten (_rappend (_rconcat _i _y) (_rrevcdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_2 $0 _f": "(_rflatten (_rappend _f (_rrevcdr (_rsplit _rempty $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _g #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _g $1)))))",
            "arity": 2,
            "name": "fn_3",
            "utility": 606,
            "final_cost": 7377,
            "compression_ratio": 1.0821472143147621,
            "cumulative_compression_ratio": 1.6297953097465094,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0 _b": "(_rflatten (cons _b (_rsplit _g $0)))"
                },
                {
                    "fn_3 $0 _f": "(_rflatten (cons _f (_rsplit _g $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _c #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1)))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 606,
            "final_cost": 6771,
            "compression_ratio": 1.0894993354009748,
            "cumulative_compression_ratio": 1.775660906808448,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 _d": "(_rflatten (_rappend _d (_rsplit _c $0)))"
                },
                {
                    "fn_4 $0 _u": "(_rflatten (_rappend _u (_rsplit _c $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (cons _s (cdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cons _s (cdr (_rsplit _rempty $1)))))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 404,
            "final_cost": 6367,
            "compression_ratio": 1.063452175278781,
            "cumulative_compression_ratio": 1.888330453902937,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _i": "(_rflatten (cons _i (cons _s (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (#1 (cdr (_rsplit _rdot #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 ($1 (cdr (_rsplit _rdot $2))))))))",
            "arity": 3,
            "name": "fn_6",
            "utility": 302,
            "final_cost": 6065,
            "compression_ratio": 1.0497938994229183,
            "cumulative_compression_ratio": 1.9823577906018137,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 $0 (cons _s) _e": "(_rflatten (cons _e (cons _s (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_6 $0 (cons _s) _i": "(_rflatten (cons _i (cons _s (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_6 $0 cdr _w": "(_rflatten (cons _w (cdr (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_6 $0 (cons _c) _y": "(_rflatten (cons _y (cons _c (cdr (_rsplit _rdot $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map (lam (_rconcat #2 #1)) (_rsplit _rdot #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (_rsplit _rdot $2))))))",
            "arity": 3,
            "name": "fn_7",
            "utility": 204,
            "final_cost": 5861,
            "compression_ratio": 1.0348063470397544,
            "cumulative_compression_ratio": 2.051356423818461,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0 _x _h": "(_rflatten (map (lam (_rconcat _h _x)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_7 $0 #0 _l": "(_rflatten (map (lam (_rconcat _l $0)) (_rsplit _rdot $0)))"
                },
                {
                    "fn_7 $0 _i _n": "(_rflatten (map (lam (_rconcat _n _i)) (_rsplit _rdot $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rconcat _i #0)",
            "dreamcoder": "#(lambda (_rconcat _i $0))",
            "arity": 1,
            "name": "fn_8",
            "utility": 101,
            "final_cost": 5760,
            "compression_ratio": 1.0175347222222222,
            "cumulative_compression_ratio": 2.087326388888889,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 _s": "(_rconcat _i _s)"
                },
                {
                    "fn_8 _y": "(_rconcat _i _y)"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons (_rconcat #2 #1) (cdr (_rsplit _rdot #0))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons (_rconcat $0 $1) (cdr (_rsplit _rdot $2)))))))",
            "arity": 3,
            "name": "fn_9",
            "utility": 101,
            "final_cost": 5659,
            "compression_ratio": 1.0178476762678919,
            "cumulative_compression_ratio": 2.1245803145432056,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 $0 _s _e": "(_rflatten (cons (_rconcat _e _s) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_9 $0 _c _y": "(_rflatten (cons (_rconcat _y _c) (cdr (_rsplit _rdot $0))))"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}