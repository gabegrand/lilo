{
    "cmd": "python run_iterative_experiment.py --experiment_name runs_human --experiment_type baseline_dreamcoder --domain re2_human --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 1000 --stitch_params {\"iterations\": 10, \"max_arity\": 3} --random_seeds 111 222 333",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true
        }
    },
    "original_cost": 17677,
    "final_cost": 8181,
    "compression_ratio": 2.1607382960518273,
    "num_abstractions": 10,
    "original": [
        "(lam (_rflatten (cons _r (cons _u (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _u (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _r _u) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _r _u) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _r (cdr (_rsplit _rempty (_rflatten (cons _r (cons _u (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _f $0))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (car (map (lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $1)))))) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _j (_rsplit _a $0))))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _f $0))))",
        "(lam (_rflatten (cons _j (_rsplit _n $0))))",
        "(lam (_rflatten (cons _c (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _c (cons _v (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _c _v) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _c _v) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _c (cdr (_rsplit _rempty (_rflatten (cons _c (cons _v (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (_rappend _p (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (cons _m (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (cons _w (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _p (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _p (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _p (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _p (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _p (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _a) $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _b) $0))))))",
        "(lam (_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _rdot) $0))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _x (cdr (_rsplit _rempty (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _j (cons _o (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _j (cdr (_rsplit _rempty (_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0))))))))))",
        "(lam (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (_rflatten (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (_rflatten (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (if (_rmatch _e (_rtail (cdr (_rsplit _rempty $0)))) $0 (_rflatten (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (_rflatten (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) (_rsplit _rempty $0) (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rempty $0)))))",
        "(lam (car (map (lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $1)))))) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _g (cons _l (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons _g (cons _l (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (cons (_rconcat _g _l) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _g _l) (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _g (cdr (_rsplit _rempty (_rflatten (cons _g (cons _l (cdr (_rsplit _rempty $0))))))))))",
        "(lam (_rflatten (cons _m (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _m (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _m (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _m (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _m (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rappend _p (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rappend _x (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (cons _r (cdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend _k (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _n $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _r $0))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _a) $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _b) $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit (_rnot _rdot) $0)))))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _l $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lam (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _x _p) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _x _p) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rappend _p (_rrevcdr (_rsplit _rempty $0))))))))",
        "(lam (_rflatten (cons _v (_rsplit _a $0))))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (cons _v (_rsplit _f $0))))",
        "(lam (_rflatten (cons _v (_rsplit _n $0))))",
        "(lam (_rflatten (cons _a (_rsplit _a $0))))",
        "(lam (_rflatten (cons _a (_rsplit _b $0))))",
        "(lam (_rflatten (cons _a (_rsplit _c $0))))",
        "(lam (_rflatten (cons _a (_rsplit _j $0))))",
        "(lam (_rflatten (cons _a (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _j) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _j) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0))))))))"
    ],
    "rewritten": [
        "(lam (_rflatten (cons _r (cons _u (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _u _r))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _r _u)))",
        "(lam (fn_0 $0 (_rconcat _r _u)))",
        "(lam (fn_0 (fn_5 $0 _u _r) _r))",
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (fn_1 $0 _d))",
        "(lam (_rflatten (_rappend _d (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _f $0))))",
        "(lam (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _e _e))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _e _e)))",
        "(lam (fn_9 _e $0))",
        "(lam (car (map (lam (fn_5 $1 _e _e)) (_rsplit _rempty $0))))",
        "(lam (fn_3 $0 _j))",
        "(lam (_rflatten (cons _j (_rsplit _b $0))))",
        "(lam (_rflatten (cons _j (_rsplit _c $0))))",
        "(lam (_rflatten (cons _j (_rsplit _f $0))))",
        "(lam (_rflatten (cons _j (_rsplit _n $0))))",
        "(lam (_rflatten (cons _c (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _v _c))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _c _v)))",
        "(lam (fn_0 $0 (_rconcat _c _v)))",
        "(lam (fn_0 (fn_5 $0 _v _c) _c))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (_rsplit _rempty $0))))",
        "(lam (fn_4 $0 _n _f))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (cons _m (fn_7 $0)))))",
        "(lam (_rflatten (map (lam (_rconcat _f _n)) (cons _w (fn_7 $0)))))",
        "(lam (_rflatten (_rappend _p (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _p (_rsplit _b $0))))",
        "(lam (fn_1 $0 _p))",
        "(lam (_rflatten (_rappend _p (_rsplit _rdot $0))))",
        "(lam (fn_6 $0))",
        "(lam (fn_8 (cdr (_rsplit _rdot $0)) _w))",
        "(lam (fn_8 (fn_7 $0) _w))",
        "(lam (fn_8 (cdr (_rsplit (_rnot _a) $0)) _w))",
        "(lam (fn_8 (cdr (_rsplit (_rnot _b) $0)) _w))",
        "(lam (fn_8 (cdr (_rsplit (_rnot _rdot) $0)) _w))",
        "(lam (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _e _x))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _x _e)))",
        "(lam (fn_0 $0 (_rconcat _x _e)))",
        "(lam (fn_0 (fn_5 $0 _e _e) _x))",
        "(lam (_rflatten (cons _j (cons _o (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _o _j))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _j _o)))",
        "(lam (fn_0 $0 (_rconcat _j _o)))",
        "(lam (fn_0 (fn_5 $0 _o _j) _j))",
        "(lam (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (fn_6 $0)))",
        "(lam (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (fn_6 $0)))",
        "(lam (if (_rmatch _e (_rtail (fn_7 $0))) $0 (fn_6 $0)))",
        "(lam (_rflatten (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) (_rsplit _rempty $0) (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _p (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _r _r))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _r _r)))",
        "(lam (fn_9 _r $0))",
        "(lam (car (map (lam (fn_5 $1 _r _r)) (_rsplit _rempty $0))))",
        "(lam (_rflatten (cons _g (cons _l (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_5 $0 _l _g))",
        "(lam (fn_8 (_rsplit _rdot $0) (_rconcat _g _l)))",
        "(lam (fn_0 $0 (_rconcat _g _l)))",
        "(lam (fn_0 (fn_5 $0 _l _g) _g))",
        "(lam (fn_8 (_rsplit _rdot $0) _m))",
        "(lam (fn_0 $0 _m))",
        "(lam (fn_8 (_rsplit (_rnot _a) $0) _m))",
        "(lam (fn_8 (_rsplit (_rnot _b) $0) _m))",
        "(lam (fn_8 (_rsplit (_rnot _rdot) $0) _m))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rsplit _rempty $0))))",
        "(lam (fn_4 $0 _r _h))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (_rappend _x (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (map (lam (_rconcat _h _r)) (cons _r (fn_7 $0)))))",
        "(lam (_rflatten (_rappend _k (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _b $0))))",
        "(lam (fn_1 $0 _k))",
        "(lam (_rflatten (_rappend _k (_rsplit _n $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _r $0))))",
        "(lam (fn_8 (_rsplit _rdot $0) _a))",
        "(lam (fn_0 $0 _a))",
        "(lam (fn_8 (_rsplit (_rnot _a) $0) _a))",
        "(lam (fn_8 (_rsplit (_rnot _b) $0) _a))",
        "(lam (fn_8 (_rsplit (_rnot _rdot) $0) _a))",
        "(lam (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lam (fn_1 $0 _u))",
        "(lam (_rflatten (_rappend _u (_rsplit _l $0))))",
        "(lam (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lam (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _x _p) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _x _p) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (fn_2 $0 _p _x))",
        "(lam (fn_3 $0 _v))",
        "(lam (_rflatten (cons _v (_rsplit _b $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (cons _v (_rsplit _f $0))))",
        "(lam (_rflatten (cons _v (_rsplit _n $0))))",
        "(lam (fn_3 $0 _a))",
        "(lam (_rflatten (cons _a (_rsplit _b $0))))",
        "(lam (_rflatten (cons _a (_rsplit _c $0))))",
        "(lam (_rflatten (cons _a (_rsplit _j $0))))",
        "(lam (_rflatten (cons _a (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lam (_rflatten (_rappend (_rconcat _o _j) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend (_rconcat _o _j) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lam (fn_2 $0 _j _o))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (_rflatten (cons _r (cons _u (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _u _r))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _r _u)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _r _u)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _u _r) _r))",
        "(lambda (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1))))) $0 _d))",
        "(lambda (_rflatten (_rappend _d (_rsplit _d $0))))",
        "(lambda (_rflatten (_rappend _d (_rsplit _f $0))))",
        "(lambda (_rflatten (cons _e (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _e))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _e _e)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat $1 $1)))) _e $0))",
        "(lambda (car (map (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $1 _e _e)) (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1))))) $0 _j))",
        "(lambda (_rflatten (cons _j (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _f $0))))",
        "(lambda (_rflatten (cons _j (_rsplit _n $0))))",
        "(lambda (_rflatten (cons _c (cons _v (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _v _c))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _c _v)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _c _v)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _v _c) _c))",
        "(lambda (_rflatten (map (lambda (_rconcat _f _n)) (_rsplit _rdot $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _f _n)) (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (_rappend _p (_rrevcdr (_rsplit _rempty $2)))))))) $0 _n _f))",
        "(lambda (_rflatten (map (lambda (_rconcat _f _n)) (cons _m (#(lambda (cdr (_rsplit _rempty $0))) $0)))))",
        "(lambda (_rflatten (map (lambda (_rconcat _f _n)) (cons _w (#(lambda (cdr (_rsplit _rempty $0))) $0)))))",
        "(lambda (_rflatten (_rappend _p (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _p (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1))))) $0 _p))",
        "(lambda (_rflatten (_rappend _p (_rsplit _rdot $0))))",
        "(lambda (#(lambda (_rflatten (_rappend _p (_rsplit _rempty $0)))) $0))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (cdr (_rsplit _rdot $0)) _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (#(lambda (cdr (_rsplit _rempty $0))) $0) _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (cdr (_rsplit (_rnot _a) $0)) _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (cdr (_rsplit (_rnot _b) $0)) _w))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (cdr (_rsplit (_rnot _rdot) $0)) _w))",
        "(lambda (_rflatten (cons _x (cons _e (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _x))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _x _e)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _x _e)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _e _e) _x))",
        "(lambda (_rflatten (cons _j (cons _o (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _j))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _j _o)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _j _o)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _o _j) _j))",
        "(lambda (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) $0 (#(lambda (_rflatten (_rappend _p (_rsplit _rempty $0)))) $0)))",
        "(lambda (if (_rmatch _e (_rtail (_rsplit _rempty $0))) $0 (#(lambda (_rflatten (_rappend _p (_rsplit _rempty $0)))) $0)))",
        "(lambda (if (_rmatch _e (_rtail (#(lambda (cdr (_rsplit _rempty $0))) $0))) $0 (#(lambda (_rflatten (_rappend _p (_rsplit _rempty $0)))) $0)))",
        "(lambda (_rflatten (if (_rmatch (_rtail (_rsplit _rempty $0)) _e) (_rsplit _rempty $0) (_rappend _p (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (if (_rmatch _e (_rtail (_rsplit _rempty $0))) (_rsplit _rempty $0) (_rappend _p (_rsplit _rempty $0)))))",
        "(lambda (_rflatten (cons _r (cons _r (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _r _r))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _r _r)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat $1 $1)))) _r $0))",
        "(lambda (car (map (lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $1 _r _r)) (_rsplit _rempty $0))))",
        "(lambda (_rflatten (cons _g (cons _l (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _l _g))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) (_rconcat _g _l)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat _g _l)))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) (#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2)))))))) $0 _l _g) _g))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) _m))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _m))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit (_rnot _a) $0) _m))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit (_rnot _b) $0) _m))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit (_rnot _rdot) $0) _m))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _r)) (_rsplit _rdot $0))))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _r)) (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (_rappend _p (_rrevcdr (_rsplit _rempty $2)))))))) $0 _r _h))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _r)) (_rappend _x (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (map (lambda (_rconcat _h _r)) (cons _r (#(lambda (cdr (_rsplit _rempty $0))) $0)))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1))))) $0 _k))",
        "(lambda (_rflatten (_rappend _k (_rsplit _n $0))))",
        "(lambda (_rflatten (_rappend _k (_rsplit _r $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit _rdot $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit (_rnot _a) $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit (_rnot _b) $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr $1))))) (_rsplit (_rnot _rdot) $0) _a))",
        "(lambda (_rflatten (_rappend _u (_rsplit _a $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _b $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1))))) $0 _u))",
        "(lambda (_rflatten (_rappend _u (_rsplit _l $0))))",
        "(lambda (_rflatten (_rappend _u (_rsplit _m $0))))",
        "(lambda (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend (_rconcat _x _p) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend (_rconcat _x _p) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $1 (_rappend $0 (_rrevcdr (_rappend $1 (_rrevcdr (_rsplit _rempty $2)))))))))) $0 _p _x))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1))))) $0 _v))",
        "(lambda (_rflatten (cons _v (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _f $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _n $0))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1))))) $0 _a))",
        "(lambda (_rflatten (cons _a (_rsplit _b $0))))",
        "(lambda (_rflatten (cons _a (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _a (_rsplit _j $0))))",
        "(lambda (_rflatten (cons _a (_rsplit _rdot $0))))",
        "(lambda (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rsplit _rdot $0))))))",
        "(lambda (_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rsplit _rempty $0))))))",
        "(lambda (_rflatten (_rappend (_rconcat _o _j) (_rrevcdr (_rsplit _rdot $0)))))",
        "(lambda (_rflatten (_rappend (_rconcat _o _j) (_rrevcdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (lambda (_rflatten (_rappend $1 (_rappend $0 (_rrevcdr (_rappend $1 (_rrevcdr (_rsplit _rempty $2)))))))))) $0 _j _o))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rempty #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1))))))",
            "arity": 2,
            "name": "fn_0",
            "utility": 3636,
            "final_cost": 14041,
            "compression_ratio": 1.2589559148208818,
            "cumulative_compression_ratio": 1.2589559148208818,
            "num_uses": 14,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 (_rconcat _c _v)": "(_rflatten (cons (_rconcat _c _v) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _e _e)": "(_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _g _l)": "(_rflatten (cons (_rconcat _g _l) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _j _o)": "(_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _r _r)": "(_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _r _u)": "(_rflatten (cons (_rconcat _r _u) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 (_rflatten (cons _c (cons _v (cdr (_rsplit _rempty $0))))) _c": "(_rflatten (cons _c (cdr (_rsplit _rempty (_rflatten (cons _c (cons _v (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _g (cons _l (cdr (_rsplit _rempty $0))))) _g": "(_rflatten (cons _g (cdr (_rsplit _rempty (_rflatten (cons _g (cons _l (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0))))) _j": "(_rflatten (cons _j (cdr (_rsplit _rempty (_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 $0 _m": "(_rflatten (cons _m (cdr (_rsplit _rempty $0))))"
                },
                {
                    "fn_0 (_rflatten (cons _r (cons _u (cdr (_rsplit _rempty $0))))) _r": "(_rflatten (cons _r (cdr (_rsplit _rempty (_rflatten (cons _r (cons _u (cdr (_rsplit _rempty $0)))))))))"
                },
                {
                    "fn_0 (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0))))) _x": "(_rflatten (cons _x (cdr (_rsplit _rempty (_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0)))))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _c #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _c $1)))))",
            "arity": 2,
            "name": "fn_1",
            "utility": 1212,
            "final_cost": 12829,
            "compression_ratio": 1.0944734585704263,
            "cumulative_compression_ratio": 1.3778938342817055,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _d": "(_rflatten (_rappend _d (_rsplit _c $0)))"
                },
                {
                    "fn_1 $0 _k": "(_rflatten (_rappend _k (_rsplit _c $0)))"
                },
                {
                    "fn_1 $0 _p": "(_rflatten (_rappend _p (_rsplit _c $0)))"
                },
                {
                    "fn_1 $0 _u": "(_rflatten (_rappend _u (_rsplit _c $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rappend #2 (_rrevcdr (_rappend #1 (_rrevcdr (_rsplit _rempty #0)))))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (_rappend $1 (_rappend $0 (_rrevcdr (_rappend $1 (_rrevcdr (_rsplit _rempty $2))))))))))",
            "arity": 3,
            "name": "fn_2",
            "utility": 1010,
            "final_cost": 11819,
            "compression_ratio": 1.0854556223030714,
            "cumulative_compression_ratio": 1.4956426093578137,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 $0 _j _o": "(_rflatten (_rappend _j (_rappend _o (_rrevcdr (_rappend _j (_rrevcdr (_rsplit _rempty $0)))))))"
                },
                {
                    "fn_2 $0 _p _x": "(_rflatten (_rappend _p (_rappend _x (_rrevcdr (_rappend _p (_rrevcdr (_rsplit _rempty $0)))))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _a #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _a $1)))))",
            "arity": 2,
            "name": "fn_3",
            "utility": 909,
            "final_cost": 10910,
            "compression_ratio": 1.0833180568285976,
            "cumulative_compression_ratio": 1.62025664527956,
            "num_uses": 3,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0 _a": "(_rflatten (cons _a (_rsplit _a $0)))"
                },
                {
                    "fn_3 $0 _j": "(_rflatten (cons _j (_rsplit _a $0)))"
                },
                {
                    "fn_3 $0 _v": "(_rflatten (cons _v (_rsplit _a $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (map (lam (_rconcat #2 #1)) (_rappend _p (_rrevcdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (map (lambda (_rconcat $1 $2)) (_rappend _p (_rrevcdr (_rsplit _rempty $2))))))))",
            "arity": 3,
            "name": "fn_4",
            "utility": 810,
            "final_cost": 10100,
            "compression_ratio": 1.0801980198019803,
            "cumulative_compression_ratio": 1.7501980198019802,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 $0 _n _f": "(_rflatten (map (lam (_rconcat _f _n)) (_rappend _p (_rrevcdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_4 $0 _r _h": "(_rflatten (map (lam (_rconcat _h _r)) (_rappend _p (_rrevcdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #2 (cons #1 (cdr (_rsplit _rempty #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (_rflatten (cons $0 (cons $1 (cdr (_rsplit _rempty $2))))))))",
            "arity": 3,
            "name": "fn_5",
            "utility": 707,
            "final_cost": 9393,
            "compression_ratio": 1.075268817204301,
            "cumulative_compression_ratio": 1.8819333546257853,
            "num_uses": 14,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _v _c": "(_rflatten (cons _c (cons _v (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $1 _e _e": "(_rflatten (cons _e (cons _e (cdr (_rsplit _rempty $1)))))"
                },
                {
                    "fn_5 $0 _l _g": "(_rflatten (cons _g (cons _l (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _o _j": "(_rflatten (cons _j (cons _o (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $1 _r _r": "(_rflatten (cons _r (cons _r (cdr (_rsplit _rempty $1)))))"
                },
                {
                    "fn_5 $0 _u _r": "(_rflatten (cons _r (cons _u (cdr (_rsplit _rempty $0)))))"
                },
                {
                    "fn_5 $0 _e _x": "(_rflatten (cons _x (cons _e (cdr (_rsplit _rempty $0)))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend _p (_rsplit _rempty #0)))",
            "dreamcoder": "#(lambda (_rflatten (_rappend _p (_rsplit _rempty $0))))",
            "arity": 1,
            "name": "fn_6",
            "utility": 505,
            "final_cost": 8888,
            "compression_ratio": 1.0568181818181819,
            "cumulative_compression_ratio": 1.988861386138614,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 $0": "(_rflatten (_rappend _p (_rsplit _rempty $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(cdr (_rsplit _rempty #0))",
            "dreamcoder": "#(lambda (cdr (_rsplit _rempty $0)))",
            "arity": 1,
            "name": "fn_7",
            "utility": 303,
            "final_cost": 8585,
            "compression_ratio": 1.035294117647059,
            "cumulative_compression_ratio": 2.0590564938846825,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0": "(cdr (_rsplit _rempty $0))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (cdr #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr $1)))))",
            "arity": 2,
            "name": "fn_8",
            "utility": 202,
            "final_cost": 8383,
            "compression_ratio": 1.0240963855421688,
            "cumulative_compression_ratio": 2.108672313014434,
            "num_uses": 20,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _c _v)": "(_rflatten (cons (_rconcat _c _v) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _e _e)": "(_rflatten (cons (_rconcat _e _e) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _g _l)": "(_rflatten (cons (_rconcat _g _l) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _j _o)": "(_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _r _r)": "(_rflatten (cons (_rconcat _r _r) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _r _u)": "(_rflatten (cons (_rconcat _r _u) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit (_rnot _a) $0) _a": "(_rflatten (cons _a (cdr (_rsplit (_rnot _a) $0))))"
                },
                {
                    "fn_8 (_rsplit (_rnot _b) $0) _a": "(_rflatten (cons _a (cdr (_rsplit (_rnot _b) $0))))"
                },
                {
                    "fn_8 (_rsplit (_rnot _rdot) $0) _a": "(_rflatten (cons _a (cdr (_rsplit (_rnot _rdot) $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) _a": "(_rflatten (cons _a (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (_rsplit (_rnot _a) $0) _m": "(_rflatten (cons _m (cdr (_rsplit (_rnot _a) $0))))"
                },
                {
                    "fn_8 (_rsplit (_rnot _b) $0) _m": "(_rflatten (cons _m (cdr (_rsplit (_rnot _b) $0))))"
                },
                {
                    "fn_8 (_rsplit (_rnot _rdot) $0) _m": "(_rflatten (cons _m (cdr (_rsplit (_rnot _rdot) $0))))"
                },
                {
                    "fn_8 (_rsplit _rdot $0) _m": "(_rflatten (cons _m (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_8 (cdr (_rsplit (_rnot _a) $0)) _w": "(_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _a) $0)))))"
                },
                {
                    "fn_8 (cdr (_rsplit (_rnot _b) $0)) _w": "(_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _b) $0)))))"
                },
                {
                    "fn_8 (cdr (_rsplit (_rnot _rdot) $0)) _w": "(_rflatten (cons _w (cdr (cdr (_rsplit (_rnot _rdot) $0)))))"
                },
                {
                    "fn_8 (cdr (_rsplit _rdot $0)) _w": "(_rflatten (cons _w (cdr (cdr (_rsplit _rdot $0)))))"
                },
                {
                    "fn_8 (fn_7 $0) _w": "(_rflatten (cons _w (cdr (fn_7 $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_0 #1 (_rconcat #0 #0))",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rempty $1)))))) $0 (_rconcat $1 $1))))",
            "arity": 2,
            "name": "fn_9",
            "utility": 202,
            "final_cost": 8181,
            "compression_ratio": 1.0246913580246915,
            "cumulative_compression_ratio": 2.1607382960518273,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_9 _e $0": "(fn_0 $0 (_rconcat _e _e))"
                },
                {
                    "fn_9 _r $0": "(fn_0 $0 (_rconcat _r _r))"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}