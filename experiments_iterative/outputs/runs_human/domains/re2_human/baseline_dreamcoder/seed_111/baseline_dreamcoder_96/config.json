{
    "metadata": {
        "experiment_name": "runs_human",
        "experiment_id": "baseline_dreamcoder_96",
        "human_readable": "Autogenerated iterative experiment.",
        "export_directory": "experiments_iterative/outputs/runs_human/domains/re2_human/baseline_dreamcoder/seed_111",
        "log_directory": "experiments_iterative/logs/runs_human/domains/re2_human/baseline_dreamcoder/seed_111",
        "tasks_loader": "re2",
        "task_language_loader": "re2_human",
        "dsl_description_prefix": "This is a domain-specific language for regular expressions that specify string transformations.",
        "export_with_timestamp": false,
        "resume_checkpoint_directory": null,
        "init_frontiers_from_checkpoint": false,
        "init_frontiers_every_iteration": false,
        "init_grammar_from_checkpoint": false,
        "ocaml_special_handler": "re2",
        "global_batch_size": 96,
        "enumeration_timeout": 1000,
        "recognition_train_steps": null,
        "encoder": "re2",
        "random_seed": 111,
        "curr_iteration": 0
    },
    "model_initializers": [
        {
            "model_type": "grammar",
            "model_loader": "re2",
            "model_initializer_fn": "load_model",
            "params": {}
        },
        {
            "model_type": "library_learner",
            "model_loader": "stitch_proposer",
            "model_initializer_fn": "load_model",
            "params": {}
        },
        {
            "model_type": "examples_encoder",
            "model_loader": "re2",
            "model_initializer_fn": "load_model_initializer",
            "params": {}
        },
        {
            "model_type": "amortized_synthesis",
            "model_loader": "dreamcoder_recognition",
            "model_initializer_fn": "load_model",
            "params": {}
        }
    ],
    "experiment_iterator": {
        "max_iterations": 16,
        "task_batcher": {
            "model_type": "random_shuffle_ordered_task_batcher",
            "params": {
                "global_batch_size": 96,
                "verbose": true,
                "increment_at_global_iteration": true
            }
        },
        "loop_blocks": [
            {
                "experiment_block_type": "state_fn",
                "state_fn": "log_metadata",
                "params": {
                    "verbosity": 3
                }
            },
            {
                "experiment_block_type": "state_fn",
                "state_fn": "log_frontiers",
                "params": {
                    "verbosity": 3
                }
            },
            {
                "experiment_block_type": "model_fn",
                "model_type": "grammar",
                "model_fn": "infer_programs_for_tasks",
                "task_split": "train",
                "task_batch_size": "global_batch_size",
                "params": {
                    "enumeration_timeout": 1000,
                    "compute_likelihoods": true
                },
                "run_every_n_iterations": 1000
            },
            {
                "experiment_block_type": "state_fn",
                "state_fn": "log_frontiers",
                "params": {
                    "verbosity": 3
                },
                "run_every_n_iterations": 1000
            },
            {
                "experiment_block_type": "model_fn",
                "model_type": "amortized_synthesis",
                "model_fn": "optimize_model_for_frontiers",
                "task_split": "train",
                "task_batch_size": "all",
                "params": {
                    "recognition_train_steps": 10000
                }
            },
            {
                "experiment_block_type": "model_fn",
                "model_type": "amortized_synthesis",
                "model_fn": "infer_programs_for_tasks",
                "task_split": "train",
                "task_batch_size": "global_batch_size",
                "params": {
                    "enumeration_timeout": 1000
                }
            },
            {
                "experiment_block_type": "state_fn",
                "state_fn": "log_frontiers",
                "params": {
                    "verbosity": 3
                }
            },
            {
                "experiment_block_type": "state_fn",
                "state_fn": "reset_task_frontiers",
                "params": {
                    "task_split": "test",
                    "task_ids": "all"
                },
                "run_every_n_iterations": 3
            },
            {
                "experiment_block_type": "model_fn",
                "model_type": "amortized_synthesis",
                "model_fn": "infer_programs_for_tasks",
                "task_split": "test",
                "task_batch_size": "all",
                "params": {
                    "enumeration_timeout": 1000
                },
                "run_every_n_iterations": 3
            },
            {
                "experiment_block_type": "state_fn",
                "state_fn": "log_frontiers",
                "params": {
                    "verbosity": 3
                },
                "run_every_n_iterations": 3
            },
            {
                "experiment_block_type": "model_fn",
                "model_type": "grammar",
                "model_fn": "evaluate_frontiers",
                "task_splits": [
                    "test"
                ],
                "task_batch_sizes": [
                    "all"
                ],
                "params": {
                    "compute_likelihoods": true,
                    "compute_description_lengths": true,
                    "save_filename": "test_likelihoods.json"
                },
                "run_every_n_iterations": 3
            },
            {
                "experiment_block_type": "checkpoint",
                "state_to_checkpoint": [
                    "frontiers"
                ],
                "models_to_checkpoint": [
                    "grammar"
                ]
            },
            {
                "experiment_block_type": "model_fn",
                "model_type": "library_learner",
                "model_fn": "get_compressed_grammar_mdl_prior_rank",
                "task_splits": [
                    "train"
                ],
                "task_batch_sizes": [
                    "all"
                ],
                "params": {
                    "max_arity": 3,
                    "iterations": 10,
                    "candidates_per_iteration": 1,
                    "include_samples": false,
                    "use_mdl_program": false,
                    "beta_reduce_programs": true,
                    "update_grammar": true,
                    "replace_existing_abstractions": true
                }
            },
            {
                "experiment_block_type": "checkpoint",
                "state_to_checkpoint": [],
                "models_to_checkpoint": [],
                "aws_s3_sync_base_path": "s3://grandg-lilo-experiments"
            }
        ]
    }
}