{
    "_summary": {
        "n_tasks_solved": {
            "train": 139,
            "test": 41
        }
    },
    "train": {
        "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_front)) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_left))) clevr_large clevr_small)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.913498640060425
        },
        "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_left $0)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00037670135498046875
        },
        "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00025010108947753906
        },
        "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_query_shape (clevr_car $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_small clevr_large) (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (clevr_car $0)) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_small clevr_large)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.7854483127594
        },
        "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_small (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_small (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.786399841308594
        },
        "5-1_compare_integer-Is the number of purple things greater than the number of small cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_compare_integer-Is the number of purple things greater than the number of small cubes? ((lambda (clevr_gt? (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_right)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 8) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_lt? 8 (clevr_count $0)) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_small clevr_large) (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.81005573272705
        },
        "0-1_one_hop-How many things are right the large cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-How many things are right the large cylinder? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_size clevr_small (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_shape clevr_sphere (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)) $0) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.22901463508606
        },
        "1-1_one_hop-What number of things are right the small gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-What number of things are right the small gray thing? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 38.00012135505676
        },
        "2-1_one_hop-How many large things are behind the large metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-How many large things are behind the large metal thing? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_gray) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_transform_size clevr_small $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.289715051651
        },
        "3-1_one_hop-What number of large cylinders are left the green rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What number of large cylinders are left the green rubber thing? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)) clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $3) (clevr_transform_material clevr_rubber $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $1 clevr_left))) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $3) (clevr_transform_material clevr_rubber $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $3 clevr_left))) $0)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $3) (clevr_transform_material clevr_rubber $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $3 clevr_left))) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 53.17605519294739
        },
        "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_right)) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_intersect $0 $0) clevr_right)) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_union $0 $0) clevr_right)) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_cube clevr_cylinder) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00029659271240234375
        },
        "5-1_one_hop-There is a green thing; what number of things are front it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-There is a green thing; what number of things are front it? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) clevr_behind) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind) clevr_behind $0))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $2 clevr_behind) clevr_behind $0))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.778375387191772
        },
        "6-1_one_hop-There is a thing that is right the cube; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-There is a thing that is right the cube; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002434253692626953
        },
        "7-1_one_hop-There is a thing front the brown thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-There is a thing front the brown thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003960132598876953
        },
        "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 1) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00027561187744140625
        },
        "9-1_one_hop-There is a cube front the gray rubber thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-There is a cube front the gray rubber thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_car $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_purple) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_add (clevr_car $0) $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003001689910888672
        },
        "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_behind))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_right))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.205249071121216
        },
        "11-1_one_hop-What is the size of the metal thing front the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_one_hop-What is the size of the metal thing front the sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0)) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) (clevr_eq_size clevr_small clevr_small)) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_right clevr_front)))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.362775564193726
        },
        "12-1_one_hop-What color is the thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_one_hop-What color is the thing that is behind the sphere? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_front)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.163529634475708
        },
        "13-1_one_hop-What color is the thing that is behind the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_one_hop-What color is the thing that is behind the blue thing? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002803802490234375
        },
        "14-1_one_hop-What color is the metal thing left the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_one_hop-What color is the metal thing left the gray thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) clevr_cube clevr_cylinder) $0) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00033211708068847656
        },
        "15-1_one_hop-The large thing left the small rubber thing is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_one_hop-The large thing left the small rubber thing is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_right)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002720355987548828
        },
        "16-1_one_hop-The rubber thing that is right the large metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_one_hop-The rubber thing that is right the large metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_metal (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003657341003417969
        },
        "17-1_one_hop-What color is the small metal thing behind the small purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_one_hop-What color is the small metal thing behind the small purple metal thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_behind))) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $1))) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_map (lambda (clevr_car (clevr_relate (clevr_car $1) clevr_behind $1))) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 23.823042631149292
        },
        "18-1_one_hop-What is the material of the thing left the cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_one_hop-What is the material of the thing left the cube? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0))) clevr_green) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_green) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002694129943847656
        },
        "19-1_one_hop-What is the material of the cylinder that is left the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_one_hop-What is the material of the cylinder that is left the small cube? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small) (clevr_query_size (clevr_car (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small) (clevr_query_size (clevr_car (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0) clevr_right $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small) (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_large clevr_small)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.80268406867981
        },
        "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_shape clevr_cylinder (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00020074844360351562
        },
        "21-1_one_hop-What is the thing that is front the brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_one_hop-What is the thing that is front the brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.800710439682007
        },
        "22-1_one_hop-What is the material of the sphere right the small sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_one_hop-What is the material of the sphere right the small sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_sphere clevr_cylinder) $0) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) clevr_cube clevr_cylinder) $0) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_cube clevr_cylinder) $0) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.3836796283721924
        },
        "23-1_one_hop-There is a large thing behind the small gray thing; what is its material?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_one_hop-There is a large thing behind the small gray thing; what is its material? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 7) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00024175643920898438
        },
        "24-1_one_hop-There is a thing that is right the cube; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_one_hop-There is a thing that is right the cube; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) 2) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 0) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 1) clevr_cylinder clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.38944149017334
        },
        "25-1_one_hop-What is the shape of the metal thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_one_hop-What is the shape of the metal thing that is behind the sphere? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002529621124267578
        },
        "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (clevr_add (clevr_car $0) $0)) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0)))) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00023651123046875
        },
        "27-1_one_hop-There is a large thing front the small metal cube; what is its shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_one_hop-There is a large thing front the small metal cube; what is its shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000308990478515625
        },
        "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_metal) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_shape (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)) clevr_cube clevr_sphere) (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)) clevr_cube clevr_sphere) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_cube clevr_cylinder) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.051456451416016
        },
        "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (clevr_map (lambda $0) $0) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (clevr_intersect $0 $0) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (clevr_fold $0 $0 (lambda (lambda $0))) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (clevr_fold $0 $0 (lambda (lambda $2))) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00042247772216796875
        },
        "0-1_single_or-How many things are large metal cylinders or small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many things are large metal cylinders or small gray things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 5 (clevr_count $0)) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 4 (clevr_count $0)) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 5) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002598762512207031
        },
        "1-1_single_or-How many things are small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0) clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right))) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 28.967164516448975
        },
        "2-1_single_or-How many things are red things or large green things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many things are red things or large green things? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_large) 2 4))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car $0))) 2 4))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00024819374084472656
        },
        "3-1_single_or-What number of things are rubber things or rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of things are rubber things or rubber cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_metal) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_difference $0 (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 377.4942150115967
        },
        "4-1_single_or-How many things are either small things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many things are either small things or cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere $0 $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_left $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_union (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.59198331832886
        },
        "5-1_single_or-What number of small objects are either rubber cylinders or green metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-What number of small objects are either rubber cylinders or green metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (clevr_add (clevr_car $0) $0)) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_cylinder) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00024056434631347656
        },
        "6-1_single_or-What number of small objects are either blue metal things or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-What number of small objects are either blue metal things or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_fold $2 $0 (lambda (lambda (clevr_difference $4 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $4 clevr_behind))))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.303197622299194
        },
        "7-1_single_or-How many small things are cylinders or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-How many small things are cylinders or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_fold $0 $2 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind))))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.189753770828247
        },
        "8-1_single_or-What number of small things are rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-What number of small things are rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0)) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left (clevr_add (clevr_car $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.413670539855957
        },
        "9-1_single_or-What number of small objects are either metal cubes or red rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-What number of small objects are either metal cubes or red rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_map (lambda $0) (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_intersect $0 (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_left)) clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.05621838569641
        },
        "10-1_single_or-What number of yellow objects are large metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_single_or-What number of yellow objects are large metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_car $1)) $2)))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $1 clevr_behind) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $1 clevr_left) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.253730535507202
        },
        "11-1_single_or-How many yellow objects are rubber cylinders or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_single_or-How many yellow objects are rubber cylinders or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $2 clevr_gray) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $2))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $2 clevr_gray) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $2))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.980557441711426
        },
        "12-1_single_or-How many purple things are rubber things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_single_or-How many purple things are rubber things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $1 $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_size clevr_small (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_material clevr_metal (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002665519714355469
        },
        "13-1_single_or-How many purple objects are either rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_single_or-How many purple objects are either rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_car $1)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.71820306777954
        },
        "14-1_single_or-How many red objects are either large metal things or small rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_single_or-How many red objects are either large metal things or small rubber cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) clevr_right clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_behind))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00029277801513671875
        },
        "15-1_single_or-How many rubber things are either small spheres or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_single_or-How many rubber things are either small spheres or large purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_left)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $2 clevr_yellow) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_left)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $2 clevr_yellow) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_left)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.313023567199707
        },
        "16-1_single_or-What number of rubber things are large spheres or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_single_or-What number of rubber things are large spheres or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_fold $0 $0 (lambda (lambda $0)))) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_fold $0 $0 (lambda (lambda $2)))) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) 3 (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.09045958518982
        },
        "17-1_single_or-How many metal objects are either green things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_single_or-How many metal objects are either green things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) 3 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) 2 0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car $0) clevr_right (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) $0 (clevr_add (clevr_car $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0) clevr_behind $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) clevr_rubber clevr_metal) $2) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 (clevr_fold $0 $2 (lambda (lambda (clevr_difference $4 (clevr_add $1 (clevr_relate $1 clevr_right $0)))))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.70727467536926
        },
        "18-1_single_or-What number of rubber objects are purple things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_single_or-What number of rubber objects are purple things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) 2 (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 51.99621081352234
        },
        "19-1_single_or-What number of metal things are either large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_single_or-What number of metal things are either large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_fold $2 $2 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_add $1 $2) clevr_behind))))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference $4 (clevr_add $3 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (lambda (lambda (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference $4 (clevr_add $3 $0))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 46.31711411476135
        },
        "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $2 (lambda (lambda (clevr_difference $2 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind)))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_car $1) $0)) $0)) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 96.38565731048584
        },
        "21-1_single_or-What number of spheres are small gray things or small metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_single_or-What number of spheres are small gray things or small metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_left (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) clevr_right clevr_front))) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0) $0) clevr_front $0) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $2 $0) clevr_right $2) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 773.5639863014221
        },
        "22-1_single_or-How many cylinders are brown things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_single_or-How many cylinders are brown things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_left (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) clevr_left clevr_right) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) clevr_left clevr_right)))) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_gray) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $1 clevr_behind) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_gray) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 219.98503971099854
        },
        "23-1_single_or-How many spheres are either purple things or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_single_or-How many spheres are either purple things or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_behind) clevr_behind $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $2 clevr_behind) clevr_behind $2) clevr_green) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.86205291748047
        },
        "24-1_single_or-What number of spheres are small cyan metal things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_single_or-What number of spheres are small cyan metal things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_right $0)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) 1 5) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_right clevr_behind) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.162224054336548
        },
        "0-1_zero_hop-How many metal things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many metal things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda (clevr_transform_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $1)) (clevr_query_material $0)) clevr_small clevr_large) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_transform_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_map (lambda $1) $1))) clevr_metal) clevr_small clevr_large) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large) (clevr_map (lambda (clevr_transform_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $1)) (clevr_query_material $0)) clevr_small clevr_large) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 841.8584654331207
        },
        "1-1_zero_hop-What number of large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $2))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.234174251556396
        },
        "2-1_zero_hop-How many rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_front $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_left) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_left) clevr_front)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.349128246307373
        },
        "3-1_zero_hop-What number of gray rubber cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of gray rubber cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car $0))) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (clevr_map (lambda $0) $0)) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (clevr_intersect $0 $0)) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (clevr_map (lambda (clevr_car $1)) $0)) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002994537353515625
        },
        "4-1_zero_hop-What number of small metal cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-What number of small metal cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_intersect $0 $0) clevr_left)) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube (clevr_relate (clevr_transform_size clevr_small (clevr_car $0)) clevr_left $0)) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) clevr_left $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000255584716796875
        },
        "5-1_zero_hop-How many small things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-How many small things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) (clevr_transform_material clevr_rubber $0) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.447080373764038
        },
        "6-1_zero_hop-There is a yellow thing; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-There is a yellow thing; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_right)) clevr_green) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)) clevr_green) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_green) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))) clevr_green) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (clevr_map (lambda $0) $0))) clevr_green) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.4856743812561035
        },
        "7-1_zero_hop-What is the shape of the brown thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the brown thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_union $0 $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.044689416885376
        },
        "8-1_zero_hop-What is the shape of the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_sphere clevr_cube) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_sphere (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_sphere (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) (clevr_query_shape (clevr_car $0)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_cube (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.365417957305908
        },
        "9-1_zero_hop-What is the shape of the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the small yellow thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 8) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 9) clevr_cylinder clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 8 (clevr_count $0)) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.5147452354431152
        },
        "10-1_zero_hop-What is the shape of the small purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the small purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small) $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.24201774597168
        },
        "11-1_zero_hop-What is the shape of the blue metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the blue metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_car $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_transform_material clevr_rubber (clevr_car $0)) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) (clevr_car $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.974088430404663
        },
        "12-1_zero_hop-What is the purple thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What is the purple thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 0) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) (lambda (lambda $0)))) 0) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.291327238082886
        },
        "13-1_zero_hop-What material is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the gray thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large clevr_small) (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) clevr_large clevr_small)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.974729776382446
        },
        "14-1_zero_hop-What material is the purple cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What material is the purple cylinder? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_left clevr_right)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.295283317565918
        },
        "15-1_zero_hop-What is the gray cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the gray cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_right clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small) clevr_large) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.745309114456177
        },
        "16-1_zero_hop-What is the small blue cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the small blue cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_large (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) clevr_small clevr_large)) (clevr_query_size (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 19.021244764328003
        },
        "17-1_zero_hop-What material is the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What material is the small yellow thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00023984909057617188
        },
        "18-1_zero_hop-The cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-The cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube $0 (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (clevr_map (lambda $0) $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (clevr_map (lambda (clevr_car $1)) $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002830028533935547
        },
        "19-1_zero_hop-What color is the metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal sphere? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $1) $0 $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $1) (clevr_car $1) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $1) (clevr_car $1) $2)) $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cube $0) clevr_right clevr_behind) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_small clevr_large) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 53.529361963272095
        },
        "20-1_zero_hop-What is the color of the rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the rubber cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) (clevr_query_color (clevr_car $0)) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) (clevr_query_color (clevr_car $0)) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_purple) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left)) (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_cyan) (clevr_query_color (clevr_car $0)) (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.05275797843933
        },
        "21-1_zero_hop-The large cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 7) clevr_purple (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) (clevr_query_color (clevr_car $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 8 (clevr_count $0)) (clevr_query_color (clevr_car $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 8) clevr_purple (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_purple (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00025081634521484375
        },
        "22-1_zero_hop-The rubber cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The rubber cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_transform_material clevr_rubber (clevr_car (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0))) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (clevr_relate (clevr_car (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0)) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_transform_size clevr_large (clevr_car (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) clevr_right $0))) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.515874862670898
        },
        "23-1_zero_hop-The large metal thing has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large metal thing has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_query_color (clevr_car $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_yellow (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_yellow (clevr_query_color (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002665519714355469
        },
        "24-1_zero_hop-What is the size of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What is the size of the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00024580955505371094
        },
        "25-1_zero_hop-What is the size of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-What is the size of the gray sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_shape clevr_sphere (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_shape clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.177291631698608
        },
        "26-1_zero_hop-The green thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-The green thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_large (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_rubber clevr_metal)) clevr_small clevr_large)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.3363196849823
        },
        "27-1_zero_hop-The gray metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The gray metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 0) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))) clevr_metal) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 19.025946378707886
        },
        "28-1_zero_hop-The brown metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-The brown metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_large (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_metal clevr_metal)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002872943878173828
        },
        "29-1_zero_hop-The brown thing is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The brown thing is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_rubber clevr_metal) (clevr_query_material (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_rubber clevr_metal)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_sphere clevr_cylinder) $0) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_cube clevr_cylinder) $0) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_sphere $0) clevr_rubber clevr_metal) clevr_metal)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.557737112045288
        },
        "0-2_localization-Find the large things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the large things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_fold $0 $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_fold $0 $0 (lambda (lambda $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00044226646423339844
        },
        "1-2_localization-Find the small things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00041365623474121094
        },
        "2-2_localization-Find the brown things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the brown things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_localization-Find the purple things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the purple things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple (clevr_fold $0 $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.456254482269287
        },
        "4-2_localization-Find the red things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the red things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_red))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_transform_color clevr_red (clevr_car $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.359090805053711
        },
        "5-2_localization-Find the green things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the green things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_gray)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $1) $1) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_gray)) $0)) $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 86.12306022644043
        },
        "6-2_localization-Find the gray things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the gray things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) (clevr_query_color $1)) $1 $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_gray)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) (clevr_query_color $1)) $1 $0)) $1) clevr_gray))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 323.8828845024109
        },
        "7-2_localization-Find the blue things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the blue things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_green)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) (clevr_query_color $1)) $1 $0)) $1) clevr_blue))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda $0) (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) $2 $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 142.17128133773804
        },
        "8-2_localization-Find the yellow things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the yellow things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_red)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_cyan)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_brown)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) $0 (clevr_fold $1 $1 (lambda (lambda (clevr_difference $3 (clevr_relate $1 clevr_front $0))))) $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_left) clevr_left) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 60.18220782279968
        },
        "9-2_localization-Find the cyan things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the cyan things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.415249824523926
        },
        "10-2_localization-Find the rubber things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the rubber things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-2_localization-Find the metal things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the metal things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.472084522247314
        },
        "12-2_localization-Find the spheres.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the spheres. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 131.15669536590576
        },
        "13-2_localization-Find the cylinders.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the cylinders. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_localization-Find the cubes.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the cubes. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 199.68967032432556
        },
        "15-2_localization-Find the small yellow metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the small yellow metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.72990584373474
        },
        "16-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.73271107673645
        },
        "17-2_localization-Find the purple rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the purple rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "18-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.39383888244629
        },
        "19-2_localization-Find the small red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the small red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda $0) $0))))) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda $0) $2))))) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.386687517166138
        },
        "20-2_localization-Find the brown metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the brown metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.653016567230225
        },
        "21-2_localization-Find the yellow rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the yellow rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.837304830551147
        },
        "22-2_localization-Find the gray sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the gray sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "23-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (clevr_query_color (clevr_transform_color clevr_green (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.512126207351685
        },
        "24-2_localization-Find the small sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the small sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "25-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_fold $0 $0 (lambda (lambda $0))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_union $0 $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003714561462402344
        },
        "26-2_localization-Find the purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the purple thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) $0 $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (clevr_if (clevr_gt? 1 (clevr_count $0)) (clevr_query_color (clevr_car $0)) clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.412009239196777
        },
        "27-2_localization-Find the small cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 274.7684442996979
        },
        "28-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_union $0 $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.520727634429932
        },
        "29-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.7324161529541
        },
        "30-2_localization-Find the small purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "30-2_localization-Find the small purple thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (clevr_query_color (clevr_transform_color clevr_purple (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.72961664199829
        },
        "31-2_localization-Find the small metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "31-2_localization-Find the small metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "32-2_localization-Find the small rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "32-2_localization-Find the small rubber cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "33-2_localization-Find the small metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "33-2_localization-Find the small metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "34-2_localization-Find the large blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "34-2_localization-Find the large blue metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "35-2_localization-Find the small brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "35-2_localization-Find the small brown thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) $0 $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.304802656173706
        },
        "36-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "36-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "37-2_localization-Find the metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "37-2_localization-Find the metal sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "38-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "38-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003666877746582031
        },
        "39-2_localization-Find the red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "39-2_localization-Find the red thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_union $0 $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (clevr_query_color (clevr_transform_color clevr_red (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 7.549565315246582
        },
        "40-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "40-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_gray))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003643035888671875
        },
        "41-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "41-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_cyan))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00034332275390625
        },
        "42-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "42-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "43-2_localization-Find the small rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "43-2_localization-Find the small rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.721415996551514
        },
        "44-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "44-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.09165358543396
        },
        "45-2_localization-Find the large sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "45-2_localization-Find the large sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $1))) $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) $5 $1) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_gray) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 33.06029939651489
        },
        "46-2_localization-Find the large metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "46-2_localization-Find the large metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "47-2_localization-Find the blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "47-2_localization-Find the blue metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $1))) $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 888.7312335968018
        },
        "48-2_localization-Find the large gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "48-2_localization-Find the large gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_fold $0 $0 (lambda (lambda $0)))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 19.083036422729492
        },
        "49-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "49-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "50-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "50-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "51-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "51-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "52-2_localization-Find the small metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "52-2_localization-Find the small metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) (clevr_transform_size clevr_large $0) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) (clevr_transform_material clevr_metal $2) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 82.70480298995972
        },
        "53-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "53-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004172325134277344
        },
        "54-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "54-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_union $0 $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $0) $0 $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 11.455530405044556
        },
        "55-2_localization-Find the small cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "55-2_localization-Find the small cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "56-2_localization-Find the rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "56-2_localization-Find the rubber cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "57-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "57-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_union $0 $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 19.122791051864624
        },
        "0-2_remove-What if you removed all of the blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the blue metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_remove-What if you removed all of the gray metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the gray metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_difference (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 34.346044063568115
        },
        "2-2_remove-What if you removed all of the yellow cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_remove-What if you removed all of the yellow cubes? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_remove-What if you removed all of the yellow spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_remove-What if you removed all of the yellow spheres? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_remove-If you removed the small green things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the small green things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_remove-If you removed the small blue things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the small blue things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.31486463546753
        },
        "6-2_remove-If you removed the brown cylinders, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the brown cylinders, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "7-2_remove-If you removed the metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 112.53249597549438
        },
        "8-2_remove-If you removed the yellow things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the yellow things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_remove-If you removed the brown things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_remove-If you removed the brown things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "10-2_remove-If you removed the blue things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_remove-If you removed the blue things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-2_remove-If you removed the red things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_remove-If you removed the red things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "12-2_remove-If you removed the brown things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_remove-If you removed the brown things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "13-2_remove-If you removed the spheres, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_remove-If you removed the spheres, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $2) $0))) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) (clevr_transform_material clevr_rubber $0) $2)) (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $2) $0)) (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) $0)) (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) $0)) (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) clevr_cube clevr_sphere)) (clevr_transform_material clevr_rubber $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 90.25225615501404
        },
        "14-2_remove-If you removed the cylinders, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_remove-If you removed the cylinders, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_remove-If you removed the cubes, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_remove-If you removed the cubes, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_remove-If you removed the cylinders, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_remove-If you removed the cylinders, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "17-2_remove-If you removed the cubes, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_remove-If you removed the cubes, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "18-2_remove-If you removed the gray spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-2_remove-If you removed the gray spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "19-2_remove-If you removed the green cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-2_remove-If you removed the green cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "20-2_remove-If you removed the yellow cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_remove-If you removed the yellow cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "21-2_remove-If you removed the red cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-2_remove-If you removed the red cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "0-2_transform-What if the gray sphere became a small green metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the gray sphere became a small green metal sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_transform-What if the cyan sphere became a purple sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the cyan sphere became a purple sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_transform-What if the yellow thing became a small thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if the yellow thing became a small thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) $0 (lambda (clevr_transform_size clevr_small $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) $0 (lambda (clevr_transform_size clevr_small (clevr_transform_size clevr_small $0))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) (clevr_map (lambda $0) $0) (lambda (clevr_transform_size clevr_small $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) (clevr_add (clevr_car $0) $0) (lambda (clevr_transform_size clevr_small $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000644683837890625
        },
        "3-2_transform-What if all the large metal cylinders became small purple cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the large metal cylinders became small purple cylinders? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_transform-What if all the yellow cubes became large blue cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_transform-What if all the yellow cubes became large blue cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_transform-What if all the blue metal things became rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_transform-What if all the blue metal things became rubber things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) $0 (lambda (clevr_transform_material clevr_rubber $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) (clevr_add (clevr_car $0) $0) (lambda (clevr_transform_material clevr_rubber $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber $0)) $0))) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $1) (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $1) $0 $0)) $0) (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber (clevr_if (#(lambda (lambda (clevr_eq_shape (clevr_query_shape (clevr_car $0)) $1))) clevr_cylinder $1) $0 $0)) $0))) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006041526794433594
        },
        "6-2_transform-What if all the red things became large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_transform-What if all the red things became large things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) $0 (lambda (clevr_transform_size clevr_large $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 (clevr_if (clevr_eq_color (clevr_query_color $0) $1) ($2 $0) $0)) $0)) $2)))) $0 (lambda (clevr_transform_size clevr_large $0)) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_car (clevr_map (lambda (clevr_transform_size clevr_large (clevr_if (clevr_eq_color (clevr_query_color $1) clevr_red) (clevr_car (clevr_map (lambda (clevr_transform_size clevr_large $2)) $2)) $1))) $1)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_material (clevr_query_material (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_material (clevr_query_material $0) (clevr_transform_size clevr_large $0)) $0)) (clevr_transform_size clevr_large (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_material (clevr_query_material $0) (clevr_transform_size clevr_large $0)) $0))) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large (clevr_transform_material (clevr_query_material (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large (clevr_transform_material (clevr_query_material $0) $0)) $0)) (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large (clevr_transform_material (clevr_query_material $0) $0)) $0))) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.918216705322266
        },
        "7-2_transform-If all of the blue spheres became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the blue spheres became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_transform-If all of the large green things became red, how many red things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the large green things became red, how many red things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_transform-If all of the red rubber things became green, how many green things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the red rubber things became green, how many green things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-2_transform-If all of the red spheres became blue, how many blue things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_transform-If all of the red spheres became blue, how many blue things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "17-2_transform-If all of the small red things became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_transform-If all of the small red things became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) $0)) (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) $2 $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_material clevr_rubber $2) $0)) (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_material clevr_rubber $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 315.6430916786194
        },
        "20-2_transform-If all of the small blue rubber things became small, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_transform-If all of the small blue rubber things became small, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.678756713867188
        }
    },
    "test": {
        "0-1_compare_integer-Are there fewer small spheres than cyan cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Are there fewer small spheres than cyan cubes? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_left $0))) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 12.656154870986938
        },
        "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0))) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_large clevr_small) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_front $0)) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_front $0)) clevr_left $0))) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.6988685131073
        },
        "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 4 (clevr_count $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 5 (clevr_count $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 6 (clevr_count $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.743607997894287
        },
        "3-1_compare_integer-Are there more metal cylinders than blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Are there more metal cylinders than blue metal things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_metal clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_material (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_rubber clevr_metal) (clevr_query_material (clevr_car $0))) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_rubber clevr_metal)) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.898250102996826
        },
        "0-1_one_hop-What number of metal cubes are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-What number of metal cubes are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (clevr_relate (clevr_car $0) clevr_right $0) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_fold $0 (clevr_relate (clevr_car $0) clevr_right $0) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind (clevr_map (lambda (clevr_car (clevr_relate $0 clevr_behind $1))) (clevr_relate (clevr_car $0) clevr_right $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_right (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_empty (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind (clevr_fold $0 (clevr_relate (clevr_car $0) clevr_behind $0) (lambda (lambda (clevr_difference $2 (clevr_relate (clevr_car $2) clevr_behind $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 28.060619831085205
        },
        "1-1_one_hop-How many metal things are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-How many metal things are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) clevr_left clevr_right) $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.486097812652588
        },
        "3-1_one_hop-What size is the rubber thing that is right the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What size is the rubber thing that is right the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_lt? 8 (clevr_count $0)) clevr_large (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) (clevr_query_size (clevr_car $0)) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_large (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_large (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 4 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_large (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.914474964141846
        },
        "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-1_one_hop-The small metal thing that is right the small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-The small metal thing that is right the small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "6-1_one_hop-What is the small cylinder front the small brown cylinder made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-What is the small cylinder front the small brown cylinder made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_rubber clevr_metal)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_rubber clevr_metal) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) (clevr_eq_size clevr_small clevr_small) (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) (clevr_gt? 7 (clevr_count $0)) (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.86988615989685
        },
        "7-1_one_hop-What is the material of the large thing right the large purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-What is the material of the large thing right the large purple metal thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_rubber (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_rubber (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_car $0) (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.887835264205933
        },
        "8-1_one_hop-The small metal thing right the small metal sphere has what shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-The small metal thing right the small metal sphere has what shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_lt? 7 (clevr_count $0)) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 8 (clevr_count $0)) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) (clevr_query_shape (clevr_car $0)) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_front $0)))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_map (lambda $0) (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_front $0))))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.79608941078186
        },
        "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_cube (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_cube (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_cube (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 12.711111307144165
        },
        "0-1_single_or-How many objects are either large metal spheres or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many objects are either large metal spheres or large rubber things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "1-1_single_or-How many things are either small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are either small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 7 (clevr_if (clevr_gt? 7 (clevr_count $0)) 3 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) 3 (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 7 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 189.59044313430786
        },
        "2-1_single_or-How many small things are rubber cylinders or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many small things are rubber cylinders or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_front $0))) clevr_cylinder) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 1 (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_right $0)))) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_gt? 7 (clevr_count $0)) (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0)))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_gt? 7 (clevr_count $0)) (clevr_lt? 2 (clevr_count $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.38731598854065
        },
        "3-1_single_or-What number of small things are spheres or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of small things are spheres or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "4-1_single_or-How many green things are either small metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many green things are either small metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_left $0))) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_map (lambda (clevr_car $3)) (clevr_relate $1 clevr_behind $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_left $0)) clevr_empty))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.081443309783936
        },
        "5-1_single_or-How many purple things are small things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-How many purple things are small things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_sphere) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_cube clevr_sphere)) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_behind $0)))) clevr_sphere) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0)))) clevr_sphere) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.254907369613647
        },
        "6-1_single_or-How many metal objects are large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-How many metal objects are large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))) clevr_sphere) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 1) 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 136.5644097328186
        },
        "7-1_single_or-What number of metal objects are small spheres or purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-What number of metal objects are small spheres or purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 1 0) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))) clevr_cylinder) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 1 0) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)))) (clevr_count (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_map (lambda (clevr_car $1)) $0) clevr_empty)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)))) (clevr_count (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_relate (clevr_car $0) clevr_left $0) clevr_empty)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)))) (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)) clevr_behind $0))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.873525857925415
        },
        "8-1_single_or-How many spheres are large metal things or small green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-How many spheres are large metal things or small green rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-1_single_or-How many cylinders are either small purple things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-How many cylinders are either small purple things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_right clevr_behind) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_behind clevr_right) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_relate (clevr_car $0) clevr_right $0) (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_right $0)) (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.848283052444458
        },
        "0-1_zero_hop-How many large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "1-1_zero_hop-What number of rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of rubber things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "2-1_zero_hop-How many small cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many small cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_front $0))) clevr_cube) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? 1 (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_left $0)))) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_fold (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_behind $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_left $0))))))) clevr_cylinder) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_fold (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_behind $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_left $2))))))) clevr_cylinder) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 41.21282172203064
        },
        "3-1_zero_hop-What number of small rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of small rubber things are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "4-1_zero_hop-How many small metal spheres are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-How many small metal spheres are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 0) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 1) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.8714280128479004
        },
        "5-1_zero_hop-What number of small rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-What number of small rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 1) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.30442190170288
        },
        "6-1_zero_hop-What shape is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-What shape is the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_query_shape (clevr_car $0)) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_color clevr_brown (clevr_car $0))) clevr_sphere) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))))) clevr_sphere) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $2))))))) clevr_sphere) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 2.879230499267578
        },
        "7-1_zero_hop-What is the shape of the red thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the red thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_lt? 7 (clevr_count $0)) clevr_sphere (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 7 (clevr_count $0)) clevr_sphere (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 8 (clevr_count $0)) clevr_sphere (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $2)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 62.496236085891724
        },
        "8-1_zero_hop-What is the shape of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_cube (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_cube clevr_cylinder) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_sphere (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_cube (clevr_if (clevr_lt? 2 (clevr_count (clevr_map (lambda $0) (clevr_relate (clevr_car $0) clevr_behind $0)))) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_cube (clevr_if (clevr_lt? 2 (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_cylinder) (clevr_transform_size clevr_small $0) $0)) (clevr_relate (clevr_car $0) clevr_behind $0)))) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 90.6865074634552
        },
        "9-1_zero_hop-What is the shape of the large rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the large rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $2)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $2)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_sphere (clevr_query_shape (clevr_car (clevr_fold (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_front $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 37.008458375930786
        },
        "10-1_zero_hop-What is the shape of the cyan rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the cyan rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-1_zero_hop-What is the shape of the purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the purple metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "12-1_zero_hop-What material is the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What material is the blue thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_rubber (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_rubber clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_rubber (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_rubber clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_gt? 7 (clevr_count $0)) (clevr_eq_size clevr_small clevr_small) (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) (clevr_if (clevr_gt? 7 (clevr_count $0)) (clevr_query_color (clevr_car $0)) clevr_purple)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_gt? 7 (clevr_count $0)) (clevr_gt? 7 (clevr_count $0)) (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.99344491958618
        },
        "13-1_zero_hop-What material is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 5 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_metal (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count $0)) (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 5 (clevr_count $0)) (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.834069967269897
        },
        "14-1_zero_hop-What is the material of the large purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What is the material of the large purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_cube) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_cube) (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0)) clevr_left $0)) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)) (clevr_if (clevr_eq_shape clevr_cylinder clevr_cube) clevr_front clevr_front) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.99863052368164
        },
        "15-1_zero_hop-What is the small cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the small cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 5 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_front $0))) clevr_cube) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $0)))))) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $2)))))) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.016767024993896
        },
        "16-1_zero_hop-What is the large brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the large brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_purple) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) clevr_metal (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_purple) (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_left $0))) clevr_cube) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.80843448638916
        },
        "17-1_zero_hop-What is the material of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What is the material of the gray sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 4 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 5 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_right $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count (clevr_add (clevr_car $0) (clevr_relate (clevr_car $0) clevr_left $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.027689695358276
        },
        "18-1_zero_hop-What color is the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-What color is the small cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_if (clevr_eq_color (clevr_query_color $1) clevr_yellow) (clevr_add $1 $0) $0) (clevr_relate $1 clevr_behind $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $0))))))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $2))))))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $0))))))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $2))))))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 53.60754418373108
        },
        "19-1_zero_hop-What color is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "20-1_zero_hop-What is the color of the small cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the small cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "21-1_zero_hop-The large cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "22-1_zero_hop-The small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 5) clevr_purple clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 6) clevr_purple clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 7) clevr_purple clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 8) clevr_purple clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 4 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) clevr_red clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 54.811620473861694
        },
        "23-1_zero_hop-The large sphere has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large sphere has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "24-1_zero_hop-What size is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What size is the metal cylinder? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_cyan) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) (clevr_relate (clevr_car $0) clevr_behind $0) $0))) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.90794587135315
        },
        "25-1_zero_hop-How big is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-How big is the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_brown) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_front clevr_behind) $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_front clevr_right) $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.08483576774597
        },
        "26-1_zero_hop-How big is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-How big is the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_color clevr_cyan (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_left $0))) clevr_sphere) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.357030868530273
        },
        "27-1_zero_hop-The metal sphere is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The metal sphere is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_rubber clevr_metal)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_cube clevr_cylinder)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 12.773197412490845
        },
        "28-1_zero_hop-How big is the gray rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-How big is the gray rubber thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_brown) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_right $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_rubber clevr_metal)) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 12.771375179290771
        },
        "29-1_zero_hop-The metal cylinder is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The metal cylinder is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_shape clevr_cylinder (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 6.141770124435425
        },
        "0-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_localization-Find the small rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_localization-Find the red metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the red metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_localization-Find the small gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the small gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_localization-Find the small rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the small rubber sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "6-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "7-2_localization-Find the large cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the large cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_localization-Find the metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the metal cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_localization-Find the yellow cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the yellow cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "10-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-2_localization-Find the purple cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the purple cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "12-2_localization-Find the large cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the large cyan thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "13-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_localization-Find the large cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the large cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_localization-Find the large rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the large rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "17-2_localization-Find the small yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the small yellow thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "18-2_localization-Find the small green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the small green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "19-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) clevr_yellow) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) clevr_yellow) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) clevr_yellow) (clevr_add $1 $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $2) clevr_yellow) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 61.87103319168091
        },
        "20-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "21-2_localization-Find the large metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the large metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "22-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "23-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "24-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "25-2_localization-Find the cyan rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the cyan rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "26-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "27-2_localization-Find the small metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small metal cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "28-2_localization-Find the small blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the small blue thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "29-2_localization-Find the rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the rubber cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": null
        },
        "0-2_remove-What if you removed all of the small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the small gray things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_remove-What if you removed all of the small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the small rubber things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_remove-If you removed the red metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-2_remove-If you removed the red metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_remove-If you removed the small brown things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-2_remove-If you removed the small brown things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_remove-If you removed the gray things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the gray things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_remove-If you removed the yellow things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the yellow things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "6-2_remove-If you removed the spheres, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the spheres, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "7-2_remove-If you removed the green spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the green spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_remove-If you removed the cyan cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the cyan cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "0-2_transform-What if the small sphere became a small metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the small sphere became a small metal thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_transform-What if the brown thing became a small gray rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the brown thing became a small gray rubber cube? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_transform-What if all the small yellow rubber things became purple cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if all the small yellow rubber things became purple cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_transform-What if all the green things became small things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the green things became small things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_transform_size (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) clevr_small (clevr_query_size $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_small $0)) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.089296340942383
        },
        "4-2_transform-If all of the large green metal things became purple, how many purple things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_transform-If all of the large green metal things became purple, how many purple things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_transform-If all of the small rubber spheres became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the small rubber spheres became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_transform-If all of the large yellow cubes became small, how many large things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the large yellow cubes became small, how many large things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        }
    }
}