{
    "_summary": {
        "n_tasks_solved": {
            "train": 185,
            "test": 100
        }
    },
    "train": {
        "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_large (clevr_car $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00019860267639160156
        },
        "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material clevr_metal (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004360675811767578
        },
        "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9339311122894287
        },
        "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9019925594329834
        },
        "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_small (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_yellow (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_small (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003895759582519531
        },
        "5-1_compare_integer-Is the number of purple things greater than the number of small cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_compare_integer-Is the number of purple things greater than the number of small cubes? ((lambda (clevr_gt? (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material clevr_rubber (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material clevr_metal (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (clevr_map (lambda $0) $0))) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005059242248535156
        },
        "0-1_one_hop-How many things are right the large cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-How many things are right the large cylinder? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_size clevr_large (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_size clevr_small (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.96702241897583
        },
        "1-1_one_hop-What number of things are right the small gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-What number of things are right the small gray thing? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.995090961456299
        },
        "2-1_one_hop-How many large things are behind the large metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-How many large things are behind the large metal thing? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray)) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray) clevr_gray)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray)) clevr_gray)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9892542362213135
        },
        "3-1_one_hop-What number of large cylinders are left the green rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What number of large cylinders are left the green rubber thing? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (clevr_relate (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda $0) $0)) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.8587944507598877
        },
        "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 0 2 (clevr_relate (clevr_car $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 0 2 (clevr_relate (clevr_transform_size clevr_large (clevr_car $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 0 2 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_relate (clevr_car $0) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 0 2 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_right $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 0 2 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_right $0) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.309522151947021
        },
        "5-1_one_hop-There is a green thing; what number of things are front it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-There is a green thing; what number of things are front it? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.916616439819336
        },
        "6-1_one_hop-There is a thing that is right the cube; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-There is a thing that is right the cube; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00034737586975097656
        },
        "7-1_one_hop-There is a thing front the brown thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-There is a thing front the brown thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00037598609924316406
        },
        "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0)) 2) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0)) 1) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0)) 2) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9550528526306152
        },
        "9-1_one_hop-There is a cube front the gray rubber thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-There is a cube front the gray rubber thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00040721893310546875
        },
        "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00021386146545410156
        },
        "11-1_one_hop-What is the size of the metal thing front the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_one_hop-What is the size of the metal thing front the sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00042510032653808594
        },
        "12-1_one_hop-What color is the thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_one_hop-What color is the thing that is behind the sphere? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00026798248291015625
        },
        "13-1_one_hop-What color is the thing that is behind the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_one_hop-What color is the thing that is behind the blue thing? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00044465065002441406
        },
        "14-1_one_hop-What color is the metal thing left the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_one_hop-What color is the metal thing left the gray thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003414154052734375
        },
        "15-1_one_hop-The large thing left the small rubber thing is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_one_hop-The large thing left the small rubber thing is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal) (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.955052614212036
        },
        "16-1_one_hop-The rubber thing that is right the large metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_one_hop-The rubber thing that is right the large metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_metal (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_small (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00042438507080078125
        },
        "17-1_one_hop-What color is the small metal thing behind the small purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_one_hop-What color is the small metal thing behind the small purple metal thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9431424140930176
        },
        "18-1_one_hop-What is the material of the thing left the cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_one_hop-What is the material of the thing left the cube? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (clevr_intersect $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00041174888610839844
        },
        "19-1_one_hop-What is the material of the cylinder that is left the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_one_hop-What is the material of the cylinder that is left the small cube? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002841949462890625
        },
        "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003323554992675781
        },
        "21-1_one_hop-What is the thing that is front the brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_one_hop-What is the thing that is front the brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005087852478027344
        },
        "22-1_one_hop-What is the material of the sphere right the small sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_one_hop-What is the material of the sphere right the small sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.312087297439575
        },
        "23-1_one_hop-There is a large thing behind the small gray thing; what is its material?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_one_hop-There is a large thing behind the small gray thing; what is its material? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00042057037353515625
        },
        "24-1_one_hop-There is a thing that is right the cube; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_one_hop-There is a thing that is right the cube; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006275177001953125
        },
        "25-1_one_hop-What is the shape of the metal thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_one_hop-What is the shape of the metal thing that is behind the sphere? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_cylinder clevr_cube $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002944469451904297
        },
        "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_cylinder clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_cylinder clevr_sphere (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_cylinder (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_cylinder (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003311634063720703
        },
        "27-1_one_hop-There is a large thing front the small metal cube; what is its shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_one_hop-There is a large thing front the small metal cube; what is its shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003428459167480469
        },
        "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_sphere clevr_cube (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 3 (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_metal) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))) clevr_sphere) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_sphere clevr_cube (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002467632293701172
        },
        "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (clevr_intersect $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00048279762268066406
        },
        "0-1_single_or-How many things are large metal cylinders or small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many things are large metal cylinders or small gray things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 2 3 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 2 3 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 2 3 (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 2 3 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9794585704803467
        },
        "1-1_single_or-How many things are small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.004901170730591
        },
        "2-1_single_or-How many things are red things or large green things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many things are red things or large green things? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_large) 2 4))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car $0))) 2 4))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.389216899871826
        },
        "3-1_single_or-What number of things are rubber things or rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of things are rubber things or rubber cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.987452983856201
        },
        "4-1_single_or-How many things are either small things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many things are either small things or cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_sphere $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00035881996154785156
        },
        "5-1_single_or-What number of small objects are either rubber cylinders or green metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-What number of small objects are either rubber cylinders or green metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 3 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 3 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 3 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 3 (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.990370035171509
        },
        "6-1_single_or-What number of small objects are either blue metal things or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-What number of small objects are either blue metal things or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.30470299720764
        },
        "7-1_single_or-How many small things are cylinders or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-How many small things are cylinders or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.06282663345337
        },
        "8-1_single_or-What number of small things are rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-What number of small things are rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.992300510406494
        },
        "9-1_single_or-What number of small objects are either metal cubes or red rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-What number of small objects are either metal cubes or red rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_red))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_red (clevr_query_color (clevr_car $0)) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_red))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_red (clevr_query_color (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 17.382916688919067
        },
        "10-1_single_or-What number of yellow objects are large metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_single_or-What number of yellow objects are large metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda $2) $0)))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.542996644973755
        },
        "11-1_single_or-How many yellow objects are rubber cylinders or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_single_or-How many yellow objects are rubber cylinders or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $2 clevr_gray) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (clevr_relate (clevr_car $2) clevr_behind $0))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (clevr_relate (clevr_car $2) clevr_behind $2))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 17.642271041870117
        },
        "12-1_single_or-How many purple things are rubber things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_single_or-How many purple things are rubber things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.031921625137329
        },
        "13-1_single_or-How many purple objects are either rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_single_or-How many purple objects are either rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda (clevr_car $1)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00030350685119628906
        },
        "14-1_single_or-How many red objects are either large metal things or small rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_single_or-How many red objects are either large metal things or small rubber cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (clevr_map (lambda $0) $0)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.008935928344727
        },
        "15-1_single_or-How many rubber things are either small spheres or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_single_or-How many rubber things are either small spheres or large purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_yellow) (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) clevr_yellow) (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_add (clevr_car $0) $0) clevr_yellow) (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.451940536499023
        },
        "16-1_single_or-What number of rubber things are large spheres or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_single_or-What number of rubber things are large spheres or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 17.620748043060303
        },
        "17-1_single_or-How many metal objects are either green things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_single_or-How many metal objects are either green things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_difference (clevr_relate (clevr_car $0) clevr_right $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_query_material (clevr_car $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_difference (clevr_relate (clevr_car $0) clevr_behind $0) (clevr_relate (clevr_car $0) clevr_left $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.060948610305786
        },
        "18-1_single_or-What number of rubber objects are purple things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_single_or-What number of rubber objects are purple things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car $0) clevr_behind $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_relate (clevr_car $0) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car $0) clevr_behind $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car $0) clevr_behind $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_relate (clevr_car $0) clevr_right $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car $0) clevr_behind $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_behind $0) clevr_green) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_relate (clevr_car $0) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.075949668884277
        },
        "19-1_single_or-What number of metal things are either large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_single_or-What number of metal things are either large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_add (clevr_transform_material clevr_rubber (clevr_car $0)) (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (clevr_relate (clevr_car $2) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.554795265197754
        },
        "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_car $1) $0)) $0)) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green) (clevr_relate (clevr_car $0) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green) (clevr_relate (clevr_car $0) clevr_behind $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_green) (clevr_relate (clevr_car $0) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_fold $0 $2 (lambda (lambda (clevr_difference $2 (clevr_relate (clevr_car $2) clevr_behind $2)))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.097062826156616
        },
        "21-1_single_or-What number of spheres are small gray things or small metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_single_or-What number of spheres are small gray things or small metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.53568172454834
        },
        "22-1_single_or-How many cylinders are brown things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_single_or-How many cylinders are brown things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car $0) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_yellow) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.53412413597107
        },
        "23-1_single_or-How many spheres are either purple things or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_single_or-How many spheres are either purple things or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_relate (clevr_car $0) clevr_behind $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_relate (clevr_car $0) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_relate (clevr_car $0) clevr_behind $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_relate (clevr_car $0) clevr_behind $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_relate (clevr_car $0) clevr_left $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_relate (clevr_car $0) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_relate (clevr_car $0) clevr_left $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_relate (clevr_car $0) clevr_behind $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_behind $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_relate (clevr_car $0) clevr_behind $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 12.950942277908325
        },
        "24-1_single_or-What number of spheres are small cyan metal things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_single_or-What number of spheres are small cyan metal things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_large (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.087705135345459
        },
        "0-1_zero_hop-How many metal things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many metal things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.131230592727661
        },
        "1-1_zero_hop-What number of large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.45781421661377
        },
        "2-1_zero_hop-How many rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.0812828540802
        },
        "3-1_zero_hop-What number of gray rubber cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of gray rubber cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 12.993929862976074
        },
        "4-1_zero_hop-What number of small metal cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-What number of small metal cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))) clevr_cube) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))) clevr_gray) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 2 (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_left $0))) clevr_cube) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))) clevr_cube) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.537117004394531
        },
        "5-1_zero_hop-How many small things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-How many small things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002713203430175781
        },
        "6-1_zero_hop-There is a yellow thing; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-There is a yellow thing; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00033545494079589844
        },
        "7-1_zero_hop-What is the shape of the brown thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the brown thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.099125862121582
        },
        "8-1_zero_hop-What is the shape of the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00030493736267089844
        },
        "9-1_zero_hop-What is the shape of the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the small yellow thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003650188446044922
        },
        "10-1_zero_hop-What is the shape of the small purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the small purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.132064580917358
        },
        "11-1_zero_hop-What is the shape of the blue metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the blue metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000274658203125
        },
        "12-1_zero_hop-What is the purple thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What is the purple thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.121434926986694
        },
        "13-1_zero_hop-What material is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the gray thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.108603000640869
        },
        "14-1_zero_hop-What material is the purple cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What material is the purple cylinder? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_shape clevr_sphere (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002384185791015625
        },
        "15-1_zero_hop-What is the gray cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the gray cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002357959747314453
        },
        "16-1_zero_hop-What is the small blue cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the small blue cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.129775762557983
        },
        "17-1_zero_hop-What material is the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What material is the small yellow thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003085136413574219
        },
        "18-1_zero_hop-The cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-The cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00036644935607910156
        },
        "19-1_zero_hop-What color is the metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal sphere? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car $0) clevr_left $0) $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00027489662170410156
        },
        "20-1_zero_hop-What is the color of the rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the rubber cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_map (lambda $0) $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003542900085449219
        },
        "21-1_zero_hop-The large cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003604888916015625
        },
        "22-1_zero_hop-The rubber cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The rubber cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003826618194580078
        },
        "23-1_zero_hop-The large metal thing has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large metal thing has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_query_color (clevr_car $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00027751922607421875
        },
        "24-1_zero_hop-What is the size of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What is the size of the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003142356872558594
        },
        "25-1_zero_hop-What is the size of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-What is the size of the gray sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00022983551025390625
        },
        "26-1_zero_hop-The green thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-The green thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_large clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00026702880859375
        },
        "27-1_zero_hop-The gray metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The gray metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00019049644470214844
        },
        "28-1_zero_hop-The brown metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-The brown metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00023102760314941406
        },
        "29-1_zero_hop-The brown thing is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The brown thing is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003235340118408203
        },
        "0-2_localization-Find the large things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the large things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00044846534729003906
        },
        "1-2_localization-Find the small things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.181101322174072
        },
        "2-2_localization-Find the brown things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the brown things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.144110202789307
        },
        "3-2_localization-Find the purple things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the purple things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.184035539627075
        },
        "4-2_localization-Find the red things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the red things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006568431854248047
        },
        "5-2_localization-Find the green things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the green things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.126452207565308
        },
        "6-2_localization-Find the gray things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the gray things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005769729614257812
        },
        "7-2_localization-Find the blue things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the blue things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.075108766555786
        },
        "8-2_localization-Find the yellow things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the yellow things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.149291515350342
        },
        "9-2_localization-Find the cyan things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the cyan things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006098747253417969
        },
        "10-2_localization-Find the rubber things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the rubber things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_fold $0 $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_fold $0 $0 (lambda (lambda $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006372928619384766
        },
        "11-2_localization-Find the metal things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the metal things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.210660696029663
        },
        "12-2_localization-Find the spheres.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the spheres. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.2017903327941895
        },
        "13-2_localization-Find the cylinders.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the cylinders. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (clevr_fold $0 $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.157581806182861
        },
        "14-2_localization-Find the cubes.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the cubes. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.613718748092651
        },
        "15-2_localization-Find the small yellow metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the small yellow metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda $0) $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.245909214019775
        },
        "16-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00041413307189941406
        },
        "17-2_localization-Find the purple rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the purple rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.202798843383789
        },
        "18-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.196824312210083
        },
        "19-2_localization-Find the small red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the small red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_red) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.601267337799072
        },
        "20-2_localization-Find the brown metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the brown metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.216976881027222
        },
        "21-2_localization-Find the yellow rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the yellow rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.223962783813477
        },
        "22-2_localization-Find the gray sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the gray sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.212754726409912
        },
        "23-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_green))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.207492828369141
        },
        "24-2_localization-Find the small sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the small sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.774306774139404
        },
        "25-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005311965942382812
        },
        "26-2_localization-Find the purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the purple thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_intersect $0 $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004935264587402344
        },
        "27-2_localization-Find the small cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.228315353393555
        },
        "28-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005662441253662109
        },
        "29-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0007381439208984375
        },
        "30-2_localization-Find the small purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "30-2_localization-Find the small purple thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.250524997711182
        },
        "31-2_localization-Find the small metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "31-2_localization-Find the small metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.2133870124816895
        },
        "32-2_localization-Find the small rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "32-2_localization-Find the small rubber cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.2680017948150635
        },
        "33-2_localization-Find the small metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "33-2_localization-Find the small metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.202643394470215
        },
        "34-2_localization-Find the large blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "34-2_localization-Find the large blue metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.267897367477417
        },
        "35-2_localization-Find the small brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "35-2_localization-Find the small brown thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.811801671981812
        },
        "36-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "36-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.246796369552612
        },
        "37-2_localization-Find the metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "37-2_localization-Find the metal sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.253600358963013
        },
        "38-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "38-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.210988998413086
        },
        "39-2_localization-Find the red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "39-2_localization-Find the red thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006592273712158203
        },
        "40-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "40-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006184577941894531
        },
        "41-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "41-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006680488586425781
        },
        "42-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "42-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.658104658126831
        },
        "43-2_localization-Find the small rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "43-2_localization-Find the small rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003902912139892578
        },
        "44-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "44-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.2340123653411865
        },
        "45-2_localization-Find the large sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "45-2_localization-Find the large sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0))))))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.288536071777344
        },
        "46-2_localization-Find the large metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "46-2_localization-Find the large metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.22462010383606
        },
        "47-2_localization-Find the blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "47-2_localization-Find the blue metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.276702404022217
        },
        "48-2_localization-Find the large gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "48-2_localization-Find the large gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.300993919372559
        },
        "49-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "49-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.2872395515441895
        },
        "50-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "50-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.298296928405762
        },
        "51-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "51-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.218470811843872
        },
        "52-2_localization-Find the small metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "52-2_localization-Find the small metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.851379871368408
        },
        "53-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "53-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda $0) $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004582405090332031
        },
        "54-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "54-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.299743413925171
        },
        "55-2_localization-Find the small cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "55-2_localization-Find the small cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.304617881774902
        },
        "56-2_localization-Find the rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "56-2_localization-Find the rubber cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00045680999755859375
        },
        "57-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "57-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000560760498046875
        },
        "0-2_remove-What if you removed all of the blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the blue metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.872783422470093
        },
        "1-2_remove-What if you removed all of the gray metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the gray metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_difference (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (clevr_map (lambda $0) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.193300724029541
        },
        "2-2_remove-What if you removed all of the yellow cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_remove-What if you removed all of the yellow cubes? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_intersect (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (clevr_fold $0 $0 (lambda (lambda $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.380966901779175
        },
        "3-2_remove-What if you removed all of the yellow spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_remove-What if you removed all of the yellow spheres? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (clevr_map (lambda $0) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 23.361310720443726
        },
        "4-2_remove-If you removed the small green things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the small green things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.35564923286438
        },
        "5-2_remove-If you removed the small blue things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the small blue things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (clevr_map (lambda $0) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.202385425567627
        },
        "6-2_remove-If you removed the brown cylinders, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the brown cylinders, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference $2 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 23.20462417602539
        },
        "7-2_remove-If you removed the metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004706382751464844
        },
        "8-2_remove-If you removed the yellow things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the yellow things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.76552653312683
        },
        "9-2_remove-If you removed the brown things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_remove-If you removed the brown things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (clevr_intersect $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.373337030410767
        },
        "10-2_remove-If you removed the blue things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_remove-If you removed the blue things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $0 $2)) (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $0) $2)) (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_size clevr_large $0) $2)) (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_metal $0) $2)) (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_size clevr_small $0) $2)) (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.308574199676514
        },
        "11-2_remove-If you removed the red things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_remove-If you removed the red things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $2)))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (lambda (lambda $0))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.361187696456909
        },
        "12-2_remove-If you removed the brown things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_remove-If you removed the brown things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.786694049835205
        },
        "13-2_remove-If you removed the spheres, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_remove-If you removed the spheres, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_material clevr_rubber $2) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.322790622711182
        },
        "14-2_remove-If you removed the cylinders, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_remove-If you removed the cylinders, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.718724012374878
        },
        "15-2_remove-If you removed the cubes, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_remove-If you removed the cubes, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_material clevr_rubber $2) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.46940302848816
        },
        "16-2_remove-If you removed the cylinders, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_remove-If you removed the cylinders, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.170961618423462
        },
        "17-2_remove-If you removed the cubes, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_remove-If you removed the cubes, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.262123107910156
        },
        "18-2_remove-If you removed the gray spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-2_remove-If you removed the gray spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (#(lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $4) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))) clevr_sphere $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.750296592712402
        },
        "19-2_remove-If you removed the green cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-2_remove-If you removed the green cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.313310861587524
        },
        "20-2_remove-If you removed the yellow cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_remove-If you removed the yellow cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $2) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.769745111465454
        },
        "21-2_remove-If you removed the red cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-2_remove-If you removed the red cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $2) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.326009273529053
        },
        "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $2) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.453186511993408
        },
        "0-2_transform-What if the gray sphere became a small green metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the gray sphere became a small green metal sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_transform-What if the cyan sphere became a purple sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the cyan sphere became a purple sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_add (clevr_transform_color clevr_purple (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_color clevr_purple (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_color clevr_purple (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_color clevr_purple (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_color clevr_purple (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.410388708114624
        },
        "2-2_transform-What if the yellow thing became a small thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if the yellow thing became a small thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small (clevr_transform_size clevr_small $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) (clevr_fold $0 $0 (lambda (lambda $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) (clevr_fold $0 $0 (lambda (lambda $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.327494144439697
        },
        "3-2_transform-What if all the large metal cylinders became small purple cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the large metal cylinders became small purple cylinders? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_transform-What if all the yellow cubes became large blue cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_transform-What if all the yellow cubes became large blue cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_transform-What if all the blue metal things became rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_transform-What if all the blue metal things became rubber things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber $0)) clevr_blue) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.965727806091309
        },
        "6-2_transform-What if all the red things became large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_transform-What if all the red things became large things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large (clevr_transform_size clevr_large $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_large $0)) clevr_red) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) clevr_large clevr_small) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.966413974761963
        },
        "7-2_transform-If all of the blue spheres became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the blue spheres became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.068082094192505
        },
        "8-2_transform-If all of the large green things became red, how many red things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the large green things became red, how many red things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green (clevr_map (lambda $0) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red (clevr_map (lambda $0) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.760742664337158
        },
        "9-2_transform-If all of the red rubber things became green, how many green things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the red rubber things became green, how many green things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.82304310798645
        },
        "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_query_shape (clevr_car $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.388643026351929
        },
        "11-2_transform-If all of the red spheres became blue, how many blue things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_transform-If all of the red spheres became blue, how many blue things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.971320390701294
        },
        "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_cube clevr_cylinder) $0))) clevr_metal) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 2 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_metal) clevr_cube clevr_cylinder) $0))) clevr_metal) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 2 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_map (lambda (clevr_car $1)) $0))) clevr_metal) clevr_cube clevr_cylinder) $0))) clevr_metal) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 23.96457600593567
        },
        "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1)) $0) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_map (lambda (clevr_car $1)) $0) $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_map (lambda (clevr_car $1)) $0) $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_map (lambda (clevr_car $1)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_map (lambda (clevr_car $1)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)) $0 (lambda (lambda (clevr_difference $0 (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.61235761642456
        },
        "17-2_transform-If all of the small red things became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_transform-If all of the small red things became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_material clevr_rubber $2) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.641763687133789
        },
        "20-2_transform-If all of the small blue rubber things became small, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_transform-If all of the small blue rubber things became small, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.376612901687622
        }
    },
    "test": {
        "0-1_compare_integer-Are there fewer small spheres than cyan cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Are there fewer small spheres than cyan cubes? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car (clevr_map (lambda $0) $0))) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.774836301803589
        },
        "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_yellow (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_shape (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.183204174041748
        },
        "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) 2) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.796831130981445
        },
        "3-1_compare_integer-Are there more metal cylinders than blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Are there more metal cylinders than blue metal things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_metal clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))) clevr_cube) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.694310188293457
        },
        "0-1_one_hop-What number of metal cubes are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-What number of metal cubes are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.258947372436523
        },
        "1-1_one_hop-How many metal things are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-How many metal things are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) $0) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_gray)) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.396681308746338
        },
        "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.817079544067383
        },
        "3-1_one_hop-What size is the rubber thing that is right the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What size is the rubber thing that is right the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_behind $0)) 2) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.462330102920532
        },
        "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cylinder $0 (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0) clevr_behind $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.38758659362793
        },
        "5-1_one_hop-The small metal thing that is right the small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-The small metal thing that is right the small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) clevr_green))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.275455951690674
        },
        "6-1_one_hop-What is the small cylinder front the small brown cylinder made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-What is the small cylinder front the small brown cylinder made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_map (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $1 $1)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.178777933120728
        },
        "7-1_one_hop-What is the material of the large thing right the large purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-What is the material of the large thing right the large purple metal thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (clevr_transform_size clevr_large (clevr_car $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_rubber (clevr_query_material (clevr_transform_color clevr_purple (clevr_car $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.193263530731201
        },
        "8-1_one_hop-The small metal thing right the small metal sphere has what shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-The small metal thing right the small metal sphere has what shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.104520082473755
        },
        "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car $0))) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_rubber) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_behind $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.406969785690308
        },
        "0-1_single_or-How many objects are either large metal spheres or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many objects are either large metal spheres or large rubber things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_union (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0)) $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 34.07622170448303
        },
        "1-1_single_or-How many things are either small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are either small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.308295011520386
        },
        "2-1_single_or-How many small things are rubber cylinders or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many small things are rubber cylinders or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) 1 2 (clevr_relate (clevr_car $0) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) $0 (clevr_car $1))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) $0 (clevr_car $3))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) $2 $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 34.3125422000885
        },
        "3-1_single_or-What number of small things are spheres or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of small things are spheres or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_green)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_add (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 45.83813214302063
        },
        "4-1_single_or-How many green things are either small metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many green things are either small metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car $0) clevr_behind (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)) clevr_behind (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_front (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car $0) clevr_behind (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.141143083572388
        },
        "5-1_single_or-How many purple things are small things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-How many purple things are small things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.838784456253052
        },
        "6-1_single_or-How many metal objects are large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-How many metal objects are large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car $0) clevr_behind $0) (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0) clevr_behind $0)) (clevr_add (clevr_car $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.31881546974182
        },
        "7-1_single_or-What number of metal objects are small spheres or purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-What number of metal objects are small spheres or purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_add (clevr_car $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_add (clevr_transform_size clevr_large (clevr_car $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_add (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $2 clevr_brown) (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown) (clevr_add (clevr_transform_color clevr_purple (clevr_car $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.708330631256104
        },
        "8-1_single_or-How many spheres are large metal things or small green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-How many spheres are large metal things or small green rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)) clevr_left $0) clevr_brown)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)) clevr_left $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)) clevr_left $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple)) clevr_left $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 34.05150079727173
        },
        "9-1_single_or-How many cylinders are either small purple things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-How many cylinders are either small purple things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.164103746414185
        },
        "0-1_zero_hop-How many large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.2622106075286865
        },
        "1-1_zero_hop-What number of rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of rubber things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_map (lambda $0) $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.277738571166992
        },
        "2-1_zero_hop-How many small cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many small cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.24726438522339
        },
        "3-1_zero_hop-What number of small rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of small rubber things are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 (clevr_map (lambda $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.243265390396118
        },
        "4-1_zero_hop-How many small metal spheres are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-How many small metal spheres are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.861433506011963
        },
        "5-1_zero_hop-What number of small rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-What number of small rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_sphere) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) clevr_small) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))) clevr_sphere) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.86982560157776
        },
        "6-1_zero_hop-What shape is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-What shape is the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.878161191940308
        },
        "7-1_zero_hop-What is the shape of the red thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the red thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_red)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.23138451576233
        },
        "8-1_zero_hop-What is the shape of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.21550965309143
        },
        "9-1_zero_hop-What is the shape of the large rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the large rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.27795720100403
        },
        "10-1_zero_hop-What is the shape of the cyan rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the cyan rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.826924085617065
        },
        "11-1_zero_hop-What is the shape of the purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the purple metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.54895806312561
        },
        "12-1_zero_hop-What material is the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What material is the blue thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.270768642425537
        },
        "13-1_zero_hop-What material is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) 2) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.313865661621094
        },
        "14-1_zero_hop-What is the material of the large purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What is the material of the large purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_metal (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) 6) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_front $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.234682083129883
        },
        "15-1_zero_hop-What is the small cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the small cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.934166193008423
        },
        "16-1_zero_hop-What is the large brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the large brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.358274221420288
        },
        "17-1_zero_hop-What is the material of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What is the material of the gray sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.910841941833496
        },
        "18-1_zero_hop-What color is the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-What color is the small cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_yellow (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.161124229431152
        },
        "19-1_zero_hop-What color is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.921302795410156
        },
        "20-1_zero_hop-What is the color of the small cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the small cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_map (lambda $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.06466245651245
        },
        "21-1_zero_hop-The large cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.280433893203735
        },
        "22-1_zero_hop-The small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.886824131011963
        },
        "23-1_zero_hop-The large sphere has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large sphere has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.917109251022339
        },
        "24-1_zero_hop-What size is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What size is the metal cylinder? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) clevr_small clevr_large $0) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown)))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.583682298660278
        },
        "25-1_zero_hop-How big is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-How big is the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.387319564819336
        },
        "26-1_zero_hop-How big is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-How big is the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.393909454345703
        },
        "27-1_zero_hop-The metal sphere is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The metal sphere is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) (clevr_query_color (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0) clevr_behind $0)) 2) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.961462497711182
        },
        "28-1_zero_hop-How big is the gray rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-How big is the gray rubber thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.965189933776855
        },
        "29-1_zero_hop-The metal cylinder is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The metal cylinder is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_behind $0)) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_metal) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.3960959911346436
        },
        "0-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.594835996627808
        },
        "1-2_localization-Find the small rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.113324403762817
        },
        "2-2_localization-Find the red metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the red metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.242684841156006
        },
        "3-2_localization-Find the small gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the small gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.669778108596802
        },
        "4-2_localization-Find the small rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the small rubber sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.3631329536438
        },
        "5-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.681185483932495
        },
        "6-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.99535083770752
        },
        "7-2_localization-Find the large cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the large cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (lambda (clevr_query_color (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) $5) (clevr_transform_material clevr_rubber $0) $2)) $0))))))))) clevr_cube (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.04799485206604
        },
        "8-2_localization-Find the metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the metal cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.928276538848877
        },
        "9-2_localization-Find the yellow cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the yellow cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.914992570877075
        },
        "10-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.891857147216797
        },
        "11-2_localization-Find the purple cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the purple cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $1))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.896899938583374
        },
        "12-2_localization-Find the large cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the large cyan thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.925572156906128
        },
        "13-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.96599793434143
        },
        "14-2_localization-Find the large cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the large cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 23.01329207420349
        },
        "15-2_localization-Find the large rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the large rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.543966054916382
        },
        "16-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.726496458053589
        },
        "17-2_localization-Find the small yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the small yellow thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.989121675491333
        },
        "18-2_localization-Find the small green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the small green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.728806972503662
        },
        "19-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $1 clevr_yellow))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.011283159255981
        },
        "20-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.000048875808716
        },
        "21-2_localization-Find the large metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the large metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $1))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.358287811279297
        },
        "22-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.39951181411743
        },
        "23-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.782439947128296
        },
        "24-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.583030462265015
        },
        "25-2_localization-Find the cyan rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the cyan rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.391184091567993
        },
        "26-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.031090497970581
        },
        "27-2_localization-Find the small metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small metal cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 13.735337257385254
        },
        "28-2_localization-Find the small blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the small blue thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 22.951268196105957
        },
        "29-2_localization-Find the rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the rubber cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $1)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.008923530578613
        },
        "0-2_remove-What if you removed all of the small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the small gray things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 46.00409173965454
        },
        "1-2_remove-What if you removed all of the small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the small rubber things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_union (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.068323612213135
        },
        "2-2_remove-If you removed the red metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-2_remove-If you removed the red metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) (clevr_query_material (clevr_car $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.22954773902893
        },
        "3-2_remove-If you removed the small brown things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-2_remove-If you removed the small brown things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0) (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.55882430076599
        },
        "4-2_remove-If you removed the gray things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the gray things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_gray $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) clevr_yellow clevr_gray) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_query_color (clevr_car $0)) clevr_gray) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_if (clevr_eq_shape (clevr_query_shape (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_left $0)) clevr_sphere) clevr_yellow clevr_gray) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) (clevr_query_color (#(lambda (lambda (clevr_car (clevr_fold $0 (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_front $0))))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 $3 $0)))))))) clevr_right $0)) clevr_gray) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 215.12552738189697
        },
        "5-2_remove-If you removed the yellow things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the yellow things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_yellow $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.32673645019531
        },
        "6-2_remove-If you removed the spheres, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the spheres, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_difference (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.43839955329895
        },
        "7-2_remove-If you removed the green spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the green spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.077529668807983
        },
        "8-2_remove-If you removed the cyan cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the cyan cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube $2) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 18.438745975494385
        },
        "0-2_transform-What if the small sphere became a small metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the small sphere became a small metal thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_add (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_gray))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_green))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_yellow))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_add (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) clevr_red))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 41.448731660842896
        },
        "1-2_transform-What if the brown thing became a small gray rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the brown thing became a small gray rubber cube? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_transform-What if all the small yellow rubber things became purple cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if all the small yellow rubber things became purple cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_transform-What if all the green things became small things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the green things became small things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber $0)) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small (clevr_transform_size clevr_small $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_small $0)) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 41.03594756126404
        },
        "4-2_transform-If all of the large green metal things became purple, how many purple things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_transform-If all of the large green metal things became purple, how many purple things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_intersect $0 (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (clevr_intersect (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) $0 clevr_gray) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_fold $0 $0 (lambda (lambda $0))) clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $1 $1 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) $2) (clevr_map (lambda $2) $3) $0)))))) (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0))))) clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.218793153762817
        },
        "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_brown $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_cyan $0))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.30366396903992
        },
        "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_purple (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_blue (clevr_relate (clevr_car $0) clevr_behind $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_cube (clevr_union (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_gray $0)))) (#(lambda (lambda (clevr_difference $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) $4) $2 $0)) $0))))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 168.8312427997589
        },
        "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_transform-If all of the small rubber spheres became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the small rubber spheres became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $4) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.15105891227722
        },
        "9-2_transform-If all of the large yellow cubes became small, how many large things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the large yellow cubes became small, how many large things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0))) (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_rubber (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) $4) $0 $2)) $0)))))) clevr_metal (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_large $0)) $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 (#(lambda (#(lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size $3 (clevr_query_size $1)) (clevr_add $1 $0) $0)))))) clevr_small $0)) $2))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 44.55996894836426
        }
    }
}