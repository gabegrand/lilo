{
    "_summary": {
        "n_tasks_solved": {
            "train": 174,
            "test": 95
        }
    },
    "train": {
        "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_small (clevr_query_size (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_car (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_size clevr_large (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002200603485107422
        },
        "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00047516822814941406
        },
        "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00045990943908691406
        },
        "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003075599670410156
        },
        "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_transform_material clevr_metal (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00045013427734375
        },
        "5-1_compare_integer-Is the number of purple things greater than the number of small cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_compare_integer-Is the number of purple things greater than the number of small cubes? ((lambda (clevr_gt? (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (clevr_intersect $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (clevr_fold $0 $0 (lambda (lambda $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.6427834033966064
        },
        "0-1_one_hop-How many things are right the large cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-How many things are right the large cylinder? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_difference $4 (clevr_add $3 $2))))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.549564599990845
        },
        "1-1_one_hop-What number of things are right the small gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-What number of things are right the small gray thing? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) 4 2) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) 4 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) 4 (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) $0 (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)) $0) clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.340845823287964
        },
        "2-1_one_hop-How many large things are behind the large metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-How many large things are behind the large metal thing? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_behind clevr_right $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_left clevr_right $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_front clevr_right $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.04854130744934
        },
        "3-1_one_hop-What number of large cylinders are left the green rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What number of large cylinders are left the green rubber thing? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car (clevr_map (lambda (clevr_car $1)) $0)))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car (clevr_intersect $0 $0)))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.669751882553101
        },
        "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind) $2 (lambda (lambda clevr_empty))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda clevr_empty))) (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda clevr_empty))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda (clevr_difference $0 $0)))) (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda (clevr_difference $0 $0)))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda (clevr_difference $0 $2)))) (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda (clevr_difference $0 $2)))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda (clevr_difference $2 $2)))) (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 (lambda (lambda (clevr_difference $2 $2)))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.668647050857544
        },
        "5-1_one_hop-There is a green thing; what number of things are front it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-There is a green thing; what number of things are front it? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2) 3 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2) 3 (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) 0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 1 3 (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) 2) 3 (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.762254238128662
        },
        "6-1_one_hop-There is a thing that is right the cube; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-There is a thing that is right the cube; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000286102294921875
        },
        "7-1_one_hop-There is a thing front the brown thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-There is a thing front the brown thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00028204917907714844
        },
        "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.766171216964722
        },
        "9-1_one_hop-There is a cube front the gray rubber thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-There is a cube front the gray rubber thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.773087978363037
        },
        "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004372596740722656
        },
        "11-1_one_hop-What is the size of the metal thing front the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_one_hop-What is the size of the metal thing front the sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003008842468261719
        },
        "12-1_one_hop-What color is the thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_one_hop-What color is the thing that is behind the sphere? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.618768692016602
        },
        "13-1_one_hop-What color is the thing that is behind the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_one_hop-What color is the thing that is behind the blue thing? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_fold $0 $0 (lambda (lambda $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_fold $0 $0 (lambda (lambda $2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.767408132553101
        },
        "14-1_one_hop-What color is the metal thing left the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_one_hop-What color is the metal thing left the gray thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00029969215393066406
        },
        "15-1_one_hop-The large thing left the small rubber thing is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_one_hop-The large thing left the small rubber thing is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_behind $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_relate $1 clevr_behind $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.59588098526001
        },
        "16-1_one_hop-The rubber thing that is right the large metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_one_hop-The rubber thing that is right the large metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005376338958740234
        },
        "17-1_one_hop-What color is the small metal thing behind the small purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_one_hop-What color is the small metal thing behind the small purple metal thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_difference $0 (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0) clevr_left $0)) clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_difference $0 (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_front) $0) clevr_left $0)) clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_metal (clevr_car (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0) clevr_left $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.578995943069458
        },
        "18-1_one_hop-What is the material of the thing left the cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_one_hop-What is the material of the thing left the cube? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002830028533935547
        },
        "19-1_one_hop-What is the material of the cylinder that is left the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_one_hop-What is the material of the cylinder that is left the small cube? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004911422729492188
        },
        "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00023555755615234375
        },
        "21-1_one_hop-What is the thing that is front the brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_one_hop-What is the thing that is front the brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00029969215393066406
        },
        "22-1_one_hop-What is the material of the sphere right the small sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_one_hop-What is the material of the sphere right the small sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004131793975830078
        },
        "23-1_one_hop-There is a large thing behind the small gray thing; what is its material?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_one_hop-There is a large thing behind the small gray thing; what is its material? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_query_material (clevr_car $0)) clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00032782554626464844
        },
        "24-1_one_hop-There is a thing that is right the cube; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_one_hop-There is a thing that is right the cube; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (clevr_intersect $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00046515464782714844
        },
        "25-1_one_hop-What is the shape of the metal thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_one_hop-What is the shape of the metal thing that is behind the sphere? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.6453375816345215
        },
        "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (clevr_transform_material clevr_rubber (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004425048828125
        },
        "27-1_one_hop-There is a large thing front the small metal cube; what is its shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_one_hop-There is a large thing front the small metal cube; what is its shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002620220184326172
        },
        "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00028514862060546875
        },
        "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_map (lambda $0) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003857612609863281
        },
        "0-1_single_or-How many things are large metal cylinders or small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many things are large metal cylinders or small gray things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 3 2 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 3 2 (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 5 (clevr_count $0)) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 3 2 (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005052089691162109
        },
        "1-1_single_or-How many things are small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 (clevr_add (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00033926963806152344
        },
        "2-1_single_or-How many things are red things or large green things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many things are red things or large green things? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0)) $0 $0) clevr_front $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) 2) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (clevr_car $0) $0))) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.6777589321136475
        },
        "3-1_single_or-What number of things are rubber things or rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of things are rubber things or rubber cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00025844573974609375
        },
        "4-1_single_or-How many things are either small things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many things are either small things or cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car (clevr_difference $1 (clevr_relate $0 clevr_left $1))) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) $0 (clevr_car $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) $0 (clevr_car $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_large $0) (clevr_car $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) (clevr_car $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.783960580825806
        },
        "5-1_single_or-What number of small objects are either rubber cylinders or green metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-What number of small objects are either rubber cylinders or green metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 1 3 (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 1 3 (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 1 3 (clevr_transform_material clevr_rubber (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (clevr_car $1)) $0)) 3 (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.666315793991089
        },
        "6-1_single_or-What number of small objects are either blue metal things or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-What number of small objects are either blue metal things or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_difference $2 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind)) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) (clevr_add (clevr_transform_material clevr_rubber $1) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front)) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_add (clevr_car $2) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front)) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.34679126739502
        },
        "7-1_single_or-How many small things are cylinders or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-How many small things are cylinders or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add (clevr_transform_material clevr_rubber $1) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_map (lambda $0) $2) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (clevr_add $1 $2) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.07799482345581
        },
        "8-1_single_or-What number of small things are rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-What number of small things are rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_map (lambda $0) $0) $0) clevr_left $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.68135929107666
        },
        "9-1_single_or-What number of small objects are either metal cubes or red rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-What number of small objects are either metal cubes or red rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_red (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) 1 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_behind)) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_right)) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.578787803649902
        },
        "10-1_single_or-What number of yellow objects are large metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_single_or-What number of yellow objects are large metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 0 1 (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_large) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.787639141082764
        },
        "11-1_single_or-How many yellow objects are rubber cylinders or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_single_or-How many yellow objects are rubber cylinders or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 0 $0) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 1) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 0 $0) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_small (clevr_query_size (clevr_car $0))) (clevr_query_size (clevr_car $0))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 0 $0) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.390212297439575
        },
        "12-1_single_or-How many purple things are rubber things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_single_or-How many purple things are rubber things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_behind))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_right))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005083084106445312
        },
        "13-1_single_or-How many purple objects are either rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_single_or-How many purple objects are either rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_red) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00024318695068359375
        },
        "14-1_single_or-How many red objects are either large metal things or small rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_single_or-How many red objects are either large metal things or small rubber cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_rubber))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_transform_material clevr_rubber (clevr_car $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.807932138442993
        },
        "15-1_single_or-How many rubber things are either small spheres or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_single_or-How many rubber things are either small spheres or large purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $1 $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_rubber))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.949506044387817
        },
        "16-1_single_or-What number of rubber things are large spheres or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_single_or-What number of rubber things are large spheres or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)) clevr_metal) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_size $0)) (lambda (clevr_eq_size clevr_large $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda $0) $0)) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.382407665252686
        },
        "17-1_single_or-How many metal objects are either green things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_single_or-How many metal objects are either green things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_car $0)) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_map (lambda $0) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_car $0)) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_car $0)) clevr_metal)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.107704162597656
        },
        "18-1_single_or-What number of rubber objects are purple things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_single_or-What number of rubber objects are purple things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) (clevr_transform_size clevr_large $0) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) (clevr_transform_size clevr_small $0) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) (clevr_transform_size (clevr_query_size (clevr_car $1)) $0) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.121636629104614
        },
        "19-1_single_or-What number of metal things are either large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_single_or-What number of metal things are either large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_red) (clevr_add $1 $0)))))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_red) (clevr_add $1 $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_red) (clevr_add $1 $0)))))) (clevr_car $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.716770887374878
        },
        "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.109258651733398
        },
        "21-1_single_or-What number of spheres are small gray things or small metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_single_or-What number of spheres are small gray things or small metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_red)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) clevr_metal)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_blue clevr_red (clevr_car $0)))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.120690107345581
        },
        "22-1_single_or-How many cylinders are brown things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_single_or-How many cylinders are brown things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $2 $2))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_union (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $2 clevr_metal) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind)) clevr_left) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $2 clevr_rubber) $0))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $2 clevr_rubber) $2))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $2 clevr_metal) $2))) (clevr_add $1 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.592604160308838
        },
        "23-1_single_or-How many spheres are either purple things or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_single_or-How many spheres are either purple things or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (clevr_transform_material clevr_rubber (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (clevr_transform_material clevr_metal (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))))) 3 $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.717725515365601
        },
        "24-1_single_or-What number of spheres are small cyan metal things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_single_or-What number of spheres are small cyan metal things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0)))) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_transform_size clevr_large (clevr_car $0)))) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (clevr_car $0) $0))) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.865444183349609
        },
        "0-1_zero_hop-How many metal things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many metal things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.699443817138672
        },
        "1-1_zero_hop-What number of large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_size $0)) (lambda (clevr_eq_size clevr_large $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 (clevr_map (lambda $0) $0) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.31866455078125
        },
        "2-1_zero_hop-How many rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_transform_material clevr_rubber (clevr_car $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_left) clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.916033029556274
        },
        "3-1_zero_hop-What number of gray rubber cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of gray rubber cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car $0))) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0)))) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car $0))) (clevr_count (clevr_map (lambda (clevr_car $1)) $0)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.99485969543457
        },
        "4-1_zero_hop-What number of small metal cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-What number of small metal cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) $0)) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.771271467208862
        },
        "5-1_zero_hop-How many small things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-How many small things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0) $0) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_front clevr_right $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0) $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_relate (clevr_transform_size clevr_small (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0) $0)) clevr_right $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.7753379344940186
        },
        "6-1_zero_hop-There is a yellow thing; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-There is a yellow thing; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_shape (clevr_car $0)) clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.146029472351074
        },
        "7-1_zero_hop-What is the shape of the brown thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the brown thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.881068468093872
        },
        "8-1_zero_hop-What is the shape of the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.88632607460022
        },
        "9-1_zero_hop-What is the shape of the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the small yellow thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_cylinder clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.755412817001343
        },
        "10-1_zero_hop-What is the shape of the small purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the small purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))) clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) clevr_behind $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)) clevr_sphere (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.65993022918701
        },
        "11-1_zero_hop-What is the shape of the blue metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the blue metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00030922889709472656
        },
        "12-1_zero_hop-What is the purple thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What is the purple thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)) clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003974437713623047
        },
        "13-1_zero_hop-What material is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the gray thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_metal clevr_rubber (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.793203353881836
        },
        "14-1_zero_hop-What material is the purple cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What material is the purple cylinder? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00029397010803222656
        },
        "15-1_zero_hop-What is the gray cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the gray cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004253387451171875
        },
        "16-1_zero_hop-What is the small blue cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the small blue cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 (clevr_query_material (clevr_car $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00034117698669433594
        },
        "17-1_zero_hop-What material is the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What material is the small yellow thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car (clevr_map (lambda $0) $0)))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.783831357955933
        },
        "18-1_zero_hop-The cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-The cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) (clevr_relate $1 clevr_behind $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) (clevr_relate $1 clevr_left $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) (clevr_relate $1 clevr_front $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_add $1 clevr_empty) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.803958177566528
        },
        "19-1_zero_hop-What color is the metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal sphere? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.873920679092407
        },
        "20-1_zero_hop-What is the color of the rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the rubber cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00028252601623535156
        },
        "21-1_zero_hop-The large cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 9 (clevr_count $0)) (clevr_query_color (clevr_car $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_purple (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 7) clevr_purple (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) (clevr_query_color (clevr_car $0)) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.866872310638428
        },
        "22-1_zero_hop-The rubber cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The rubber cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0) clevr_front $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (clevr_relate $1 clevr_front $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.478903532028198
        },
        "23-1_zero_hop-The large metal thing has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large metal thing has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00026345252990722656
        },
        "24-1_zero_hop-What is the size of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What is the size of the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004248619079589844
        },
        "25-1_zero_hop-What is the size of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-What is the size of the gray sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_left) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.796998739242554
        },
        "26-1_zero_hop-The green thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-The green thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_map (lambda $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_small clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00027251243591308594
        },
        "27-1_zero_hop-The gray metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The gray metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004904270172119141
        },
        "28-1_zero_hop-The brown metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-The brown metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0002295970916748047
        },
        "29-1_zero_hop-The brown thing is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The brown thing is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000308990478515625
        },
        "0-2_localization-Find the large things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the large things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_size $0)) (lambda (clevr_eq_size clevr_large $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $2) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) $0 $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.450767278671265
        },
        "1-2_localization-Find the small things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 (clevr_transform_material clevr_rubber $0))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size (clevr_query_size $0) clevr_small) (clevr_transform_size clevr_small $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.006312131881714
        },
        "2-2_localization-Find the brown things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the brown things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_intersect $0 $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.8746817111969
        },
        "3-2_localization-Find the purple things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the purple things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_intersect $0 $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00043773651123046875
        },
        "4-2_localization-Find the red things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the red things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 $0 $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006268024444580078
        },
        "5-2_localization-Find the green things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the green things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_intersect $0 $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.896589040756226
        },
        "6-2_localization-Find the gray things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the gray things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 $0 $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003445148468017578
        },
        "7-2_localization-Find the blue things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the blue things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003399848937988281
        },
        "8-2_localization-Find the yellow things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the yellow things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_yellow)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.7802894115448
        },
        "9-2_localization-Find the cyan things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the cyan things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.8811936378479
        },
        "10-2_localization-Find the rubber things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the rubber things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006437301635742188
        },
        "11-2_localization-Find the metal things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the metal things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.945697784423828
        },
        "12-2_localization-Find the spheres.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the spheres. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (lambda (lambda $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.783376455307007
        },
        "13-2_localization-Find the cylinders.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the cylinders. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (clevr_add (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005147457122802734
        },
        "14-2_localization-Find the cubes.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the cubes. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.960742712020874
        },
        "15-2_localization-Find the small yellow metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the small yellow metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $2 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $2 $0) clevr_metal)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.71623134613037
        },
        "16-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.769718170166016
        },
        "17-2_localization-Find the purple rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the purple rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_purple $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_purple) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_purple (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.98987603187561
        },
        "18-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_rubber)) $0 $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) $0 $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005409717559814453
        },
        "19-2_localization-Find the small red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the small red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.562686443328857
        },
        "20-2_localization-Find the brown metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the brown metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.014068126678467
        },
        "21-2_localization-Find the yellow rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the yellow rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.582396268844604
        },
        "22-2_localization-Find the gray sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the gray sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda $0) $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.268245697021484
        },
        "23-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_green $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 $0 $0) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.014788389205933
        },
        "24-2_localization-Find the small sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the small sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_car $1) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_car $1) $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.993639945983887
        },
        "25-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003409385681152344
        },
        "26-2_localization-Find the purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the purple thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_purple $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) $0 $0 $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004649162292480469
        },
        "27-2_localization-Find the small cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 (clevr_add $1 clevr_empty) $1) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.987277984619141
        },
        "28-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_cyan $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000423431396484375
        },
        "29-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_gray) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_rubber) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004367828369140625
        },
        "30-2_localization-Find the small purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "30-2_localization-Find the small purple thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_purple $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal)) $0)) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $1)) $0)) $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) $0)))) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.838059902191162
        },
        "31-2_localization-Find the small metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "31-2_localization-Find the small metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_transform_material clevr_metal $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $2) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.571528434753418
        },
        "32-2_localization-Find the small rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "32-2_localization-Find the small rubber cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_car $1) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_transform_material clevr_rubber $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.069748163223267
        },
        "33-2_localization-Find the small metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "33-2_localization-Find the small metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0) $0)) $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.258795499801636
        },
        "34-2_localization-Find the large blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "34-2_localization-Find the large blue metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) clevr_metal) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) clevr_blue) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) clevr_metal) clevr_blue) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) $0 $0)) $0) clevr_metal) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.013566493988037
        },
        "35-2_localization-Find the small brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "35-2_localization-Find the small brown thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown clevr_empty $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.018042087554932
        },
        "36-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "36-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_metal clevr_metal (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.29268479347229
        },
        "37-2_localization-Find the metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "37-2_localization-Find the metal sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $1) clevr_metal))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.862111806869507
        },
        "38-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "38-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $2 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $2 $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.035179376602173
        },
        "39-2_localization-Find the red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "39-2_localization-Find the red thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red clevr_empty $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.0367043018341064
        },
        "40-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "40-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003445148468017578
        },
        "41-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "41-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_cyan $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004436969757080078
        },
        "42-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "42-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_rubber clevr_rubber (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.061823129653931
        },
        "43-2_localization-Find the small rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "43-2_localization-Find the small rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_metal $0) $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) $0 (clevr_transform_material clevr_metal $0))) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_metal $0) $0)) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) $0 (clevr_transform_material clevr_metal (clevr_car $1)))) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.348258972167969
        },
        "44-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "44-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) $0 $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_transform_size clevr_large $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 (clevr_transform_material clevr_metal $0))) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.074799060821533
        },
        "45-2_localization-Find the large sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "45-2_localization-Find the large sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.018884181976318
        },
        "46-2_localization-Find the large metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "46-2_localization-Find the large metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) $0 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.863759994506836
        },
        "47-2_localization-Find the blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "47-2_localization-Find the blue metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_blue) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.087940216064453
        },
        "48-2_localization-Find the large gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "48-2_localization-Find the large gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal)) $0 $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) $0 $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_intersect $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0)) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.018782615661621
        },
        "49-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "49-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_gray) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_rubber) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004470348358154297
        },
        "50-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "50-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.285197973251343
        },
        "51-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "51-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) $0 (clevr_transform_material clevr_metal $0))) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) $0 (clevr_transform_material clevr_metal (clevr_car $1)))) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.896522283554077
        },
        "52-2_localization-Find the small metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "52-2_localization-Find the small metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) $0)) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) $0)) $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) (clevr_transform_material clevr_rubber $0))) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) $0 (clevr_transform_material clevr_rubber $0))) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.347238302230835
        },
        "53-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "53-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.879805088043213
        },
        "54-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "54-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue (clevr_difference $0 $0) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.920432090759277
        },
        "55-2_localization-Find the small cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "55-2_localization-Find the small cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.182233572006226
        },
        "56-2_localization-Find the rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "56-2_localization-Find the rubber cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.073289632797241
        },
        "57-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "57-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_green $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_green (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.933753252029419
        },
        "0-2_remove-What if you removed all of the blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the blue metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) $0 (clevr_transform_material clevr_rubber $0))) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_size clevr_large $0) (clevr_transform_material clevr_rubber $0))) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_size clevr_small $0) (clevr_transform_material clevr_rubber $0))) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_size clevr_large $0) (clevr_transform_material clevr_rubber $0))) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_size clevr_small $0) (clevr_transform_material clevr_rubber $0))) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.087680101394653
        },
        "1-2_remove-What if you removed all of the gray metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the gray metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.066284656524658
        },
        "2-2_remove-What if you removed all of the yellow cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_remove-What if you removed all of the yellow cubes? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) $2 $0) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) $2 $0) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_query_color $0) clevr_blue)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_query_color $0) clevr_red)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) $2 $0) $0) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 28.571855545043945
        },
        "3-2_remove-What if you removed all of the yellow spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_remove-What if you removed all of the yellow spheres? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference (clevr_map (lambda $0) $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_yellow)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 28.30703592300415
        },
        "4-2_remove-If you removed the small green things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the small green things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_remove-If you removed the small blue things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the small blue things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal)) $0)) $0) clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $1)) $0)) $0) clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal)) $0)) $0) clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal)) $0)) $0) clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $2) clevr_blue)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.627286195755005
        },
        "6-2_remove-If you removed the brown cylinders, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the brown cylinders, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $2) clevr_brown)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow)) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green)) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 33.25890254974365
        },
        "7-2_remove-If you removed the metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000476837158203125
        },
        "8-2_remove-If you removed the yellow things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the yellow things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_remove-If you removed the brown things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_remove-If you removed the brown things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_sphere clevr_cylinder $0) $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.157970666885376
        },
        "10-2_remove-If you removed the blue things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_remove-If you removed the blue things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_blue clevr_red (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_blue clevr_red (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_blue clevr_red (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_blue clevr_red (clevr_car $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.738421201705933
        },
        "11-2_remove-If you removed the red things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_remove-If you removed the red things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.16628384590149
        },
        "12-2_remove-If you removed the brown things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_remove-If you removed the brown things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "13-2_remove-If you removed the spheres, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_remove-If you removed the spheres, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_remove-If you removed the cylinders, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_remove-If you removed the cylinders, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_metal clevr_rubber $0) $0) (clevr_transform_material clevr_rubber $0) $0)) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 593.2309963703156
        },
        "15-2_remove-If you removed the cubes, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_remove-If you removed the cubes, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_remove-If you removed the cylinders, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_remove-If you removed the cylinders, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "17-2_remove-If you removed the cubes, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_remove-If you removed the cubes, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "18-2_remove-If you removed the gray spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-2_remove-If you removed the gray spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.006863832473755
        },
        "19-2_remove-If you removed the green cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-2_remove-If you removed the green cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_green clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder clevr_cube) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 3 $0) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.025861978530884
        },
        "20-2_remove-If you removed the yellow cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_remove-If you removed the yellow cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 (clevr_car $0))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_union $0 $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.472334384918213
        },
        "21-2_remove-If you removed the red cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-2_remove-If you removed the red cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.162562608718872
        },
        "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_cyan)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_cyan)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.225188732147217
        },
        "0-2_transform-What if the gray sphere became a small green metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the gray sphere became a small green metal sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_transform-What if the cyan sphere became a purple sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the cyan sphere became a purple sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_cyan) (clevr_transform_color (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) clevr_purple (clevr_query_color $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $0)) (clevr_transform_color (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) clevr_purple (clevr_query_color $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_transform_color (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_cyan) clevr_purple (clevr_query_color $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_transform_color (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $0)) clevr_purple (clevr_query_color $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_transform_size (clevr_query_size $0) (clevr_transform_color (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $0)) clevr_purple (clevr_query_color $0)) $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.469626665115356
        },
        "2-2_transform-What if the yellow thing became a small thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if the yellow thing became a small thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small (clevr_transform_size clevr_small $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) (clevr_add (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.261924743652344
        },
        "3-2_transform-What if all the large metal cylinders became small purple cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the large metal cylinders became small purple cylinders? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_transform-What if all the yellow cubes became large blue cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_transform-What if all the yellow cubes became large blue cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_transform_size clevr_large (clevr_transform_color clevr_blue $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_large (clevr_transform_color clevr_blue $0)) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $0)) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.66614866256714
        },
        "5-2_transform-What if all the blue metal things became rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_transform-What if all the blue metal things became rubber things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.002371788024902
        },
        "6-2_transform-What if all the red things became large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_transform-What if all the red things became large things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large (clevr_transform_size clevr_large $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) (clevr_transform_material (clevr_query_material $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.500127077102661
        },
        "7-2_transform-If all of the blue spheres became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the blue spheres became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_transform-If all of the large green things became red, how many red things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the large green things became red, how many red things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_color clevr_red $0) $0) $0)) $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_color clevr_red $0) $0) $0)) $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_color clevr_red (clevr_transform_size clevr_large $0)) $0) $0)) $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_color clevr_red (clevr_transform_size clevr_large $0)) $0) $0)) $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_color clevr_red (clevr_transform_size clevr_large $0)) (clevr_transform_material clevr_rubber $0)) $0)) $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 928.7605376243591
        },
        "9-2_transform-If all of the red rubber things became green, how many green things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the red rubber things became green, how many green things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-2_transform-If all of the red spheres became blue, how many blue things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_transform-If all of the red spheres became blue, how many blue things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_red) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_difference (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_red)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_difference (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_red)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 219.3707046508789
        },
        "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) (clevr_transform_size clevr_large $0) $1) $0)) $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) $0)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.476214408874512
        },
        "17-2_transform-If all of the small red things became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_transform-If all of the small red things became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "20-2_transform-If all of the small blue rubber things became small, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_transform-If all of the small blue rubber things became small, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $2) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (clevr_intersect $0 $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.43183946609497
        }
    },
    "test": {
        "0-1_compare_integer-Are there fewer small spheres than cyan cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Are there fewer small spheres than cyan cubes? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.773919582366943
        },
        "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_blue (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_blue (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.115921258926392
        },
        "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.138768434524536
        },
        "3-1_compare_integer-Are there more metal cylinders than blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Are there more metal cylinders than blue metal things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)) (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.223079919815063
        },
        "0-1_one_hop-What number of metal cubes are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-What number of metal cubes are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_blue)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 0 1 (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 0 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.257170915603638
        },
        "1-1_one_hop-How many metal things are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-How many metal things are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $1 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_left clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) 4 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.8606698513031
        },
        "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_small clevr_large (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) clevr_small (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal) $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.879408359527588
        },
        "3-1_one_hop-What size is the rubber thing that is right the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What size is the rubber thing that is right the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.049432277679443
        },
        "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (clevr_map (lambda $0) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (clevr_intersect $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.82833814620972
        },
        "5-1_one_hop-The small metal thing that is right the small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-The small metal thing that is right the small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0) clevr_behind $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold $0 (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0) clevr_behind $0) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_behind $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $2 $0) clevr_behind $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 41.06656074523926
        },
        "6-1_one_hop-What is the small cylinder front the small brown cylinder made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-What is the small cylinder front the small brown cylinder made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.648556470870972
        },
        "7-1_one_hop-What is the material of the large thing right the large purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-What is the material of the large thing right the large purple metal thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_material (clevr_car $0)) clevr_rubber (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)) (clevr_query_material (clevr_car $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.740298986434937
        },
        "8-1_one_hop-The small metal thing right the small metal sphere has what shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-The small metal thing right the small metal sphere has what shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.076282262802124
        },
        "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.627814531326294
        },
        "0-1_single_or-How many objects are either large metal spheres or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many objects are either large metal spheres or large rubber things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0) (clevr_relate (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (clevr_car $1)) $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.702651977539062
        },
        "1-1_single_or-How many things are either small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are either small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0) clevr_metal) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0) clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_union (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) $0)) $0) clevr_metal) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 73.23090744018555
        },
        "2-1_single_or-How many small things are rubber cylinders or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many small things are rubber cylinders or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.938544750213623
        },
        "3-1_single_or-What number of small things are spheres or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of small things are spheres or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1) $1) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) 0 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) 0 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)) 2) 0 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) 0 (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 54.38252353668213
        },
        "4-1_single_or-How many green things are either small metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many green things are either small metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_red)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.57983064651489
        },
        "5-1_single_or-How many purple things are small things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-How many purple things are small things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_purple clevr_red (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.215542316436768
        },
        "6-1_single_or-How many metal objects are large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-How many metal objects are large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_purple $0 $0) clevr_gray)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car $0))) 0 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) 2) 0 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)) clevr_metal) 0 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)) 0) 0 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.69752335548401
        },
        "7-1_single_or-What number of metal objects are small spheres or purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-What number of metal objects are small spheres or purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_car $1)) $0) clevr_rubber)) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 1 0 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) clevr_rubber)) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 0 $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 41.17644286155701
        },
        "8-1_single_or-How many spheres are large metal things or small green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-How many spheres are large metal things or small green rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))) (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) $0))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))) (clevr_count (clevr_fold $0 $0 (lambda (lambda clevr_empty)))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (clevr_add (clevr_car $0) $0))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (clevr_add (clevr_car $0) $0))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 49.44217348098755
        },
        "9-1_single_or-How many cylinders are either small purple things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-How many cylinders are either small purple things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_green)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_behind clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)))) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.679975986480713
        },
        "0-1_zero_hop-How many large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) (clevr_transform_material clevr_rubber $0) $0)) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_transform_material clevr_rubber $0) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $2) $0 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_transform_material clevr_metal $0) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.324167728424072
        },
        "1-1_zero_hop-What number of rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of rubber things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_add (clevr_car $0) $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.231371402740479
        },
        "2-1_zero_hop-How many small cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many small cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_right clevr_left (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.350292444229126
        },
        "3-1_zero_hop-What number of small rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of small rubber things are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_car $1) $0 $1) $0) $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.79750323295593
        },
        "4-1_zero_hop-How many small metal spheres are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-How many small metal spheres are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) 2 2 $0) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (clevr_car $0)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.384777307510376
        },
        "5-1_zero_hop-What number of small rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-What number of small rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) 1 (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) 1 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (clevr_car $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) 0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) 2 1 (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.756116151809692
        },
        "6-1_zero_hop-What shape is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-What shape is the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_cylinder (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.622950792312622
        },
        "7-1_zero_hop-What is the shape of the red thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the red thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.701253652572632
        },
        "8-1_zero_hop-What is the shape of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.691697120666504
        },
        "9-1_zero_hop-What is the shape of the large rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the large rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_front clevr_front $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.146461725234985
        },
        "10-1_zero_hop-What is the shape of the cyan rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the cyan rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front $0 (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_gray $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.72714400291443
        },
        "11-1_zero_hop-What is the shape of the purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the purple metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.691581010818481
        },
        "12-1_zero_hop-What material is the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What material is the blue thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $0 $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.76071286201477
        },
        "13-1_zero_hop-What material is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (clevr_add (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003440380096435547
        },
        "14-1_zero_hop-What is the material of the large purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What is the material of the large purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_purple))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $0 $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) 7) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.076738834381104
        },
        "15-1_zero_hop-What is the small cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the small cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) 2) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)) 3) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.649255990982056
        },
        "16-1_zero_hop-What is the large brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the large brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.244885683059692
        },
        "17-1_zero_hop-What is the material of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What is the material of the gray sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) clevr_rubber (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_rubber clevr_metal $0) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.388415336608887
        },
        "18-1_zero_hop-What color is the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-What color is the small cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal) $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal) $1) $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $1 clevr_metal) $1) $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 48.46593523025513
        },
        "19-1_zero_hop-What color is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)) clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.040088415145874
        },
        "20-1_zero_hop-What is the color of the small cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the small cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $0 $0) $0)) $0) clevr_metal))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 55.690736532211304
        },
        "21-1_zero_hop-The large cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_cyan))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_cyan))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.728281259536743
        },
        "22-1_zero_hop-The small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_purple clevr_red (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_purple clevr_red (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_red clevr_purple (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.96976017951965
        },
        "23-1_zero_hop-The large sphere has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large sphere has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.348858833312988
        },
        "24-1_zero_hop-What size is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What size is the metal cylinder? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.172385215759277
        },
        "25-1_zero_hop-How big is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-How big is the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (clevr_add (clevr_car $0) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00043272972106933594
        },
        "26-1_zero_hop-How big is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-How big is the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.182653427124023
        },
        "27-1_zero_hop-The metal sphere is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The metal sphere is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red)) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.180534839630127
        },
        "28-1_zero_hop-How big is the gray rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-How big is the gray rubber thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $0 $0))) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_large clevr_small $0) (clevr_query_size (clevr_car $0))) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.1642749309539795
        },
        "29-1_zero_hop-The metal cylinder is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The metal cylinder is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_color clevr_red (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_front (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_metal) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.157716512680054
        },
        "0-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_green $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda $0) $0) clevr_rubber) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.62995958328247
        },
        "1-2_localization-Find the small rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_car $1) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_transform_material clevr_rubber $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $2) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.642361640930176
        },
        "2-2_localization-Find the red metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the red metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_red $0 $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.403971910476685
        },
        "3-2_localization-Find the small gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the small gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1) $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_right $1 $1) $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_left $1 $1) $0)) $0) clevr_gray))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.579246044158936
        },
        "4-2_localization-Find the small rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the small rubber sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $2) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) clevr_rubber)) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.9827618598938
        },
        "5-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.431544065475464
        },
        "6-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_eq_shape clevr_cube (clevr_query_shape $0))) (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray)) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cube) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.48173499107361
        },
        "7-2_localization-Find the large cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the large cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.53996276855469
        },
        "8-2_localization-Find the metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the metal cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.658718347549438
        },
        "9-2_localization-Find the yellow cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the yellow cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $2)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $2 $0)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.93019485473633
        },
        "10-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $0 $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $2) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $2) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.51265263557434
        },
        "11-2_localization-Find the purple cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the purple cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_purple))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $2 $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $2 $2) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.82411170005798
        },
        "12-2_localization-Find the large cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the large cyan thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_car (clevr_fold $0 $1 (lambda (lambda (clevr_difference $0 (clevr_relate $1 $4 $0))))))))) clevr_behind $1 $1) $0 $0)) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_cyan) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.90600657463074
        },
        "13-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_red (clevr_query_color $2)) (clevr_transform_size clevr_large $2) $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.49728536605835
        },
        "14-2_localization-Find the large cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the large cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_add $1 clevr_empty) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (clevr_add $1 clevr_empty)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.554354906082153
        },
        "15-2_localization-Find the large rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the large rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $0 $0)) $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $0 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber $0) $0) $0 $0)) $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_rubber) (clevr_add $1 clevr_empty)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 45.71926999092102
        },
        "16-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_brown))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_brown $0 $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.420676231384277
        },
        "17-2_localization-Find the small yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the small yellow thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_car $1) $0)) $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_car $1) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 (clevr_car $1) $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.856698513031006
        },
        "18-2_localization-Find the small green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the small green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.560878038406372
        },
        "19-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (clevr_map (lambda $2) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow) $0 (lambda (lambda (clevr_map (lambda $2) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.712828636169434
        },
        "20-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_red) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_color clevr_red (clevr_query_color $2)) (clevr_transform_size clevr_large $2) $0) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.44766879081726
        },
        "21-2_localization-Find the large metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the large metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber (clevr_car $1)) $0 $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) $0 $0) $0)) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_transform_size clevr_large $0) $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0) $0) $0)) $0) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.41969084739685
        },
        "22-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_green $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_green) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_rubber) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.11521863937378
        },
        "23-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $0 $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal (clevr_car $1)) $0 $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal clevr_rubber $0) $0) $0 $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) $0 $0) $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0) $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.530739068984985
        },
        "24-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_eq_shape clevr_cube (clevr_query_shape $0))) (lambda $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray)) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cube) $0) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.26906132698059
        },
        "25-2_localization-Find the cyan rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the cyan rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) clevr_cyan) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_rubber) clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.532090425491333
        },
        "26-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_yellow $0 $2)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.70042896270752
        },
        "27-2_localization-Find the small metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small metal cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_rubber $0) $0)) $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal)) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) clevr_metal) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.452762842178345
        },
        "28-2_localization-Find the small blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the small blue thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (lambda (clevr_fold $0 $1 (lambda (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))))))) clevr_blue $2 $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_blue) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.526451587677002
        },
        "29-2_localization-Find the rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the rubber cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0) $0)) $0) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 21.08480143547058
        },
        "0-2_remove-What if you removed all of the small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the small gray things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $0 $1)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_add $1 clevr_empty) $2 $1)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 $0 $0)) $0) clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0) $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.730979919433594
        },
        "1-2_remove-What if you removed all of the small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the small rubber things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_union (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) (clevr_car $1) $0) $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_car $1) $0 $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_material clevr_metal $0) $0)) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_difference $0 (clevr_add $1 clevr_empty)) $0 $1)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 48.69732928276062
        },
        "2-2_remove-If you removed the red metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-2_remove-If you removed the red metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda $2))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_red))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_metal) clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $2 clevr_metal) clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference $2 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $2 clevr_metal) clevr_red)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.510847330093384
        },
        "3-2_remove-If you removed the small brown things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-2_remove-If you removed the small brown things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_transform_color clevr_red $0) $0)) $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_color clevr_red $0) $0) $0)) $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $0 (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) (clevr_transform_color clevr_red $0) (clevr_car $1)) $0)) $0) clevr_brown))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 352.53699016571045
        },
        "4-2_remove-If you removed the gray things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the gray things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_gray (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_color $1) clevr_gray $1))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_color (clevr_car $0)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_gray clevr_gray $0) (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cylinder $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_query_color (clevr_car $0)) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_blue clevr_gray $0) (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 130.8411295413971
        },
        "5-2_remove-If you removed the yellow things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the yellow things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) clevr_gray clevr_yellow $0) (clevr_query_color (clevr_car $0)) (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_gt? (clevr_count $0) 4) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_yellow $0) (clevr_query_color (clevr_car $0)) (clevr_car $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)) (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)) (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_gray))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_yellow))) (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_purple)) (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 110.84242558479309
        },
        "6-2_remove-If you removed the spheres, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the spheres, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) $2 $0 $0)) $0)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $2) $0 $0)) $0)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_transform_material (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) clevr_rubber clevr_metal) $0) $0)) $0) clevr_metal)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $2) (clevr_transform_material clevr_rubber $0) $0)) $0)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) $0 (lambda (lambda (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_rubber $2) $0 $0)) $0) (clevr_add $1 clevr_empty)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 60.250553607940674
        },
        "7-2_remove-If you removed the green spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the green spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_green)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_green)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_material $0)) (lambda (clevr_eq_material $1 $0)) $1))) $0 clevr_rubber) $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_sphere $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_green)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 31.663645029067993
        },
        "8-2_remove-If you removed the cyan cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the cyan cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_cyan)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $2) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $2 clevr_cyan)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) 4 (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape $4 (clevr_query_shape $0)) $0 $2)) $0)))))) clevr_cube $0) (#(lambda (lambda (#(lambda (lambda (lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if ($3 ($4 $1)) (clevr_add $1 $0) $0))))))) (lambda (clevr_query_color $0)) (lambda (clevr_eq_color $1 $0)) $1))) $0 clevr_cyan)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 26.59473991394043
        },
        "0-2_transform-What if the small sphere became a small metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the small sphere became a small metal thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_transform_material clevr_metal $0) $0) $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_transform_material clevr_metal $0) $0 $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_query_shape $0) clevr_cube $0)) (clevr_transform_material clevr_metal $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_transform_material (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) clevr_metal (clevr_query_material $0) $0) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (#(lambda (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $1 $2)))) (clevr_eq_shape clevr_sphere (clevr_query_shape $0)) (clevr_eq_material clevr_metal clevr_rubber) $0) (clevr_transform_material clevr_metal $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 48.86422109603882
        },
        "1-2_transform-What if the brown thing became a small gray rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the brown thing became a small gray rubber cube? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_transform-What if all the small yellow rubber things became purple cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if all the small yellow rubber things became purple cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_transform-What if all the green things became small things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the green things became small things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_green) (clevr_transform_size clevr_small $0) $0)) (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 41.82802772521973
        },
        "4-2_transform-If all of the large green metal things became purple, how many purple things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_transform-If all of the large green metal things became purple, how many purple things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_transform-If all of the small rubber spheres became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the small rubber spheres became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_transform-If all of the large yellow cubes became small, how many large things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the large yellow cubes became small, how many large things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        }
    }
}