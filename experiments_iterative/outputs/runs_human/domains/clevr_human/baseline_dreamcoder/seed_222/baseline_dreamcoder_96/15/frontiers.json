{
    "_summary": {
        "n_tasks_solved": {
            "train": 181,
            "test": 94
        }
    },
    "train": {
        "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_size clevr_large (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.8609459400177
        },
        "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_green clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005133152008056641
        },
        "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003712177276611328
        },
        "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.901321887969971
        },
        "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car $0)) clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_gt? (clevr_count $0) 4) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_small clevr_large) (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004761219024658203
        },
        "5-1_compare_integer-Is the number of purple things greater than the number of small cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_compare_integer-Is the number of purple things greater than the number of small cubes? ((lambda (clevr_gt? (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count $0) 9))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 9 (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.728967666625977
        },
        "0-1_one_hop-How many things are right the large cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-How many things are right the large cylinder? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 $0) (clevr_car $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_behind clevr_right $0)) (clevr_car $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_right clevr_behind (clevr_car $0))) (clevr_car $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_behind clevr_front $0)) (clevr_car $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0 $0) (clevr_car $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube (clevr_query_shape (clevr_car $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.89438796043396
        },
        "1-1_one_hop-What number of things are right the small gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-What number of things are right the small gray thing? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_count (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_right $0))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_count (clevr_difference (clevr_map (lambda $0) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.902688026428223
        },
        "2-1_one_hop-How many large things are behind the large metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-How many large things are behind the large metal thing? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_sphere clevr_cube (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_sphere clevr_cube (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_sphere clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_sphere clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_sphere clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.765234470367432
        },
        "3-1_one_hop-What number of large cylinders are left the green rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What number of large cylinders are left the green rubber thing? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_right))) $0))) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.256875276565552
        },
        "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_cylinder) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_query_color (clevr_car $0))) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) clevr_cylinder) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.006951570510864
        },
        "5-1_one_hop-There is a green thing; what number of things are front it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-There is a green thing; what number of things are front it? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))) clevr_cylinder) 3 1) 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) clevr_sphere) 3 1) 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))) clevr_cylinder) 3 1) 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))) clevr_cylinder) 3 1) 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))) clevr_cylinder) 3 1) 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.00381088256836
        },
        "6-1_one_hop-There is a thing that is right the cube; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-There is a thing that is right the cube; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_large (clevr_car $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003495216369628906
        },
        "7-1_one_hop-There is a thing front the brown thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-There is a thing front the brown thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00035381317138671875
        },
        "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) (clevr_query_shape (clevr_car $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 1) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_car $0) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.01505422592163
        },
        "9-1_one_hop-There is a cube front the gray rubber thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-There is a cube front the gray rubber thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.863440990447998
        },
        "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004036426544189453
        },
        "11-1_one_hop-What is the size of the metal thing front the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_one_hop-What is the size of the metal thing front the sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_large clevr_small (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda $0) $0)))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.8377525806427
        },
        "12-1_one_hop-What color is the thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_one_hop-What color is the thing that is behind the sphere? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_green $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) (clevr_car $0) clevr_green (clevr_query_color (clevr_car $0))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) clevr_green $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_green $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.781006574630737
        },
        "13-1_one_hop-What color is the thing that is behind the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_one_hop-What color is the thing that is behind the blue thing? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $2)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $0)))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_front $2)))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.874976634979248
        },
        "14-1_one_hop-What color is the metal thing left the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_one_hop-What color is the metal thing left the gray thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_add (clevr_car $2) (clevr_relate $1 clevr_right $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_add (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2)) (clevr_relate $1 clevr_right $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_add (clevr_car $2) (clevr_relate $1 clevr_right $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_add (clevr_car $2) (clevr_relate $1 clevr_right $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (clevr_map (lambda $0) $0) (clevr_add (clevr_car $2) (clevr_relate $1 clevr_right $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.82566213607788
        },
        "15-1_one_hop-The large thing left the small rubber thing is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_one_hop-The large thing left the small rubber thing is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 1) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 0) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 1) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 0) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 0) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.82420802116394
        },
        "16-1_one_hop-The rubber thing that is right the large metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_one_hop-The rubber thing that is right the large metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_left $0)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_left $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_relate $1 clevr_left $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_relate $1 clevr_left (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) (clevr_relate $1 clevr_left $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.618252992630005
        },
        "17-1_one_hop-What color is the small metal thing behind the small purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_one_hop-What color is the small metal thing behind the small purple metal thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0)) $2) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) $0 (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube))))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 (clevr_car $3) $0)) $2) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cube)) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0)) $2) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube)))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.191864490509033
        },
        "18-1_one_hop-What is the material of the thing left the cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_one_hop-What is the material of the thing left the cube? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car (clevr_map (lambda $0) $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.804804563522339
        },
        "19-1_one_hop-What is the material of the cylinder that is left the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_one_hop-What is the material of the cylinder that is left the small cube? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_metal (clevr_query_material (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_metal (clevr_query_material (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.945165634155273
        },
        "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003628730773925781
        },
        "21-1_one_hop-What is the thing that is front the brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_one_hop-What is the thing that is front the brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_transform_size clevr_large (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car (clevr_map (lambda $0) $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.755070924758911
        },
        "22-1_one_hop-What is the material of the sphere right the small sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_one_hop-What is the material of the sphere right the small sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_query_size (clevr_car $0)) clevr_small) clevr_small) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small (clevr_query_size (clevr_car $0))) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 1) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.950682401657104
        },
        "23-1_one_hop-There is a large thing behind the small gray thing; what is its material?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_one_hop-There is a large thing behind the small gray thing; what is its material? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 7) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00039958953857421875
        },
        "24-1_one_hop-There is a thing that is right the cube; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_one_hop-There is a thing that is right the cube; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.766375303268433
        },
        "25-1_one_hop-What is the shape of the metal thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_one_hop-What is the shape of the metal thing that is behind the sphere? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_cube (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003552436828613281
        },
        "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) clevr_sphere) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) clevr_cylinder) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))) clevr_cylinder) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))) clevr_cylinder) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003561973571777344
        },
        "27-1_one_hop-There is a large thing front the small metal cube; what is its shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_one_hop-There is a large thing front the small metal cube; what is its shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_cube (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) clevr_cylinder) clevr_sphere clevr_cylinder) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) clevr_sphere clevr_cylinder) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.778599739074707
        },
        "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_map (lambda $0) $0) clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_large) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000362396240234375
        },
        "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_relate (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cube))) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_relate (clevr_car (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.811114072799683
        },
        "0-1_single_or-How many things are large metal cylinders or small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many things are large metal cylinders or small gray things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) clevr_cylinder) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_cylinder) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00036525726318359375
        },
        "1-1_single_or-How many things are small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 5) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.70934271812439
        },
        "2-1_single_or-How many things are red things or large green things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many things are red things or large green things? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0) clevr_sphere) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 3) 4 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.74421501159668
        },
        "3-1_single_or-What number of things are rubber things or rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of things are rubber things or rubber cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00039887428283691406
        },
        "4-1_single_or-How many things are either small things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many things are either small things or cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_purple)) $0) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_transform_material clevr_rubber (clevr_car $0)) (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_purple)) $0) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_purple)) $0) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_purple)) $0) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_purple)) $0) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.918535470962524
        },
        "5-1_single_or-What number of small objects are either rubber cylinders or green metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-What number of small objects are either rubber cylinders or green metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) clevr_cylinder) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_cylinder) 3 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 3 (clevr_count (clevr_map (lambda (clevr_car $1)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.905167579650879
        },
        "6-1_single_or-What number of small objects are either blue metal things or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-What number of small objects are either blue metal things or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) (clevr_add $1 $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) (clevr_add (clevr_transform_material clevr_rubber $1) $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) (clevr_add $1 $0)))) (clevr_add (clevr_car $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $4 clevr_front) (clevr_add $1 $0)))) $2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) (clevr_add $1 $0)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.91884469985962
        },
        "7-1_single_or-How many small things are cylinders or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-How many small things are cylinders or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add (clevr_transform_material clevr_rubber $1) $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.86448359489441
        },
        "8-1_single_or-What number of small things are rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-What number of small things are rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_purple)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 (clevr_query_shape (clevr_car $0))))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 (clevr_query_shape (clevr_car $2))))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.980071783065796
        },
        "9-1_single_or-What number of small objects are either metal cubes or red rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-What number of small objects are either metal cubes or red rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_red clevr_brown $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_red (clevr_query_color (clevr_car $0)) $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_red clevr_brown (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_red clevr_brown $0) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_red clevr_brown (clevr_map (lambda $0) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.405028104782104
        },
        "10-1_single_or-What number of yellow objects are large metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_single_or-What number of yellow objects are large metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car $0))) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_large) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 0 (clevr_add (clevr_car $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.7188637256622314
        },
        "11-1_single_or-How many yellow objects are rubber cylinders or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_single_or-How many yellow objects are rubber cylinders or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_right $0) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_relate (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) clevr_right $0) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_relate (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) clevr_right $0) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_right $0) (clevr_car $0) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_right $0) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.927828073501587
        },
        "12-1_single_or-How many purple things are rubber things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_single_or-How many purple things are rubber things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) clevr_purple clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.6870551109313965
        },
        "13-1_single_or-How many purple objects are either rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_single_or-How many purple objects are either rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 0 1 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 0 1 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 0 (clevr_count (clevr_map (lambda (clevr_car $1)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 0 1 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 0 1 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003440380096435547
        },
        "14-1_single_or-How many red objects are either large metal things or small rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_single_or-How many red objects are either large metal things or small rubber cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_front) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_front) clevr_blue clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_front) (clevr_car $0) clevr_sphere)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_front) clevr_cyan clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.811527252197266
        },
        "15-1_single_or-How many rubber things are either small spheres or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_single_or-How many rubber things are either small spheres or large purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_behind clevr_front $0)) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_difference $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_difference $0 (clevr_relate (clevr_car $0) clevr_left $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_behind clevr_front $0)) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_behind clevr_front $0)) (clevr_transform_material clevr_rubber (clevr_car $0)) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.95009970664978
        },
        "16-1_single_or-What number of rubber things are large spheres or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_single_or-What number of rubber things are large spheres or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 9 (clevr_count $0)) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)))) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda $0) $0)) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)) 9) 4 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.848608016967773
        },
        "17-1_single_or-How many metal objects are either green things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_single_or-How many metal objects are either green things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 3 (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 0 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 3 (clevr_if (clevr_gt? (clevr_count $0) 4) 0 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 3 (clevr_if (clevr_gt? (clevr_count $0) 6) 0 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 3 (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 2) 0 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 4) 0 (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) 3 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.73385262489319
        },
        "18-1_single_or-What number of rubber objects are purple things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_single_or-What number of rubber objects are purple things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_car $0) clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_behind) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.901001453399658
        },
        "19-1_single_or-What number of metal things are either large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_single_or-What number of metal things are either large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) clevr_green clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) clevr_brown clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) clevr_purple clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) clevr_green clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) clevr_brown (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.099953889846802
        },
        "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $0) clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $2) clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.731658935546875
        },
        "21-1_single_or-What number of spheres are small gray things or small metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_single_or-What number of spheres are small gray things or small metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_gray) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_large (clevr_car $0))) clevr_gray) (clevr_count (clevr_map (lambda (clevr_car $1)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) $0 (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) (clevr_count (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_right))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.949495315551758
        },
        "22-1_single_or-How many cylinders are brown things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_single_or-How many cylinders are brown things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)) $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add $1 $0)))) $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)) $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (clevr_transform_material clevr_rubber (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)) $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add $1 clevr_empty)))) $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)) $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_transform_size clevr_large (clevr_car $0))) $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.091876029968262
        },
        "23-1_single_or-How many spheres are either purple things or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_single_or-How many spheres are either purple things or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0) (clevr_transform_material clevr_rubber (clevr_car $0)) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0) (clevr_transform_size clevr_large (clevr_car $0)) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0) clevr_sphere) 1 (clevr_if (clevr_gt? (clevr_count $0) 4) 3 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cube)) 1) 3 (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 1 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.833011388778687
        },
        "24-1_single_or-What number of spheres are small cyan metal things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_single_or-What number of spheres are small cyan metal things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_large (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_map (lambda $0) $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_sphere) 5 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.845923662185669
        },
        "0-1_zero_hop-How many metal things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many metal things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.840224266052246
        },
        "1-1_zero_hop-What number of large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size (clevr_query_size $0) clevr_large) $0 $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $0 $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 32.42640423774719
        },
        "2-1_zero_hop-How many rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_green clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.8339643478393555
        },
        "3-1_zero_hop-What number of gray rubber cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of gray rubber cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) clevr_yellow clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) clevr_gray (clevr_query_shape (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) clevr_yellow (clevr_query_shape (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) clevr_brown (clevr_query_shape (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.0854651927948
        },
        "4-1_zero_hop-What number of small metal cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-What number of small metal cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_blue clevr_green $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_green $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_purple $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) clevr_green $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_green $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.85459566116333
        },
        "5-1_zero_hop-How many small things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-How many small things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda $2) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda $2) $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_material clevr_rubber $0) $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda (clevr_car $1)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.92368221282959
        },
        "6-1_zero_hop-There is a yellow thing; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-There is a yellow thing; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.828045845031738
        },
        "7-1_zero_hop-What is the shape of the brown thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the brown thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_sphere (clevr_car $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_sphere (clevr_transform_size clevr_large (clevr_car $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_sphere (clevr_car $0)) (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_sphere (clevr_car (clevr_map (lambda $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.817239761352539
        },
        "8-1_zero_hop-What is the shape of the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) (clevr_query_shape (clevr_car $0)) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 0) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_sphere clevr_cylinder) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 0) clevr_sphere clevr_cube) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 1) clevr_cube (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.334831476211548
        },
        "9-1_zero_hop-What is the shape of the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the small yellow thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.818542242050171
        },
        "10-1_zero_hop-What is the shape of the small purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the small purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))) clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) (clevr_car $0) clevr_sphere (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))) clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))) clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_shape (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))) clevr_sphere $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.865219354629517
        },
        "11-1_zero_hop-What is the shape of the blue metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the blue metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 2) clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 1) clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_cube (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.839827537536621
        },
        "12-1_zero_hop-What is the purple thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What is the purple thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003857612609863281
        },
        "13-1_zero_hop-What material is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the gray thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_small (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.716348886489868
        },
        "14-1_zero_hop-What material is the purple cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What material is the purple cylinder? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda $0) $0)) 9) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)) 9) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0)) 9) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003972053527832031
        },
        "15-1_zero_hop-What is the gray cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the gray cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_metal clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00041174888610839844
        },
        "16-1_zero_hop-What is the small blue cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the small blue cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_transform_size clevr_small (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00035881996154785156
        },
        "17-1_zero_hop-What material is the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What material is the small yellow thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_transform_size clevr_small (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.895773887634277
        },
        "18-1_zero_hop-The cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-The cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00041937828063964844
        },
        "19-1_zero_hop-What color is the metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal sphere? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)) $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $1 clevr_sphere))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $1 clevr_sphere))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.6995673179626465
        },
        "20-1_zero_hop-What is the color of the rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the rubber cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0)) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00042366981506347656
        },
        "21-1_zero_hop-The large cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.812693357467651
        },
        "22-1_zero_hop-The rubber cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The rubber cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00048160552978515625
        },
        "23-1_zero_hop-The large metal thing has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large metal thing has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_query_color (clevr_car $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) (clevr_query_color (clevr_car $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00035309791564941406
        },
        "24-1_zero_hop-What is the size of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What is the size of the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004036426544189453
        },
        "25-1_zero_hop-What is the size of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-What is the size of the gray sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left) clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00038695335388183594
        },
        "26-1_zero_hop-The green thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-The green thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003590583801269531
        },
        "27-1_zero_hop-The gray metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The gray metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00036787986755371094
        },
        "28-1_zero_hop-The brown metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-The brown metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small (clevr_query_size (clevr_car $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_transform_size clevr_large (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003857612609863281
        },
        "29-1_zero_hop-The brown thing is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The brown thing is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_rubber (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0003788471221923828
        },
        "0-2_localization-Find the large things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the large things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $2)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 14.991494178771973
        },
        "1-2_localization-Find the small things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda $2) $0))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_map (lambda $0) $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.941333293914795
        },
        "2-2_localization-Find the brown things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the brown things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.83589506149292
        },
        "3-2_localization-Find the purple things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the purple things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 $0 clevr_gray)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005578994750976562
        },
        "4-2_localization-Find the red things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the red things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.856507778167725
        },
        "5-2_localization-Find the green things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the green things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.862940311431885
        },
        "6-2_localization-Find the gray things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the gray things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005168914794921875
        },
        "7-2_localization-Find the blue things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the blue things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue clevr_blue (clevr_car $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004940032958984375
        },
        "8-2_localization-Find the yellow things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the yellow things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 $0 clevr_gray)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.869239568710327
        },
        "9-2_localization-Find the cyan things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the cyan things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004551410675048828
        },
        "10-2_localization-Find the rubber things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the rubber things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0009198188781738281
        },
        "11-2_localization-Find the metal things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the metal things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.78834080696106
        },
        "12-2_localization-Find the spheres.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the spheres. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_difference $2 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.07801866531372
        },
        "13-2_localization-Find the cylinders.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the cylinders. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda $0) $0) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) $0 $2)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.127124071121216
        },
        "14-2_localization-Find the cubes.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the cubes. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_transform_material clevr_rubber $1) clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.964311122894287
        },
        "15-2_localization-Find the small yellow metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the small yellow metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.208447456359863
        },
        "16-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) (clevr_transform_material clevr_rubber $0) (clevr_car $1) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) (clevr_transform_size clevr_large $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.90125298500061
        },
        "17-2_localization-Find the purple rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the purple rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.921996831893921
        },
        "18-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2) $0 $2)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.2149019241333
        },
        "19-2_localization-Find the small red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the small red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 clevr_empty))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2) $1 clevr_cube))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $0))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $2 $2 clevr_blue)) $0))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.106468915939331
        },
        "20-2_localization-Find the brown metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the brown metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $0 $0) clevr_brown)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0) clevr_brown)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0 $0) clevr_brown)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $0 $0) clevr_brown)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $0 $0) $0 $0) clevr_brown)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.982346773147583
        },
        "21-2_localization-Find the yellow rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the yellow rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.968265533447266
        },
        "22-2_localization-Find the gray sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the gray sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $2) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $2)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $2)) $2) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.938791275024414
        },
        "23-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000469207763671875
        },
        "24-2_localization-Find the small sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the small sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $2 (clevr_car $1) $1)) $0) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.085646629333496
        },
        "25-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004646778106689453
        },
        "26-2_localization-Find the purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the purple thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004904270172119141
        },
        "27-2_localization-Find the small cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $2 (clevr_car $1) $1)) $0) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.16866111755371
        },
        "28-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004820823669433594
        },
        "29-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0007379055023193359
        },
        "30-2_localization-Find the small purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "30-2_localization-Find the small purple thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_transform_size clevr_large (clevr_car $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_right)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car $1))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 9.975409030914307
        },
        "31-2_localization-Find the small metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "31-2_localization-Find the small metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $0) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $0) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $0) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $2) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $0) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car $0) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $2) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.150285243988037
        },
        "32-2_localization-Find the small rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "32-2_localization-Find the small rubber cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2) $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere)))) $1 clevr_cylinder))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.080225944519043
        },
        "33-2_localization-Find the small metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "33-2_localization-Find the small metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0) $1 clevr_cylinder) $0 $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder) $0 $1))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0) $0 $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.429852724075317
        },
        "34-2_localization-Find the large blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "34-2_localization-Find the large blue metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) $0 $2) $2 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $2)) $2 $0) $0 $2)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 28.11292839050293
        },
        "35-2_localization-Find the small brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "35-2_localization-Find the small brown thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.182493209838867
        },
        "36-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "36-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 (clevr_car $1) $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 (clevr_car $1) $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0) $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_add $1 clevr_empty) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.227582454681396
        },
        "37-2_localization-Find the metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "37-2_localization-Find the metal sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 (clevr_car $1) $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 (clevr_car $1) $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.342802047729492
        },
        "38-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "38-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.986098527908325
        },
        "39-2_localization-Find the red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "39-2_localization-Find the red thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004661083221435547
        },
        "40-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "40-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00043964385986328125
        },
        "41-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "41-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005004405975341797
        },
        "42-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "42-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $1 clevr_sphere))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.974560260772705
        },
        "43-2_localization-Find the small rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "43-2_localization-Find the small rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0) $2)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $2 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $2 $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.193720579147339
        },
        "44-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "44-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_green (clevr_query_color $0)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $2)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_red (clevr_query_color $0)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_red (clevr_query_color $2)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_brown (clevr_query_color $2)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.227028131484985
        },
        "45-2_localization-Find the large sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "45-2_localization-Find the large sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.19278073310852
        },
        "46-2_localization-Find the large metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "46-2_localization-Find the large metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0) $0 $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1))) $0) $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $1)) $0 $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.830890655517578
        },
        "47-2_localization-Find the blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "47-2_localization-Find the blue metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.9971535205841064
        },
        "48-2_localization-Find the large gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "48-2_localization-Find the large gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.862745523452759
        },
        "49-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "49-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0007617473602294922
        },
        "50-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "50-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_add $1 clevr_empty) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $2) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.146231412887573
        },
        "51-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "51-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $1 clevr_sphere))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.99205470085144
        },
        "52-2_localization-Find the small metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "52-2_localization-Find the small metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $2 (clevr_car $1) $1) $2 (clevr_car $1))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $2 (clevr_car $1) $1) $2 (clevr_car $1))) $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0)) $0))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0)) $2))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.279863595962524
        },
        "53-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "53-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) $0)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005333423614501953
        },
        "54-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "54-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0004780292510986328
        },
        "55-2_localization-Find the small cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "55-2_localization-Find the small cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0) $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $2 (clevr_car $1) $1)) $0) $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.265126466751099
        },
        "56-2_localization-Find the rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "56-2_localization-Find the rubber cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $1 clevr_cube))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.074344396591187
        },
        "57-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "57-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.9631640911102295
        },
        "0-2_remove-What if you removed all of the blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the blue metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0) clevr_blue)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0) $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0) clevr_blue)) $2))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $1)) $0) $0 $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0) clevr_blue)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.076149225234985
        },
        "1-2_remove-What if you removed all of the gray metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the gray metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1))) clevr_gray)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0) clevr_gray)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $1)) $0 $0) clevr_gray)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1))) $0 $0) clevr_gray)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0) clevr_gray)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.236313819885254
        },
        "2-2_remove-What if you removed all of the yellow cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_remove-What if you removed all of the yellow cubes? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $1)) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) $2 $0) clevr_yellow)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_car (clevr_difference $1 (clevr_map (lambda $1) $1))) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $1))) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $1))) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.893864154815674
        },
        "3-2_remove-What if you removed all of the yellow spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_remove-What if you removed all of the yellow spheres? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_sphere))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_sphere))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_transform_size clevr_large (clevr_car $0)) clevr_sphere))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 27.180070400238037
        },
        "4-2_remove-If you removed the small green things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the small green things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (clevr_car $0) (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $2) $1 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) clevr_sphere clevr_cylinder)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (clevr_transform_size clevr_large (clevr_car $0)) (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $2) $1 (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) clevr_sphere clevr_cylinder))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $2) $1 (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $2))) clevr_sphere clevr_cylinder)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.289217472076416
        },
        "5-2_remove-If you removed the small blue things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the small blue things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0) clevr_blue)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $1)) $0) clevr_blue)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $1)) $0) clevr_blue)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1))) clevr_blue)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0) clevr_blue)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.010680198669434
        },
        "6-2_remove-If you removed the brown cylinders, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the brown cylinders, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $1 clevr_cylinder))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $1 clevr_cylinder))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $1 clevr_cylinder) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.025769710540771
        },
        "7-2_remove-If you removed the metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_map (lambda $0) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $0 $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.854089736938477
        },
        "8-2_remove-If you removed the yellow things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the yellow things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_intersect $0 $0) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_add (clevr_car $0) $0) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.001089334487915039
        },
        "9-2_remove-If you removed the brown things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_remove-If you removed the brown things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) $0) clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0) clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_intersect $0 $0) clevr_brown clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.033029079437256
        },
        "10-2_remove-If you removed the blue things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_remove-If you removed the blue things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_blue clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) $0) clevr_blue clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_blue clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0) clevr_blue clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $0 $0) clevr_blue clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.034305810928345
        },
        "11-2_remove-If you removed the red things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_remove-If you removed the red things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $2) clevr_red)) $0) $1 clevr_sphere)) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $2) clevr_red)) $2) $1 clevr_sphere)) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $2) clevr_red)) $0)) $1 clevr_sphere)) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $2) clevr_red)) $2)) $1 clevr_sphere)) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $2 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $2) clevr_red)) $0)) $1 clevr_sphere)) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 29.216092586517334
        },
        "12-2_remove-If you removed the brown things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_remove-If you removed the brown things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_brown clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) $0) clevr_brown clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_brown clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0) clevr_brown clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_add (clevr_car $0) $0) clevr_brown clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.91860556602478
        },
        "13-2_remove-If you removed the spheres, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_remove-If you removed the spheres, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $3 clevr_sphere))) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $3 clevr_sphere))) $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $3 clevr_sphere))) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.337677955627441
        },
        "14-2_remove-If you removed the cylinders, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_remove-If you removed the cylinders, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_remove-If you removed the cubes, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_remove-If you removed the cubes, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.13233995437622
        },
        "16-2_remove-If you removed the cylinders, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_remove-If you removed the cylinders, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 $0))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 $2))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (clevr_add $1 $2))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $2 (clevr_difference $0 (clevr_add $1 $0))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $2 (clevr_difference $0 (clevr_add $1 $2))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.397334098815918
        },
        "17-2_remove-If you removed the cubes, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_remove-If you removed the cubes, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "18-2_remove-If you removed the gray spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-2_remove-If you removed the gray spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $2)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda $0) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $2)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 24.447779893875122
        },
        "19-2_remove-If you removed the green cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-2_remove-If you removed the green cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_green clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_green clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_green clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_union $0 $0) clevr_green clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_green (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cube clevr_cube (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.031456708908081
        },
        "20-2_remove-If you removed the yellow cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_remove-If you removed the yellow cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) $0) clevr_yellow clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_yellow clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_add (clevr_car $0) $0) clevr_yellow clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $0 $0) clevr_yellow clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.937183141708374
        },
        "21-2_remove-If you removed the red cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-2_remove-If you removed the red cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_red clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) $0) clevr_red clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_add (clevr_car $0) $0) clevr_red clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $0 $0) clevr_red clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.046274662017822
        },
        "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_left)) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) clevr_left)) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_left))) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_left))) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) clevr_left))) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.28607439994812
        },
        "0-2_transform-What if the gray sphere became a small green metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the gray sphere became a small green metal sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_transform-What if the cyan sphere became a purple sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the cyan sphere became a purple sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_purple $0) $0) clevr_cyan)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_purple $0) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) clevr_cyan)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_purple (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0) clevr_cyan)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_purple $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $0)) clevr_cyan)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_purple $0) $0) clevr_cyan)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.0650951862335205
        },
        "2-2_transform-What if the yellow thing became a small thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if the yellow thing became a small thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_yellow)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_yellow)) (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.9290852546691895
        },
        "3-2_transform-What if all the large metal cylinders became small purple cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the large metal cylinders became small purple cylinders? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "4-2_transform-What if all the yellow cubes became large blue cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_transform-What if all the yellow cubes became large blue cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large (clevr_transform_size clevr_large $0))) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0))) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_color clevr_blue (clevr_transform_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_large clevr_large $1) $0)) $0) clevr_yellow)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0) clevr_yellow)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.065996408462524
        },
        "5-2_transform-What if all the blue metal things became rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_transform-What if all the blue metal things became rubber things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $0) clevr_blue)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber $0)) clevr_blue)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_material clevr_rubber $0) clevr_blue)) (clevr_intersect $0 $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 4.9553892612457275
        },
        "6-2_transform-What if all the red things became large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_transform-What if all the red things became large things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_large $0) clevr_red)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_large (clevr_transform_size clevr_large $0)) clevr_red)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_large $0) clevr_red)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.13277816772461
        },
        "7-2_transform-If all of the blue spheres became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the blue spheres became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_brown $0) $0) clevr_blue)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_brown $0) (clevr_car $1)) clevr_blue)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 81.42132377624512
        },
        "8-2_transform-If all of the large green things became red, how many red things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the large green things became red, how many red things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_transform-If all of the red rubber things became green, how many green things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the red rubber things became green, how many green things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 (clevr_transform_color clevr_green $0) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) (clevr_transform_color clevr_green $0) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_transform_material clevr_rubber $0) (clevr_transform_color clevr_green $0) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_material (clevr_query_material $0) clevr_rubber) (clevr_transform_color clevr_green $0) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 (clevr_transform_color clevr_green (clevr_transform_size clevr_small $0)) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.37106156349182
        },
        "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "11-2_transform-If all of the red spheres became blue, how many blue things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_transform-If all of the red spheres became blue, how many blue things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_blue $0) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_blue $0) (clevr_car $1)) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_blue (clevr_transform_size clevr_small $0)) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_sphere) (clevr_transform_color clevr_blue (clevr_transform_size (clevr_query_size (clevr_car $1)) $0)) $0) clevr_red)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.141153573989868
        },
        "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda $0) $0)) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) $1 clevr_cylinder)) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.43091082572937
        },
        "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "17-2_transform-If all of the small red things became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_transform-If all of the small red things became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 $2 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_red (clevr_query_color $0)))) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $2)))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 $2 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_red (clevr_query_color $0)))) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $2)))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_red (clevr_query_color $0)))) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.446805953979492
        },
        "20-2_transform-If all of the small blue rubber things became small, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_transform-If all of the small blue rubber things became small, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_map (lambda $2) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_transform_material clevr_rubber $2))) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_material clevr_rubber $0) $2)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.297496795654297
        }
    },
    "test": {
        "0-1_compare_integer-Are there fewer small spheres than cyan cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Are there fewer small spheres than cyan cubes? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_gray clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_red clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_brown clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_purple clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0007731914520263672
        },
        "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_cube) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_blue (clevr_query_shape (clevr_car $0))) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) clevr_cube) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.221279621124268
        },
        "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_gray clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_cube) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_blue clevr_cube) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 1) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.289337635040283
        },
        "3-1_compare_integer-Are there more metal cylinders than blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Are there more metal cylinders than blue metal things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (clevr_car $0)) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))) clevr_cube) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.69946551322937
        },
        "0-1_one_hop-What number of metal cubes are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-What number of metal cubes are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) 1 0 $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) clevr_front) clevr_yellow clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) clevr_front) clevr_yellow clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) clevr_front) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.72123384475708
        },
        "1-1_one_hop-How many metal things are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-How many metal things are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (clevr_eq_size (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car $0)) (clevr_query_size (clevr_car $0))) clevr_left clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (clevr_car $0) clevr_cube)) 1) clevr_left clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cylinder))))) clevr_right clevr_left))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (clevr_car $0) (clevr_query_shape (clevr_car $0)))) 1) clevr_left clevr_right))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 680.6437683105469
        },
        "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.71002006530762
        },
        "3-1_one_hop-What size is the rubber thing that is right the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What size is the rubber thing that is right the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)) clevr_sphere))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.771777629852295
        },
        "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_gray clevr_cyan (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 2 (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))) clevr_gray clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_gray clevr_cyan))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)) clevr_cylinder)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_difference (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) clevr_cylinder) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 55.21288990974426
        },
        "5-1_one_hop-The small metal thing that is right the small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-The small metal thing that is right the small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) $1 clevr_cube)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_red (clevr_query_color $0)))) $0) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $1 clevr_cube))) $0))) clevr_green $0) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_add (clevr_car $2) (clevr_relate $1 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left $1) $0))))) $0))) clevr_green $0) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_blue (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $1 clevr_cube))) $0))) clevr_green $0) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $2 (clevr_add (clevr_car $2) (clevr_relate $1 clevr_right $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 53.11013627052307
        },
        "6-1_one_hop-What is the small cylinder front the small brown cylinder made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-What is the small cylinder front the small brown cylinder made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.702731370925903
        },
        "7-1_one_hop-What is the material of the large thing right the large purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-What is the material of the large thing right the large purple metal thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber) clevr_rubber $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_small clevr_large) clevr_large) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_small clevr_large) clevr_large) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.622480154037476
        },
        "8-1_one_hop-The small metal thing right the small metal sphere has what shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-The small metal thing right the small metal sphere has what shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))) clevr_cube) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_empty)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0)) 2) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.61376953125
        },
        "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) (clevr_car $0) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder clevr_cube (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.58751106262207
        },
        "0-1_single_or-How many objects are either large metal spheres or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many objects are either large metal spheres or large rubber things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_gray (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 (clevr_query_shape $1)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right) $0 $0) $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 2) 3 2) (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 1) 3 2) (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.56799125671387
        },
        "1-1_single_or-How many things are either small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are either small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cube)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car $0) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)))) clevr_cube)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_add (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_behind clevr_left (clevr_car $0)))) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cube)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_difference (clevr_map (lambda $0) $0) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_cube)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $0 $0)) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 50.16162705421448
        },
        "2-1_single_or-How many small things are rubber cylinders or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many small things are rubber cylinders or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) clevr_sphere clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) (clevr_car $0) clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (clevr_add $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_front)) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0) (clevr_car $0) clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $3 clevr_cylinder))) $2))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.62844276428223
        },
        "3-1_single_or-What number of small things are spheres or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of small things are spheres or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "4-1_single_or-How many green things are either small metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many green things are either small metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) clevr_front)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) clevr_front) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (clevr_relate (clevr_car $0) clevr_front $0)) clevr_behind) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $2) $1 clevr_sphere))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0) (clevr_relate (clevr_car $0) clevr_front $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.664213180541992
        },
        "5-1_single_or-How many purple things are small things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-How many purple things are small things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_left) $1 clevr_cylinder))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0) clevr_front)) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cylinder))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) clevr_front) clevr_cyan clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.521265268325806
        },
        "6-1_single_or-How many metal objects are large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-How many metal objects are large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)) clevr_red clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_blue)) $0) clevr_red clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $2) $1 clevr_cylinder))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2) clevr_behind) $1 clevr_sphere))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $2 clevr_front) $0 $0) $1 clevr_cylinder))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 43.58852005004883
        },
        "7-1_single_or-What number of metal objects are small spheres or purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-What number of metal objects are small spheres or purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_green $0) clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $2 (clevr_difference $2 (clevr_add $1 $0))))) $0)) (clevr_car $0) clevr_cube)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car $0)) clevr_green $0) clevr_sphere) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) 0 2) (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_relate (clevr_car $0) clevr_right $0) (clevr_car $0) (clevr_query_shape (clevr_car $0)))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $2 (clevr_difference $2 (clevr_add $1 $0))))) $0)) (clevr_car $0) (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 49.54535984992981
        },
        "8-1_single_or-How many spheres are large metal things or small green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-How many spheres are large metal things or small green rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) $0 (clevr_car $0)) (clevr_add (clevr_car $0) (clevr_relate (clevr_car $0) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) (clevr_relate (clevr_car $0) clevr_right $0)))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $1 clevr_sphere))) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) (clevr_relate (clevr_car $0) clevr_right $0)))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $1 clevr_cylinder))) $0) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right))) (clevr_count (clevr_difference $0 (clevr_add (clevr_car $0) (clevr_relate (clevr_car $0) clevr_right $0)))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 45.26349377632141
        },
        "9-1_single_or-How many cylinders are either small purple things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-How many cylinders are either small purple things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2) $1 clevr_cube))) $0) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) $0) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.670557498931885
        },
        "0-1_zero_hop-How many large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_purple (clevr_query_color $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.56564545631409
        },
        "1-1_zero_hop-What number of rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of rubber things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0))) $2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.137628078460693
        },
        "2-1_zero_hop-How many small cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many small cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) (clevr_query_color (clevr_car $0)) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $2)))) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_yellow (clevr_query_color $0)))) $2) $1 (clevr_query_shape $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $3) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_yellow (clevr_query_color $0)))) $2) $1 (clevr_query_shape $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.640702724456787
        },
        "3-1_zero_hop-What number of small rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of small rubber things are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_difference $2 (clevr_add $1 $0)) $1 clevr_sphere))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) clevr_blue)) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (clevr_car $0) (clevr_query_shape (clevr_car $0)))) (clevr_car $0) clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_intersect $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front) (clevr_car $0) clevr_cylinder)) (clevr_car $0) (clevr_query_shape (clevr_car $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) (clevr_add $1 clevr_empty))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.558993339538574
        },
        "4-1_zero_hop-How many small metal spheres are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-How many small metal spheres are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (clevr_car $1)) $0) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (clevr_car $1)) $2) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 $0))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 $2))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (clevr_add $1 $2))) $1 clevr_cylinder)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.547386169433594
        },
        "5-1_zero_hop-What number of small rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-What number of small rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind) (clevr_query_color (clevr_car $0)) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) 2 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $2) $1 clevr_sphere)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_add $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $2) $1 (clevr_query_shape $1))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.46454930305481
        },
        "6-1_zero_hop-What shape is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-What shape is the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) (clevr_car $0) clevr_cylinder (clevr_query_shape (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $2)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.206050157546997
        },
        "7-1_zero_hop-What is the shape of the red thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the red thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_cube (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.60444712638855
        },
        "8-1_zero_hop-What is the shape of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_cube (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_cube (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_sphere (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.605692148208618
        },
        "9-1_zero_hop-What is the shape of the large rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the large rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_color clevr_purple (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))) clevr_sphere clevr_cylinder) clevr_cube (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.30319046974182
        },
        "10-1_zero_hop-What is the shape of the cyan rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the cyan rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) (clevr_car $0) clevr_sphere)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_empty)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_difference $0 (clevr_add (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_empty))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.456645965576172
        },
        "11-1_zero_hop-What is the shape of the purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the purple metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_cube (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_cylinder (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_cube (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 2) clevr_cube clevr_cylinder) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.5866641998291
        },
        "12-1_zero_hop-What material is the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What material is the blue thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) 2) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) clevr_small) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 2) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.72169589996338
        },
        "13-1_zero_hop-What material is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) 2) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_left)) 2) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.162416219711304
        },
        "14-1_zero_hop-What is the material of the large purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What is the material of the large purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_query_material (clevr_car $0)) clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_metal (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_query_material (clevr_car $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) 2) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.720834493637085
        },
        "15-1_zero_hop-What is the small cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the small cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_rubber clevr_metal (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_metal (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) clevr_metal clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) clevr_metal (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.57912302017212
        },
        "16-1_zero_hop-What is the large brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the large brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_metal (clevr_query_material (clevr_car $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_query_material (clevr_car $0)) clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.092467069625854
        },
        "17-1_zero_hop-What is the material of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What is the material of the gray sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_red) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_rubber (clevr_query_material (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_behind)) 2) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.588653087615967
        },
        "18-1_zero_hop-What color is the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-What color is the small cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_sphere))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 clevr_empty))) $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.655463695526123
        },
        "19-1_zero_hop-What color is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube)) $1 clevr_cube)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.664318084716797
        },
        "20-1_zero_hop-What is the color of the small cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the small cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_size clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cylinder))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_transform_material clevr_metal (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cylinder))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.1437304019928
        },
        "21-1_zero_hop-The large cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) $1 clevr_cylinder))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $0)))) $0))) clevr_sphere) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $2)))) $0))) clevr_sphere) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cylinder))) $0))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $0)))) $0))) clevr_sphere) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) $0))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (clevr_relate $1 clevr_right $2)))) $0))) clevr_sphere) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) $0))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.216567039489746
        },
        "22-1_zero_hop-The small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) $1 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) $1 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_cube clevr_sphere $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 1) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) $1 clevr_sphere))) $0))) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_right)) 1) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) $1 clevr_sphere))) $0))) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.6463520526886
        },
        "23-1_zero_hop-The large sphere has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large sphere has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) (clevr_intersect $0 $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.72594380378723
        },
        "24-1_zero_hop-What size is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What size is the metal cylinder? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.082195043563843
        },
        "25-1_zero_hop-How big is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-How big is the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) clevr_large $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder) clevr_small clevr_large) clevr_large $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.302735805511475
        },
        "26-1_zero_hop-How big is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-How big is the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $2 $1 clevr_cube))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder) clevr_small clevr_large) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.107820749282837
        },
        "27-1_zero_hop-The metal sphere is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The metal sphere is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $0 clevr_front)) 2) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.110052585601807
        },
        "28-1_zero_hop-How big is the gray rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-How big is the gray rubber thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small (clevr_query_size (clevr_car $0)) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car $0)) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_large clevr_small $0) (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_small clevr_large (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))) clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.369276762008667
        },
        "29-1_zero_hop-The metal cylinder is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The metal cylinder is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_size (clevr_car $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_large clevr_small $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_large (clevr_query_size (clevr_car $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 5.115473031997681
        },
        "0-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.412111282348633
        },
        "1-2_localization-Find the small rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_add $1 clevr_empty) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube) (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $2) $1 clevr_sphere))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 43.9510760307312
        },
        "2-2_localization-Find the red metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the red metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.099790573120117
        },
        "3-2_localization-Find the small gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the small gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_front)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (clevr_difference $1 (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_transform_color clevr_blue (clevr_car $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 $1 clevr_sphere))) $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.435177087783813
        },
        "4-2_localization-Find the small rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the small rubber sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere))) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_sphere) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_sphere) (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 50.0215630531311
        },
        "5-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.084818363189697
        },
        "6-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_add $1 clevr_empty) $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 49.891931772232056
        },
        "7-2_localization-Find the large cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the large cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.51136136054993
        },
        "8-2_localization-Find the metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the metal cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2)) $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $2) clevr_sphere) (clevr_car $3) $2) $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $2) clevr_cylinder) (clevr_car $1) $2) $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $2) clevr_cylinder) (clevr_car $3) $2) $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.440526247024536
        },
        "9-2_localization-Find the yellow cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the yellow cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_car $1) $0) clevr_yellow)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $1)) $0) clevr_yellow)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car $0) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)) clevr_sphere)) $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.707871198654175
        },
        "10-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.70225381851196
        },
        "11-2_localization-Find the purple cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the purple cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_add $1 clevr_empty) $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $2)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.18556356430054
        },
        "12-2_localization-Find the large cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the large cyan thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 43.15068483352661
        },
        "13-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.36177849769592
        },
        "14-2_localization-Find the large cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the large cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $2) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_green (clevr_query_color $0)))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.765405893325806
        },
        "15-2_localization-Find the large rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the large rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $2 $2))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2))) $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.31224298477173
        },
        "16-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.118485927581787
        },
        "17-2_localization-Find the small yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the small yellow thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car $1) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 25.654998302459717
        },
        "18-2_localization-Find the small green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the small green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.482591152191162
        },
        "19-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $2) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.356945514678955
        },
        "20-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $1)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_transform_color clevr_blue (clevr_transform_size clevr_large $0)) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.133554220199585
        },
        "21-2_localization-Find the large metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the large metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 $2)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $2) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 (clevr_car $1) $2)) $2) $0) $0 $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $2) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_green (clevr_query_color $0)))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 46.49704957008362
        },
        "22-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_purple (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.285361051559448
        },
        "23-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_green (clevr_query_color $0)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $2)))) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.228922605514526
        },
        "24-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $1 clevr_cube))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cube))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_add $1 clevr_empty) $0))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan $0) $0 (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $2 $0)) $0) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 49.3081271648407
        },
        "25-2_localization-Find the cyan rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the cyan rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_brown (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_cyan (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.124163389205933
        },
        "26-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_yellow (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 clevr_green (clevr_query_color $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 10.145960330963135
        },
        "27-2_localization-Find the small metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small metal cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0) $0 $0) $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $0) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 (clevr_car $1))) $2) $0) $0 $1))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cube) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0) $0 $1))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.04515624046326
        },
        "28-2_localization-Find the small blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the small blue thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) $0 (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 $2 $0)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_blue $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $2 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 $0) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $2 clevr_green (clevr_query_color $2)))) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 30.458779096603394
        },
        "29-2_localization-Find the rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the rubber cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)) $1 clevr_cylinder))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0) $1 clevr_cylinder))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $1) clevr_cylinder) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $2)) $0) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.475789070129395
        },
        "0-2_remove-What if you removed all of the small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the small gray things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0) clevr_gray)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 clevr_empty))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_difference $0 (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0) (clevr_difference $0 (clevr_add $1 clevr_empty))))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.19064426422119
        },
        "1-2_remove-What if you removed all of the small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the small rubber things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (clevr_car (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $1 $0 $1)) $1)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) $0)) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) $0)) $2))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0) $0)) $2))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 46.25666427612305
        },
        "2-2_remove-If you removed the red metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-2_remove-If you removed the red metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (clevr_difference (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0) (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))) $1)) $0 $0) clevr_red)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $1)) $0 $0) clevr_red)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 $0 $0) clevr_red)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_difference $0 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $2 $0)) (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_red $0)))) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 47.11228132247925
        },
        "3-2_remove-If you removed the small brown things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-2_remove-If you removed the small brown things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0) clevr_brown)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $3 $1)) $1)) clevr_brown)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_car (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $3 $1)) $3)) clevr_brown)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $1) $2 $2) clevr_brown) $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) (clevr_car $3) $2 $2) clevr_brown) $0)) $0))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 112.92668461799622
        },
        "4-2_remove-If you removed the gray things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the gray things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (clevr_map (lambda $0) $0) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_gray $0))) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_gray clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_gray clevr_gray $0) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 20.599255561828613
        },
        "5-2_remove-If you removed the yellow things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the yellow things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0) clevr_yellow clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0) clevr_yellow clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_yellow clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_yellow (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) clevr_sphere clevr_sphere (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.45826244354248
        },
        "6-2_remove-If you removed the spheres, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the spheres, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 $0))) $1 clevr_sphere)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $0 (clevr_add $1 $2))) $1 clevr_sphere)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (clevr_add $1 $2))) $1 clevr_sphere)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $2 (clevr_difference $0 (clevr_add $1 $0))) $1 clevr_sphere)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_difference $0 (#(lambda (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $1) (clevr_transform_material clevr_rubber $0) $2)) $2)))) (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $2 (clevr_difference $0 (clevr_add $1 $2))) $1 clevr_sphere)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 39.00599122047424
        },
        "7-2_remove-If you removed the green spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the green spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 clevr_green clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 $0 (clevr_car $0)) clevr_green clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) clevr_green clevr_green $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (clevr_count (clevr_fold $2 $2 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) $3) (clevr_transform_material clevr_rubber $0) $2)) (clevr_intersect $0 (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $2 $0))) $4)))))))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) (clevr_query_color (clevr_car (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green $0))) clevr_green $0) clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 15.495891571044922
        },
        "8-2_remove-If you removed the cyan cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the cyan cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": null
        },
        "0-2_transform-What if the small sphere became a small metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the small sphere became a small metal thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "1-2_transform-What if the brown thing became a small gray rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the brown thing became a small gray rubber cube? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "2-2_transform-What if all the small yellow rubber things became purple cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if all the small yellow rubber things became purple cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": null
        },
        "3-2_transform-What if all the green things became small things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the green things became small things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_green)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda $0) (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_green)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_green)) (clevr_map (lambda $0) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_green)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $0)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_transform_size clevr_small $0) clevr_green)) (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda $2)) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 35.072514057159424
        },
        "4-2_transform-If all of the large green metal things became purple, how many purple things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_transform-If all of the large green metal things became purple, how many purple things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $0 (clevr_transform_color clevr_green $2) $2) clevr_purple)) $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (#(lambda (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $1 $2)))) $2 (clevr_transform_color clevr_green $2) $2) clevr_purple)) $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_color clevr_green $2) $2) clevr_blue)) $0)))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_front)))) (clevr_transform_color clevr_green $0) $0) clevr_yellow)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color $4 (clevr_query_color $0)) $0 $2)) $0)))))) clevr_green (clevr_map (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 (clevr_if (clevr_eq_color $0 (clevr_query_color $2)) $1 $2))))) $0 (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car (#(lambda (lambda (clevr_relate (clevr_car $1) $0 $1))) $1 clevr_front)))) (clevr_transform_color clevr_green $0) $0) clevr_blue)) $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 326.84821224212646
        },
        "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "8-2_transform-If all of the small rubber spheres became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the small rubber spheres became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": null
        },
        "9-2_transform-If all of the large yellow cubes became small, how many large things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the large yellow cubes became small, how many large things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $2)) $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $4)) $0))) $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $4)) $4))) $0))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference $2 (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $0 $4)) $4))) $2))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (#(lambda (lambda (clevr_fold $0 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $1 $0 (clevr_difference (clevr_map (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) $1 $2)))) $0 $1 (clevr_add $2 clevr_empty))))) $0 $2 $0)) $2) (clevr_add $1 clevr_empty))))) $0)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 42.078693151474
        }
    }
}