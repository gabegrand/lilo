{
    "_summary": {
        "n_tasks_solved": {
            "train": 47,
            "test": 22
        }
    },
    "train": {
        "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Is the number of large rubber cubes less than the number of large green rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_metal (clevr_car $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_color (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0))) clevr_green))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00011348724365234375
        },
        "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of metal spheres less than the number of blue metal things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_gt? 1 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_gt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_left $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_left $0)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_left $0)) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_lt? (clevr_count (clevr_relate (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_left $0)) 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.000152587890625
        },
        "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of cyan rubber things less than the number of large cylinders? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_lt? 9 (clevr_count $0)) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00013136863708496094
        },
        "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Is the number of large cylinders greater than the number of small rubber spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_metal clevr_rubber) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_large clevr_small) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_eq_size (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_small clevr_large) clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0001437664031982422
        },
        "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_compare_integer-Is the number of small yellow things greater than the number of metal spheres? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-1_compare_integer-Is the number of purple things greater than the number of small cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_compare_integer-Is the number of purple things greater than the number of small cubes? ((lambda (clevr_gt? (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-1_one_hop-How many things are right the large cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-How many things are right the large cylinder? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-1_one_hop-What number of things are right the small gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-What number of things are right the small gray thing? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0))))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-1_one_hop-How many large things are behind the large metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-How many large things are behind the large metal thing? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-1_one_hop-What number of large cylinders are left the green rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What number of large cylinders are left the green rubber thing? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_metal) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_rubber) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_transform_size clevr_large (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0)))) clevr_metal) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_metal) clevr_metal clevr_rubber) clevr_metal) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_behind $0))) clevr_metal) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9346556663513184
        },
        "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-There is a small purple rubber thing; what number of rubber cylinders are right it? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))) clevr_cylinder) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)))) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)))) clevr_cylinder) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_map (lambda $0) (clevr_relate (clevr_car $0) clevr_right $0)))) clevr_cylinder) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_right $0))) clevr_right $0))) clevr_cylinder) 2 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.93630313873291
        },
        "5-1_one_hop-There is a green thing; what number of things are front it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-There is a green thing; what number of things are front it? ((lambda (clevr_count (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) 0 (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_cylinder) 3 1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 46.736185789108276
        },
        "6-1_one_hop-There is a thing that is right the cube; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-There is a thing that is right the cube; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_sphere) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_size (clevr_car (clevr_intersect $0 (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_right $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 0.00014090538024902344
        },
        "7-1_one_hop-There is a thing front the brown thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-There is a thing front the brown thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-There is a metal thing that is behind the metal sphere; what size is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-1_one_hop-There is a cube front the gray rubber thing; how big is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-There is a cube front the gray rubber thing; how big is it? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_blue) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_yellow) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) (clevr_query_size (clevr_car $0)) clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_small (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 3) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00012946128845214844
        },
        "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_one_hop-There is a metal cylinder right the small purple metal thing; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "11-1_one_hop-What is the size of the metal thing front the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_one_hop-What is the size of the metal thing front the sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_gt? (clevr_count $0) 4) (clevr_gt? (clevr_count $0) 6)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_lt? 4 (clevr_count $0)) (clevr_gt? (clevr_count $0) 6)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_gt? (clevr_count $0) 6) (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) (clevr_gt? (clevr_count $0) 6)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 3) (clevr_gt? (clevr_count $0) 6)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 33.97253704071045
        },
        "12-1_one_hop-What color is the thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_one_hop-What color is the thing that is behind the sphere? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [],
            "best_search_time": NaN
        },
        "13-1_one_hop-What color is the thing that is behind the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_one_hop-What color is the thing that is behind the blue thing? ((lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0)))))",
            "programs": [],
            "best_search_time": NaN
        },
        "14-1_one_hop-What color is the metal thing left the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_one_hop-What color is the metal thing left the gray thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-1_one_hop-The large thing left the small rubber thing is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_one_hop-The large thing left the small rubber thing is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 0) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_right $0))) 0) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_lt? (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_right $0))) 1) clevr_large clevr_small) clevr_small) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_map (lambda (clevr_car (clevr_relate (clevr_car $1) clevr_right $1))) (clevr_relate (clevr_car $0) clevr_right $0))) 0) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_right $0)) clevr_empty))) clevr_right $0))) clevr_small) (clevr_query_color (clevr_car $0)) clevr_red))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 37.137813329696655
        },
        "16-1_one_hop-The rubber thing that is right the large metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_one_hop-The rubber thing that is right the large metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "17-1_one_hop-What color is the small metal thing behind the small purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_one_hop-What color is the small metal thing behind the small purple metal thing? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "18-1_one_hop-What is the material of the thing left the cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_one_hop-What is the material of the thing left the cube? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_green) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_material clevr_metal (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_material clevr_rubber (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_transform_size clevr_small (clevr_car $0)))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0001285076141357422
        },
        "19-1_one_hop-What is the material of the cylinder that is left the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_one_hop-What is the material of the cylinder that is left the small cube? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color (clevr_car $0))) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_metal (clevr_query_material (clevr_car (clevr_relate (clevr_car $0) clevr_left $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) (clevr_if (clevr_gt? (clevr_count $0) 6) 8 2)) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) (clevr_if (clevr_gt? (clevr_count $0) 6) 9 2)) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) (clevr_if (clevr_gt? (clevr_count $0) 6) (clevr_count $0) 2)) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 48.08978009223938
        },
        "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_one_hop-There is a large thing that is left the large purple metal thing; what material is it? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "21-1_one_hop-What is the thing that is front the brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_one_hop-What is the thing that is front the brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_front $0)))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-1_one_hop-What is the material of the sphere right the small sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_one_hop-What is the material of the sphere right the small sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_query_size (clevr_car $0)) clevr_small) clevr_small) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_small (clevr_query_size (clevr_car $0))) clevr_small) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) (clevr_if (clevr_gt? (clevr_count $0) 9) (clevr_count $0) 5)) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) (clevr_gt? (clevr_count $0) 4)) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 167.41059136390686
        },
        "23-1_one_hop-There is a large thing behind the small gray thing; what is its material?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_one_hop-There is a large thing behind the small gray thing; what is its material? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 7) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00012683868408203125
        },
        "24-1_one_hop-There is a thing that is right the cube; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_one_hop-There is a thing that is right the cube; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0)))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_front $0)) 2) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 0) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_front $0)) 3) clevr_cylinder clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 1) clevr_cylinder clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 2 (clevr_count (clevr_relate (clevr_car $0) clevr_front $0))) clevr_sphere clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00015282630920410156
        },
        "25-1_one_hop-What is the shape of the metal thing that is behind the sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_one_hop-What is the shape of the metal thing that is behind the sphere? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_cylinder clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_cube clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00014495849609375
        },
        "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_one_hop-There is a rubber thing front the large cylinder; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "27-1_one_hop-There is a large thing front the small metal cube; what is its shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_one_hop-There is a large thing front the small metal cube; what is its shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0)))) clevr_cube (clevr_if (clevr_eq_color clevr_blue (clevr_query_color (clevr_car $0))) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 2) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_left $0)) 1) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.03583073616028
        },
        "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_one_hop-What is the shape of the large rubber thing left the large rubber cylinder? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))) clevr_large) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))) clevr_small) clevr_sphere clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)))) clevr_cube clevr_sphere))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)))) clevr_sphere clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car (clevr_relate (clevr_car $0) clevr_right $0))) clevr_small) clevr_sphere (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) clevr_sphere clevr_cube)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 3.9341213703155518
        },
        "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_one_hop-What is the shape of the large rubber thing that is left the small red metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_left $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-1_single_or-How many things are large metal cylinders or small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many things are large metal cylinders or small gray things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-1_single_or-How many things are small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) 3 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 5) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 6) 2 3))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0001366138458251953
        },
        "2-1_single_or-How many things are red things or large green things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many things are red things or large green things? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-1_single_or-What number of things are rubber things or rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of things are rubber things or rubber cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-1_single_or-How many things are either small things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many things are either small things or cylinders? ((lambda (clevr_count (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-1_single_or-What number of small objects are either rubber cylinders or green metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-What number of small objects are either rubber cylinders or green metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-1_single_or-What number of small objects are either blue metal things or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-What number of small objects are either blue metal things or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "7-1_single_or-How many small things are cylinders or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-How many small things are cylinders or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-1_single_or-What number of small things are rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-What number of small things are rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-1_single_or-What number of small objects are either metal cubes or red rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-What number of small objects are either metal cubes or red rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "10-1_single_or-What number of yellow objects are large metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_single_or-What number of yellow objects are large metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_large) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_query_size (clevr_car $0)) clevr_small) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size (clevr_car $0))) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size (clevr_car $0))) 0 1))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 7) 1 0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00014066696166992188
        },
        "11-1_single_or-How many yellow objects are rubber cylinders or rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_single_or-How many yellow objects are rubber cylinders or rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "12-1_single_or-How many purple things are rubber things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_single_or-How many purple things are rubber things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_material clevr_metal (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_size clevr_large (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_transform_size clevr_small (clevr_car $0)) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00014138221740722656
        },
        "13-1_single_or-How many purple objects are either rubber things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_single_or-How many purple objects are either rubber things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "14-1_single_or-How many red objects are either large metal things or small rubber cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_single_or-How many red objects are either large metal things or small rubber cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-1_single_or-How many rubber things are either small spheres or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_single_or-How many rubber things are either small spheres or large purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "16-1_single_or-What number of rubber things are large spheres or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_single_or-What number of rubber things are large spheres or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "17-1_single_or-How many metal objects are either green things or large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_single_or-How many metal objects are either green things or large things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 2) 3 (clevr_if (clevr_gt? (clevr_count $0) 4) 0 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 2) 3 (clevr_if (clevr_gt? (clevr_count $0) 6) 0 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 980.3044884204865
        },
        "18-1_single_or-What number of rubber objects are purple things or cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_single_or-What number of rubber objects are purple things or cylinders? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) $0 (clevr_car $1))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_transform_material clevr_metal $0) (clevr_car $1))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_transform_material clevr_rubber $0) (clevr_car $1))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_transform_size clevr_large $0) (clevr_car $1))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_count (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) (clevr_transform_material (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_cylinder) clevr_metal clevr_rubber) $0) (clevr_car $1))) (clevr_relate (clevr_car $0) clevr_behind $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 40.128867864608765
        },
        "19-1_single_or-What number of metal things are either large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_single_or-What number of metal things are either large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)))) clevr_metal) 2 (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 0 1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))))) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 0 1) 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 0 (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)))) clevr_metal) 2 1)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) 0 (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))))) 1 2)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty)))) clevr_metal) 2 (clevr_count (clevr_map (lambda (clevr_car $1)) (clevr_relate (clevr_car $0) clevr_front $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 68.15589451789856
        },
        "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_single_or-What number of cylinders are either large rubber things or small blue rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "21-1_single_or-What number of spheres are small gray things or small metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_single_or-What number of spheres are small gray things or small metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-1_single_or-How many cylinders are brown things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_single_or-How many cylinders are brown things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "23-1_single_or-How many spheres are either purple things or metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_single_or-How many spheres are either purple things or metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "24-1_single_or-What number of spheres are small cyan metal things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_single_or-What number of spheres are small cyan metal things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-1_zero_hop-How many metal things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many metal things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-1_zero_hop-What number of large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-1_zero_hop-How many rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-1_zero_hop-What number of gray rubber cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of gray rubber cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cube) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape (clevr_car $0))) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car $0))) clevr_cube) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_cube) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_cube) 1 2))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00012755393981933594
        },
        "4-1_zero_hop-What number of small metal cubes are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-What number of small metal cubes are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-1_zero_hop-How many small things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-How many small things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-1_zero_hop-There is a yellow thing; what shape is it?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-There is a yellow thing; what shape is it? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "7-1_zero_hop-What is the shape of the brown thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the brown thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-1_zero_hop-What is the shape of the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_sphere (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 1) clevr_cube clevr_sphere) clevr_cylinder))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 0) (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_sphere clevr_cylinder) clevr_cube))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 6) clevr_sphere (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_cube clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 1) clevr_cube (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) clevr_sphere clevr_cylinder)))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 36.95928406715393
        },
        "9-1_zero_hop-What is the shape of the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the small yellow thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "10-1_zero_hop-What is the shape of the small purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the small purple thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "11-1_zero_hop-What is the shape of the blue metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the blue metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "12-1_zero_hop-What is the purple thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What is the purple thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 6) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 7 (clevr_count $0)) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0001347064971923828
        },
        "13-1_zero_hop-What material is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the gray thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_gt? (clevr_count $0) 4) (clevr_query_size (clevr_car $0)) clevr_small) clevr_small) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_brown (clevr_query_color (clevr_car $0))) clevr_large clevr_small) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_car (clevr_difference $0 (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_behind $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_size (clevr_if (clevr_eq_color clevr_brown (clevr_query_color (clevr_car $0))) (clevr_query_size (clevr_car $0)) clevr_small) (clevr_query_size (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_material (clevr_if (clevr_eq_color clevr_red (clevr_query_color (clevr_car $0))) (clevr_transform_size clevr_large (clevr_car $0)) (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 37.479729413986206
        },
        "14-1_zero_hop-What material is the purple cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What material is the purple cylinder? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-1_zero_hop-What is the gray cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the gray cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 4) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? 5 (clevr_count $0)) clevr_rubber (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? (clevr_count $0) 5) clevr_rubber (clevr_query_material (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_lt? 4 (clevr_count $0)) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_gray) (clevr_query_material (clevr_car $0)) clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00013184547424316406
        },
        "16-1_zero_hop-What is the small blue cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the small blue cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_transform_size clevr_small (clevr_car $0))) clevr_rubber) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00013375282287597656
        },
        "17-1_zero_hop-What material is the small yellow thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What material is the small yellow thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "18-1_zero_hop-The cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-The cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_transform_size clevr_large $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $2) clevr_cube) (clevr_transform_material clevr_rubber $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_cube) (clevr_transform_material clevr_rubber $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $1)) clevr_cube) (clevr_transform_size clevr_large $0) $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 70.82731103897095
        },
        "19-1_zero_hop-What color is the metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal sphere? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "20-1_zero_hop-What is the color of the rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the rubber cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_transform_material clevr_rubber (clevr_car $0)) clevr_empty))) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 clevr_empty)) clevr_empty))) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_empty))) clevr_empty))) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_relate (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 (clevr_add (clevr_car (clevr_difference $0 (clevr_add (clevr_car $0) clevr_empty))) clevr_empty))) clevr_empty))) clevr_empty))) clevr_empty))) clevr_right $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 8.192774057388306
        },
        "21-1_zero_hop-The large cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-1_zero_hop-The rubber cube is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The rubber cube is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "23-1_zero_hop-The large metal thing has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large metal thing has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_query_color (clevr_car $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car $0))) (clevr_query_color (clevr_car $0)) clevr_yellow))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_color (clevr_query_color (clevr_car $0)) clevr_cyan) clevr_yellow (clevr_query_color (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.00013947486877441406
        },
        "24-1_zero_hop-What is the size of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What is the size of the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "25-1_zero_hop-What is the size of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-What is the size of the gray sphere? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "26-1_zero_hop-The green thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-The green thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_metal (clevr_car $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_material clevr_rubber (clevr_car $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_transform_size clevr_small (clevr_car $0))) clevr_cylinder) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car (clevr_relate (clevr_car $0) clevr_behind $0))) clevr_rubber) clevr_large (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_small clevr_large)))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 0.00013184547424316406
        },
        "27-1_zero_hop-The gray metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The gray metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "28-1_zero_hop-The brown metal thing has what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-The brown metal thing has what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_rubber) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 9) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0001373291015625
        },
        "29-1_zero_hop-The brown thing is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The brown thing is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_material (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_cylinder) clevr_metal clevr_rubber) (clevr_query_material (clevr_car $0))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_cube clevr_cylinder)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_car $0))) clevr_sphere clevr_cylinder)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_eq_size clevr_large clevr_small) (clevr_gt? (clevr_count $0) 6)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material (clevr_transform_color clevr_gray (clevr_car $0)))) clevr_cube clevr_cylinder)) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 33.39562392234802
        },
        "0-2_localization-Find the large things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the large things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-2_localization-Find the small things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $0)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "2-2_localization-Find the brown things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the brown things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-2_localization-Find the purple things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the purple things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-2_localization-Find the red things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the red things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-2_localization-Find the green things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the green things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-2_localization-Find the gray things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the gray things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "7-2_localization-Find the blue things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the blue things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-2_localization-Find the yellow things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the yellow things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-2_localization-Find the cyan things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the cyan things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "10-2_localization-Find the rubber things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the rubber things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "11-2_localization-Find the metal things.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the metal things. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 807.9070761203766
        },
        "12-2_localization-Find the spheres.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the spheres. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "13-2_localization-Find the cylinders.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the cylinders. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cylinder) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "14-2_localization-Find the cubes.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the cubes. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-2_localization-Find the small yellow metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the small yellow metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "16-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "17-2_localization-Find the purple rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the purple rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "18-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "19-2_localization-Find the small red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the small red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "20-2_localization-Find the brown metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the brown metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "21-2_localization-Find the yellow rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the yellow rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-2_localization-Find the gray sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the gray sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "23-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $2)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "24-2_localization-Find the small sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the small sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "25-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "26-2_localization-Find the purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the purple thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $2)) $2 $0)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_intersect $0 (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $2)) (clevr_transform_material clevr_rubber $2) $0)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 400.05583357810974
        },
        "27-2_localization-Find the small cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "28-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "29-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "30-2_localization-Find the small purple thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "30-2_localization-Find the small purple thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "31-2_localization-Find the small metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "31-2_localization-Find the small metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "32-2_localization-Find the small rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "32-2_localization-Find the small rubber cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "33-2_localization-Find the small metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "33-2_localization-Find the small metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "34-2_localization-Find the large blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "34-2_localization-Find the large blue metal thing. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "35-2_localization-Find the small brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "35-2_localization-Find the small brown thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "36-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "36-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "37-2_localization-Find the metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "37-2_localization-Find the metal sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "38-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "38-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "39-2_localization-Find the red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "39-2_localization-Find the red thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "40-2_localization-Find the gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "40-2_localization-Find the gray thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "41-2_localization-Find the cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "41-2_localization-Find the cyan thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "42-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "42-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "43-2_localization-Find the small rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "43-2_localization-Find the small rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "44-2_localization-Find the large metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "44-2_localization-Find the large metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "45-2_localization-Find the large sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "45-2_localization-Find the large sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "46-2_localization-Find the large metal sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "46-2_localization-Find the large metal sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "47-2_localization-Find the blue metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "47-2_localization-Find the blue metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "48-2_localization-Find the large gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "48-2_localization-Find the large gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "49-2_localization-Find the gray rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "49-2_localization-Find the gray rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "50-2_localization-Find the metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "50-2_localization-Find the metal cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "51-2_localization-Find the rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "51-2_localization-Find the rubber sphere. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "52-2_localization-Find the small metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "52-2_localization-Find the small metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "53-2_localization-Find the large green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "53-2_localization-Find the large green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "54-2_localization-Find the blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "54-2_localization-Find the blue thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "55-2_localization-Find the small cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "55-2_localization-Find the small cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "56-2_localization-Find the rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "56-2_localization-Find the rubber cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "57-2_localization-Find the green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "57-2_localization-Find the green thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-2_remove-What if you removed all of the blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the blue metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-2_remove-What if you removed all of the gray metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the gray metal things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-2_remove-What if you removed all of the yellow cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_remove-What if you removed all of the yellow cubes? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-2_remove-What if you removed all of the yellow spheres?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_remove-What if you removed all of the yellow spheres? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-2_remove-If you removed the small green things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the small green things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-2_remove-If you removed the small blue things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the small blue things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-2_remove-If you removed the brown cylinders, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the brown cylinders, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "7-2_remove-If you removed the metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 660.621838092804
        },
        "8-2_remove-If you removed the yellow things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the yellow things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-2_remove-If you removed the brown things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_remove-If you removed the brown things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "10-2_remove-If you removed the blue things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_remove-If you removed the blue things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "11-2_remove-If you removed the red things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_remove-If you removed the red things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "12-2_remove-If you removed the brown things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_remove-If you removed the brown things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "13-2_remove-If you removed the spheres, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_remove-If you removed the spheres, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "14-2_remove-If you removed the cylinders, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_remove-If you removed the cylinders, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-2_remove-If you removed the cubes, how many small things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_remove-If you removed the cubes, how many small things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "16-2_remove-If you removed the cylinders, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_remove-If you removed the cylinders, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "17-2_remove-If you removed the cubes, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_remove-If you removed the cubes, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "18-2_remove-If you removed the gray spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "18-2_remove-If you removed the gray spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "19-2_remove-If you removed the green cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "19-2_remove-If you removed the green cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "20-2_remove-If you removed the yellow cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_remove-If you removed the yellow cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "21-2_remove-If you removed the red cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "21-2_remove-If you removed the red cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "22-2_remove-If you removed the cyan cylinders, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-2_transform-What if the gray sphere became a small green metal sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the gray sphere became a small green metal sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-2_transform-What if the cyan sphere became a purple sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the cyan sphere became a purple sphere? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-2_transform-What if the yellow thing became a small thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if the yellow thing became a small thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small (clevr_transform_size clevr_small $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005717277526855469
        },
        "3-2_transform-What if all the large metal cylinders became small purple cylinders?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the large metal cylinders became small purple cylinders? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-2_transform-What if all the yellow cubes became large blue cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_transform-What if all the yellow cubes became large blue cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))) $0)))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-2_transform-What if all the blue metal things became rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_transform-What if all the blue metal things became rubber things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_blue) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber (clevr_transform_material clevr_rubber $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $0)) (clevr_transform_material clevr_rubber $0) $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0006108283996582031
        },
        "6-2_transform-What if all the red things became large things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_transform-What if all the red things became large things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_red) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large (clevr_transform_size clevr_large $0)) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) clevr_large clevr_small) $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                },
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_transform_size clevr_large $0) $0))) $0))",
                    "logLikelihood": 0.0,
                    "origin": null
                }
            ],
            "best_search_time": 0.0005970001220703125
        },
        "7-2_transform-If all of the blue spheres became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the blue spheres became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-2_transform-If all of the large green things became red, how many red things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the large green things became red, how many red things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-2_transform-If all of the red rubber things became green, how many green things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the red rubber things became green, how many green things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "10-2_transform-If all of the purple cylinders became gray, how many gray things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "11-2_transform-If all of the red spheres became blue, how many blue things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "11-2_transform-If all of the red spheres became blue, how many blue things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "12-2_transform-If all of the large brown things became blue cylinders, how many blue cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_blue $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "13-2_transform-If all of the large yellow rubber things became gray spheres, how many gray spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "14-2_transform-If all of the red rubber things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "15-2_transform-If all of the large metal spheres became green cubes, how many green cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_green $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "16-2_transform-If all of the large metal things became yellow cylinders, how many yellow cylinders would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cylinder $0)) (clevr_map (lambda (clevr_transform_color clevr_yellow $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "17-2_transform-If all of the small red things became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "17-2_transform-If all of the small red things became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "20-2_transform-If all of the small blue rubber things became small, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "20-2_transform-If all of the small blue rubber things became small, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        }
    },
    "test": {
        "0-1_compare_integer-Are there fewer small spheres than cyan cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_compare_integer-Are there fewer small spheres than cyan cubes? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_eq_material (clevr_query_material (clevr_car $0)) clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 19.883953332901
        },
        "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_compare_integer-Is the number of small rubber cubes less than the number of small blue rubber things? ((lambda (clevr_lt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 7.6073033809661865
        },
        "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_compare_integer-Is the number of large metal spheres greater than the number of small rubber things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_lt? (clevr_count $0) 4))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 23.91966962814331
        },
        "3-1_compare_integer-Are there more metal cylinders than blue metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_compare_integer-Are there more metal cylinders than blue metal things? ((lambda (clevr_gt? (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 37.01677179336548
        },
        "0-1_one_hop-What number of metal cubes are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_one_hop-What number of metal cubes are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 28.181149005889893
        },
        "1-1_one_hop-How many metal things are behind the rubber cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_one_hop-How many metal things are behind the rubber cylinder? ((lambda (clevr_count (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_one_hop-There is a cylinder front the small blue rubber cylinder; what is its size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 88.3440260887146
        },
        "3-1_one_hop-What size is the rubber thing that is right the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_one_hop-What size is the rubber thing that is right the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 23.960273504257202
        },
        "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_one_hop-The metal cylinder behind the small yellow metal cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_behind $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-1_one_hop-The small metal thing that is right the small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_one_hop-The small metal thing that is right the small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-1_one_hop-What is the small cylinder front the small brown cylinder made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_one_hop-What is the small cylinder front the small brown cylinder made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 36.461026191711426
        },
        "7-1_one_hop-What is the material of the large thing right the large purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_one_hop-What is the material of the large thing right the large purple metal thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 32.69771409034729
        },
        "8-1_one_hop-The small metal thing right the small metal sphere has what shape?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_one_hop-The small metal thing right the small metal sphere has what shape? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) clevr_right $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 11.760130882263184
        },
        "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_one_hop-What is the shape of the small rubber thing that is front the purple rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold (clevr_relate (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_front $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 11.764721393585205
        },
        "0-1_single_or-How many objects are either large metal spheres or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_single_or-How many objects are either large metal spheres or large rubber things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-1_single_or-How many things are either small metal things or large purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_single_or-How many things are either small metal things or large purple things? ((lambda (clevr_count (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 289.63217639923096
        },
        "2-1_single_or-How many small things are rubber cylinders or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_single_or-How many small things are rubber cylinders or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 40.3166446685791
        },
        "3-1_single_or-What number of small things are spheres or yellow metal things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_single_or-What number of small things are spheres or yellow metal things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-1_single_or-How many green things are either small metal things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_single_or-How many green things are either small metal things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 24.05689001083374
        },
        "5-1_single_or-How many purple things are small things or large rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_single_or-How many purple things are small things or large rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 15.92791748046875
        },
        "6-1_single_or-How many metal objects are large spheres or large red things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_single_or-How many metal objects are large spheres or large red things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 55.98112869262695
        },
        "7-1_single_or-What number of metal objects are small spheres or purple things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_single_or-What number of metal objects are small spheres or purple things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 45.11917781829834
        },
        "8-1_single_or-How many spheres are large metal things or small green rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_single_or-How many spheres are large metal things or small green rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 851.8685233592987
        },
        "9-1_single_or-How many cylinders are either small purple things or small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_single_or-How many cylinders are either small purple things or small rubber things? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 32.57075881958008
        },
        "0-1_zero_hop-How many large things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "0-1_zero_hop-How many large things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-1_zero_hop-What number of rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "1-1_zero_hop-What number of rubber things are there? ((lambda (clevr_count (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_count (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $0)) $0 $2)) $0))))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 93.51891946792603
        },
        "2-1_zero_hop-How many small cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-1_zero_hop-How many small cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 45.01383018493652
        },
        "3-1_zero_hop-What number of small rubber things are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-1_zero_hop-What number of small rubber things are there? ((lambda (clevr_count (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-1_zero_hop-How many small metal spheres are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-1_zero_hop-How many small metal spheres are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 15.980111122131348
        },
        "5-1_zero_hop-What number of small rubber cylinders are there?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-1_zero_hop-What number of small rubber cylinders are there? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": 36.68773913383484
        },
        "6-1_zero_hop-What shape is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "6-1_zero_hop-What shape is the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 24.088444232940674
        },
        "7-1_zero_hop-What is the shape of the red thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "7-1_zero_hop-What is the shape of the red thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 54.50431489944458
        },
        "8-1_zero_hop-What is the shape of the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "8-1_zero_hop-What is the shape of the gray thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 56.15909790992737
        },
        "9-1_zero_hop-What is the shape of the large rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "9-1_zero_hop-What is the shape of the large rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 67.90543985366821
        },
        "10-1_zero_hop-What is the shape of the cyan rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "10-1_zero_hop-What is the shape of the cyan rubber thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 761.5636873245239
        },
        "11-1_zero_hop-What is the shape of the purple metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrshape",
                        "arguments": []
                    }
                ]
            },
            "task": "11-1_zero_hop-What is the shape of the purple metal thing? ((lambda (clevr_query_shape (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_shape (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_purple) $0 $2)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 50.72829580307007
        },
        "12-1_zero_hop-What material is the blue thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "12-1_zero_hop-What material is the blue thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 40.585115909576416
        },
        "13-1_zero_hop-What material is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "13-1_zero_hop-What material is the purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 3) clevr_metal clevr_rubber))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 3.780257225036621
        },
        "14-1_zero_hop-What is the material of the large purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "14-1_zero_hop-What is the material of the large purple thing? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 37.34281301498413
        },
        "15-1_zero_hop-What is the small cube made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "15-1_zero_hop-What is the small cube made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 5) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 28.4122097492218
        },
        "16-1_zero_hop-What is the large brown thing made of?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "16-1_zero_hop-What is the large brown thing made of? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count $0) 7) clevr_rubber clevr_metal))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 28.47612690925598
        },
        "17-1_zero_hop-What is the material of the gray sphere?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrmaterial",
                        "arguments": []
                    }
                ]
            },
            "task": "17-1_zero_hop-What is the material of the gray sphere? ((lambda (clevr_query_material (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 24.227399826049805
        },
        "18-1_zero_hop-What color is the small cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "18-1_zero_hop-What color is the small cube? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "19-1_zero_hop-What color is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "19-1_zero_hop-What color is the metal cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "20-1_zero_hop-What is the color of the small cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "20-1_zero_hop-What is the color of the small cylinder? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "21-1_zero_hop-The large cylinder is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "21-1_zero_hop-The large cylinder is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-1_zero_hop-The small metal sphere is what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "22-1_zero_hop-The small metal sphere is what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 204.39626598358154
        },
        "23-1_zero_hop-The large sphere has what color?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrcolor",
                        "arguments": []
                    }
                ]
            },
            "task": "23-1_zero_hop-The large sphere has what color? ((lambda (clevr_query_color (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_query_color (clevr_car (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $2) clevr_sphere) (clevr_transform_material clevr_metal $2) $0)) $0)))))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 63.40636110305786
        },
        "24-1_zero_hop-What size is the metal cylinder?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "24-1_zero_hop-What size is the metal cylinder? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_behind $0)) 5) clevr_small (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color (clevr_car $0))) clevr_small (clevr_if (clevr_eq_color clevr_green (clevr_query_color (clevr_car $0))) clevr_small clevr_large))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 16.152448177337646
        },
        "25-1_zero_hop-How big is the purple thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "25-1_zero_hop-How big is the purple thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 24.344110250473022
        },
        "26-1_zero_hop-How big is the gray thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "26-1_zero_hop-How big is the gray thing? ((lambda (clevr_query_size (clevr_car (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape (clevr_query_shape (clevr_car $0)) clevr_sphere) (clevr_query_size (clevr_car $0)) (clevr_query_size (clevr_car $0))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 12.065318584442139
        },
        "27-1_zero_hop-The metal sphere is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "27-1_zero_hop-The metal sphere is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": 7.881650686264038
        },
        "28-1_zero_hop-How big is the gray rubber thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "28-1_zero_hop-How big is the gray rubber thing? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_gt? (clevr_count (clevr_relate (clevr_car $0) clevr_right $0)) 4) clevr_large clevr_small))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 3.830962896347046
        },
        "29-1_zero_hop-The metal cylinder is what size?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "tclevrsize",
                        "arguments": []
                    }
                ]
            },
            "task": "29-1_zero_hop-The metal cylinder is what size? ((lambda (clevr_query_size (clevr_car (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape (clevr_car (clevr_relate (clevr_car $0) clevr_right $0)))) clevr_small clevr_large))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 3.8453876972198486
        },
        "0-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-2_localization-Find the small rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_localization-Find the small rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-2_localization-Find the red metal thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_localization-Find the red metal thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $0)) $0 $2) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 61.07695150375366
        },
        "3-2_localization-Find the small gray thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_localization-Find the small gray thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $0)) $0 $2) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "4-2_localization-Find the small rubber sphere.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "4-2_localization-Find the small rubber sphere. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "5-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_brown) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "6-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "6-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_shape (clevr_query_shape $0) clevr_cube) (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $0)) $0 $2) $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "7-2_localization-Find the large cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "7-2_localization-Find the large cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-2_localization-Find the metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "8-2_localization-Find the metal cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-2_localization-Find the yellow cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "9-2_localization-Find the yellow cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "10-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "10-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "11-2_localization-Find the purple cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "11-2_localization-Find the purple cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "12-2_localization-Find the large cyan thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "12-2_localization-Find the large cyan thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "13-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "13-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $0)) $2 (clevr_if (clevr_eq_color clevr_red (clevr_query_color $0)) $0 $2))) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "14-2_localization-Find the large cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "14-2_localization-Find the large cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "15-2_localization-Find the large rubber cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "15-2_localization-Find the large rubber cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "16-2_localization-Find the brown thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "16-2_localization-Find the brown thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $0)) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                },
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color (clevr_query_color $1) clevr_brown) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 904.9409265518188
        },
        "17-2_localization-Find the small yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "17-2_localization-Find the small yellow thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "18-2_localization-Find the small green thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "18-2_localization-Find the small green thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "19-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "19-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 clevr_empty) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 222.99891710281372
        },
        "20-2_localization-Find the large red thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "20-2_localization-Find the large red thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "21-2_localization-Find the large metal cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "21-2_localization-Find the large metal cylinder. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "22-2_localization-Find the green rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "22-2_localization-Find the green rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "23-2_localization-Find the large rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "23-2_localization-Find the large rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "24-2_localization-Find the cyan cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "24-2_localization-Find the cyan cube. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "25-2_localization-Find the cyan rubber thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "25-2_localization-Find the cyan rubber thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "26-2_localization-Find the yellow thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "26-2_localization-Find the yellow thing. ((lambda (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [
                {
                    "program": "(lambda (clevr_fold $0 $0 (lambda (lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_yellow) $0 $2)) $0)))))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 323.5476162433624
        },
        "27-2_localization-Find the small metal cube.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "27-2_localization-Find the small metal cube. ((lambda (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "28-2_localization-Find the small blue thing.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "28-2_localization-Find the small blue thing. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_blue (clevr_query_color $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "29-2_localization-Find the rubber cylinder.": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "29-2_localization-Find the rubber cylinder. ((lambda (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-2_remove-What if you removed all of the small gray things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_remove-What if you removed all of the small gray things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-2_remove-What if you removed all of the small rubber things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_remove-What if you removed all of the small rubber things? ((lambda (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "2-2_remove-If you removed the red metal things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "2-2_remove-If you removed the red metal things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-2_remove-If you removed the small brown things, how many things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "3-2_remove-If you removed the small brown things, how many things would be left? ((lambda (clevr_count (clevr_difference $0 (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "4-2_remove-If you removed the gray things, how many cylinders would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_remove-If you removed the gray things, how many cylinders would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-2_remove-If you removed the yellow things, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_remove-If you removed the yellow things, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-2_remove-If you removed the spheres, how many large things would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_remove-If you removed the spheres, how many large things would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "7-2_remove-If you removed the green spheres, how many spheres would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_remove-If you removed the green spheres, how many spheres would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-2_remove-If you removed the cyan cubes, how many cubes would be left?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_remove-If you removed the cyan cubes, how many cubes would be left? ((lambda (clevr_count (clevr_difference (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "0-2_transform-What if the small sphere became a small metal thing?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "0-2_transform-What if the small sphere became a small metal thing? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_material clevr_metal $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": NaN
        },
        "1-2_transform-What if the brown thing became a small gray rubber cube?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "1-2_transform-What if the brown thing became a small gray rubber cube? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_material clevr_rubber $0)) (clevr_map (lambda (clevr_transform_color clevr_gray $0)) (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color (clevr_query_color $0) clevr_brown) (clevr_transform_material clevr_rubber (clevr_transform_size clevr_small (clevr_transform_shape clevr_cube (clevr_transform_color clevr_gray $0)))) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": NaN
        },
        "2-2_transform-What if all the small yellow rubber things became purple cubes?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "2-2_transform-What if all the small yellow rubber things became purple cubes? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))))) $0)))",
            "programs": [],
            "best_search_time": NaN
        },
        "3-2_transform-What if all the green things became small things?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "task": "3-2_transform-What if all the green things became small things? ((lambda (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0))))) $0)))",
            "programs": [
                {
                    "program": "(lambda (clevr_map (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $0)) (clevr_transform_size clevr_small $0) $0)) $0))",
                    "logLikelihood": 0.0,
                    "origin": "gpt_solver"
                }
            ],
            "best_search_time": 36.880353689193726
        },
        "4-2_transform-If all of the large green metal things became purple, how many purple things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "4-2_transform-If all of the large green metal things became purple, how many purple things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_green (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_metal (clevr_query_material $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "5-2_transform-If all of the cyan cylinders became brown, how many brown things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_color clevr_brown $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_cyan (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cylinder (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_brown (clevr_query_color $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "6-2_transform-If all of the gray cubes became purple spheres, how many purple spheres would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_sphere $0)) (clevr_map (lambda (clevr_transform_color clevr_purple $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_gray (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "7-2_transform-If all of the large purple things became red cubes, how many red cubes would there be? ((lambda (clevr_count (clevr_fold (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_shape clevr_cube $0)) (clevr_map (lambda (clevr_transform_color clevr_red $0)) (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_purple (clevr_query_color $1)) (clevr_add $1 $0) $0)))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_red (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "8-2_transform-If all of the small rubber spheres became large, how many small things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "8-2_transform-If all of the small rubber spheres became large, how many small things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_large $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_material clevr_rubber (clevr_query_material $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_sphere (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_small (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        },
        "9-2_transform-If all of the large yellow cubes became small, how many large things would there be?": {
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "tclevrobject",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "task": "9-2_transform-If all of the large yellow cubes became small, how many large things would there be? ((lambda (clevr_count (clevr_fold (clevr_union (clevr_map (lambda (clevr_transform_size clevr_small $0)) (clevr_fold (clevr_fold (clevr_fold $0 clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_color clevr_yellow (clevr_query_color $1)) (clevr_add $1 $0) $0)))) clevr_empty (lambda (lambda (clevr_if (clevr_eq_shape clevr_cube (clevr_query_shape $1)) (clevr_add $1 $0) $0))))) $0) clevr_empty (lambda (lambda (clevr_if (clevr_eq_size clevr_large (clevr_query_size $1)) (clevr_add $1 $0) $0)))))))",
            "programs": [],
            "best_search_time": NaN
        }
    }
}