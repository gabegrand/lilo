{
    "cmd": "python run_iterative_experiment.py --experiment_name test_runs --experiment_type baseline_dreamcoder --domain re2 --encoder re2 --iterations 16 --global_batch_sizes 96 --enumeration_timeout 10 --stitch_params {\"iterations\": 10, \"max_arity\": 3} --random_seeds 111 --no_s3_sync --recognition_train_steps 100",
    "args": {
        "iterations": 10,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 0,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 3,
            "threads": 1,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": true,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": true,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": true,
            "rewrite_check": false,
            "utility_by_rewrite": true,
            "dreamcoder_comparison": false,
            "quiet": true
        }
    },
    "original_cost": 11818,
    "final_cost": 5555,
    "compression_ratio": 2.1274527452745273,
    "num_abstractions": 8,
    "original": [
        "(lam (_rflatten (map (lam _k) (_rsplit _rdot $0))))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rempty $0))))",
        "(lam (_rflatten (_rappend _rempty (map (lam _k) (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _k (cdr (map (lam _k) (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _r (_rrevcdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _d (_rsplit _c $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _b $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _h $0))))",
        "(lam (_rflatten (_rappend _d (_rsplit _a $0))))",
        "(lam (_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _b (_rsplit _i (_rflatten (cons _w (cdr (_rsplit _rdot $0))))))))",
        "(lam (_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _i (_rsplit _i (_rflatten (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons (car (map (lam _i) (_rsplit _rdot $0))) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _q (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _o $0))))",
        "(lam (_rflatten (_rappend _q (_rsplit _t $0))))",
        "(lam (_rflatten (cons (_rconcat _a _w) (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (_rappend _j (_rrevcdr (_rrevcdr (_rsplit _rdot $0))))))",
        "(lam (_rflatten (_rappend _k (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _o $0))))",
        "(lam (_rflatten (_rappend _k (_rsplit _t $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _i $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _d $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _rdot $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _o $0))))",
        "(lam (_rflatten (_rappend _a (_rsplit _t $0))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot $0)))))",
        "(lam (_rflatten (cons _a (_rsplit _i (_rflatten (cdr (_rsplit _rdot $0)))))))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rdot (_rflatten (cons _v (cdr (_rsplit _rdot $0)))))))))",
        "(lam (_rflatten (cons _v (_rsplit _i $0))))",
        "(lam (_rflatten (cons _v (_rsplit _h $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (cons _v (_rsplit _w $0))))",
        "(lam (_rflatten (_rrevcdr (cons _v (_rappend _d (_rsplit _c $0))))))"
    ],
    "rewritten": [
        "(lam (_rflatten (fn_5 $0 _k)))",
        "(lam (_rflatten (map (lam _k) (_rsplit _rempty $0))))",
        "(lam (fn_6 (fn_5 $0 _k) _rempty))",
        "(lam (_rflatten (cons _k (cdr (fn_5 $0 _k)))))",
        "(lam (fn_6 (fn_3 $0) _r))",
        "(lam (fn_6 (_rsplit _c $0) _d))",
        "(lam (fn_1 $0 _d))",
        "(lam (fn_6 (_rsplit _b $0) _d))",
        "(lam (fn_6 (_rsplit _h $0) _d))",
        "(lam (fn_6 (_rsplit _a $0) _d))",
        "(lam (fn_2 _r _i $0))",
        "(lam (fn_0 $0 _b))",
        "(lam (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0))))))",
        "(lam (fn_7 $0 _b))",
        "(lam (fn_4 (fn_0 $0 _w) _b))",
        "(lam (fn_2 _e _x $0))",
        "(lam (fn_2 _o _j $0))",
        "(lam (fn_0 $0 _i))",
        "(lam (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))",
        "(lam (fn_0 $0 _i))",
        "(lam (fn_4 (_rflatten (cdr (_rsplit _rdot $0))) _i))",
        "(lam (fn_0 $0 (car (fn_5 $0 _i))))",
        "(lam (fn_1 $0 _q))",
        "(lam (fn_6 (_rsplit _d $0) _q))",
        "(lam (fn_6 (_rsplit _rdot $0) _q))",
        "(lam (fn_6 (_rsplit _o $0) _q))",
        "(lam (fn_6 (_rsplit _t $0) _q))",
        "(lam (fn_7 $0 _a))",
        "(lam (fn_6 (_rrevcdr (fn_3 $0)) _j))",
        "(lam (fn_1 $0 _k))",
        "(lam (fn_6 (_rsplit _d $0) _k))",
        "(lam (fn_6 (_rsplit _rdot $0) _k))",
        "(lam (fn_6 (_rsplit _o $0) _k))",
        "(lam (fn_6 (_rsplit _t $0) _k))",
        "(lam (fn_1 $0 _a))",
        "(lam (fn_6 (_rsplit _d $0) _a))",
        "(lam (fn_6 (_rsplit _rdot $0) _a))",
        "(lam (fn_6 (_rsplit _o $0) _a))",
        "(lam (fn_6 (_rsplit _t $0) _a))",
        "(lam (fn_0 $0 _a))",
        "(lam (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lam (fn_0 $0 _a))",
        "(lam (fn_4 (_rflatten (cdr (_rsplit _rdot $0))) _a))",
        "(lam (fn_0 (fn_0 $0 _v) _a))",
        "(lam (fn_4 $0 _v))",
        "(lam (_rflatten (cons _v (_rsplit _h $0))))",
        "(lam (_rflatten (cons _v (_rsplit _c $0))))",
        "(lam (_rflatten (cons _v (_rsplit _w $0))))",
        "(lam (_rflatten (_rrevcdr (cons _v (_rappend _d (_rsplit _c $0))))))"
    ],
    "rewritten_dreamcoder": [
        "(lambda (_rflatten (#(lambda (lambda (map (lambda $1) (_rsplit _rdot $1)))) $0 _k)))",
        "(lambda (_rflatten (map (lambda _k) (_rsplit _rempty $0))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (#(lambda (lambda (map (lambda $1) (_rsplit _rdot $1)))) $0 _k) _rempty))",
        "(lambda (_rflatten (cons _k (cdr (#(lambda (lambda (map (lambda $1) (_rsplit _rdot $1)))) $0 _k)))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (#(lambda (_rrevcdr (_rsplit _rdot $0))) $0) _r))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _c $0) _d))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _d))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _b $0) _d))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _h $0) _d))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _a $0) _d))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2))))) _r _i $0))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _b))",
        "(lambda (_rflatten (cons _b (cons _w (cdr (_rsplit _rdot $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2))))) _w $0 $1))) $0 _b))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _w) _b))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2))))) _e _x $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2))))) _o _j $0))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _i))",
        "(lambda (_rflatten (cons _i (cdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) (_rflatten (cdr (_rsplit _rdot $0))) _i))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (car (#(lambda (lambda (map (lambda $1) (_rsplit _rdot $1)))) $0 _i))))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _q))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _d $0) _q))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _rdot $0) _q))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _o $0) _q))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _t $0) _q))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2))))) _w $0 $1))) $0 _a))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rrevcdr (#(lambda (_rrevcdr (_rsplit _rdot $0))) $0)) _j))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _k))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _d $0) _k))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _rdot $0) _k))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _o $0) _k))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _t $0) _k))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1))))) $0 _a))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _d $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _rdot $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _o $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (_rappend $0 $1)))) (_rsplit _t $0) _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _a))",
        "(lambda (_rflatten (cons _a (cdr (_rsplit _rempty $0)))))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) (_rflatten (cdr (_rsplit _rdot $0))) _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 _v) _a))",
        "(lambda (#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1))))) $0 _v))",
        "(lambda (_rflatten (cons _v (_rsplit _h $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _c $0))))",
        "(lambda (_rflatten (cons _v (_rsplit _w $0))))",
        "(lambda (_rflatten (_rrevcdr (cons _v (_rappend _d (_rsplit _c $0))))))"
    ],
    "abstractions": [
        {
            "body": "(_rflatten (cons #1 (cdr (_rsplit _rdot #0))))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1))))))",
            "arity": 2,
            "name": "fn_0",
            "utility": 3232,
            "final_cost": 8586,
            "compression_ratio": 1.3764267412066153,
            "cumulative_compression_ratio": 1.3764267412066153,
            "num_uses": 14,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_0 $0 (_rconcat _a _w)": "(_rflatten (cons (_rconcat _a _w) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _b _w)": "(_rflatten (cons (_rconcat _b _w) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _i _r)": "(_rflatten (cons (_rconcat _i _r) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _j _o)": "(_rflatten (cons (_rconcat _j _o) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 (_rconcat _x _e)": "(_rflatten (cons (_rconcat _x _e) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 (car (map (lam _i) (_rsplit _rdot $0)))": "(_rflatten (cons (car (map (lam _i) (_rsplit _rdot $0))) (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 _a": "(_rflatten (cons _a (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 (_rflatten (cons _v (cdr (_rsplit _rdot $0)))) _a": "(_rflatten (cons _a (cdr (_rsplit _rdot (_rflatten (cons _v (cdr (_rsplit _rdot $0))))))))"
                },
                {
                    "fn_0 $0 _b": "(_rflatten (cons _b (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 _i": "(_rflatten (cons _i (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 _v": "(_rflatten (cons _v (cdr (_rsplit _rdot $0))))"
                },
                {
                    "fn_0 $0 _w": "(_rflatten (cons _w (cdr (_rsplit _rdot $0))))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 (_rsplit _i #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 (_rsplit _i $1)))))",
            "arity": 2,
            "name": "fn_1",
            "utility": 1212,
            "final_cost": 7374,
            "compression_ratio": 1.1643612693246541,
            "cumulative_compression_ratio": 1.6026579875237321,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_1 $0 _a": "(_rflatten (_rappend _a (_rsplit _i $0)))"
                },
                {
                    "fn_1 $0 _d": "(_rflatten (_rappend _d (_rsplit _i $0)))"
                },
                {
                    "fn_1 $0 _k": "(_rflatten (_rappend _k (_rsplit _i $0)))"
                },
                {
                    "fn_1 $0 _q": "(_rflatten (_rappend _q (_rsplit _i $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_0 #2 (_rconcat #1 #0))",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2)))))",
            "arity": 3,
            "name": "fn_2",
            "utility": 505,
            "final_cost": 6869,
            "compression_ratio": 1.0735187072354055,
            "cumulative_compression_ratio": 1.7204833309069734,
            "num_uses": 5,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_2 _w _a $0": "(fn_0 $0 (_rconcat _a _w))"
                },
                {
                    "fn_2 _w _b $0": "(fn_0 $0 (_rconcat _b _w))"
                },
                {
                    "fn_2 _r _i $0": "(fn_0 $0 (_rconcat _i _r))"
                },
                {
                    "fn_2 _o _j $0": "(fn_0 $0 (_rconcat _j _o))"
                },
                {
                    "fn_2 _e _x $0": "(fn_0 $0 (_rconcat _x _e))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rrevcdr (_rsplit _rdot #0))",
            "dreamcoder": "#(lambda (_rrevcdr (_rsplit _rdot $0)))",
            "arity": 1,
            "name": "fn_3",
            "utility": 404,
            "final_cost": 6465,
            "compression_ratio": 1.0624903325599382,
            "cumulative_compression_ratio": 1.8279969064191801,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_3 $0": "(_rrevcdr (_rsplit _rdot $0))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (cons #1 (_rsplit _i #0)))",
            "dreamcoder": "#(lambda (lambda (_rflatten (cons $0 (_rsplit _i $1)))))",
            "arity": 2,
            "name": "fn_4",
            "utility": 303,
            "final_cost": 6162,
            "compression_ratio": 1.049172346640701,
            "cumulative_compression_ratio": 1.9178838039597532,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_4 (_rflatten (cdr (_rsplit _rdot $0))) _a": "(_rflatten (cons _a (_rsplit _i (_rflatten (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_4 (fn_0 $0 _w) _b": "(_rflatten (cons _b (_rsplit _i (fn_0 $0 _w))))"
                },
                {
                    "fn_4 (_rflatten (cdr (_rsplit _rdot $0))) _i": "(_rflatten (cons _i (_rsplit _i (_rflatten (cdr (_rsplit _rdot $0))))))"
                },
                {
                    "fn_4 $0 _v": "(_rflatten (cons _v (_rsplit _i $0)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(map (lam #1) (_rsplit _rdot #0))",
            "dreamcoder": "#(lambda (lambda (map (lambda $1) (_rsplit _rdot $1))))",
            "arity": 2,
            "name": "fn_5",
            "utility": 203,
            "final_cost": 5959,
            "compression_ratio": 1.0340661184762545,
            "cumulative_compression_ratio": 1.9832186608491358,
            "num_uses": 4,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_5 $0 _i": "(map (lam _i) (_rsplit _rdot $0))"
                },
                {
                    "fn_5 $0 _k": "(map (lam _k) (_rsplit _rdot $0))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(_rflatten (_rappend #1 #0))",
            "dreamcoder": "#(lambda (lambda (_rflatten (_rappend $0 $1))))",
            "arity": 2,
            "name": "fn_6",
            "utility": 202,
            "final_cost": 5757,
            "compression_ratio": 1.0350877192982457,
            "cumulative_compression_ratio": 2.052805280528053,
            "num_uses": 19,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_6 (_rsplit _d $0) _a": "(_rflatten (_rappend _a (_rsplit _d $0)))"
                },
                {
                    "fn_6 (_rsplit _o $0) _a": "(_rflatten (_rappend _a (_rsplit _o $0)))"
                },
                {
                    "fn_6 (_rsplit _rdot $0) _a": "(_rflatten (_rappend _a (_rsplit _rdot $0)))"
                },
                {
                    "fn_6 (_rsplit _t $0) _a": "(_rflatten (_rappend _a (_rsplit _t $0)))"
                },
                {
                    "fn_6 (_rsplit _a $0) _d": "(_rflatten (_rappend _d (_rsplit _a $0)))"
                },
                {
                    "fn_6 (_rsplit _b $0) _d": "(_rflatten (_rappend _d (_rsplit _b $0)))"
                },
                {
                    "fn_6 (_rsplit _c $0) _d": "(_rflatten (_rappend _d (_rsplit _c $0)))"
                },
                {
                    "fn_6 (_rsplit _h $0) _d": "(_rflatten (_rappend _d (_rsplit _h $0)))"
                },
                {
                    "fn_6 (_rrevcdr (fn_3 $0)) _j": "(_rflatten (_rappend _j (_rrevcdr (fn_3 $0))))"
                },
                {
                    "fn_6 (_rsplit _d $0) _k": "(_rflatten (_rappend _k (_rsplit _d $0)))"
                },
                {
                    "fn_6 (_rsplit _o $0) _k": "(_rflatten (_rappend _k (_rsplit _o $0)))"
                },
                {
                    "fn_6 (_rsplit _rdot $0) _k": "(_rflatten (_rappend _k (_rsplit _rdot $0)))"
                },
                {
                    "fn_6 (_rsplit _t $0) _k": "(_rflatten (_rappend _k (_rsplit _t $0)))"
                },
                {
                    "fn_6 (_rsplit _d $0) _q": "(_rflatten (_rappend _q (_rsplit _d $0)))"
                },
                {
                    "fn_6 (_rsplit _o $0) _q": "(_rflatten (_rappend _q (_rsplit _o $0)))"
                },
                {
                    "fn_6 (_rsplit _rdot $0) _q": "(_rflatten (_rappend _q (_rsplit _rdot $0)))"
                },
                {
                    "fn_6 (_rsplit _t $0) _q": "(_rflatten (_rappend _q (_rsplit _t $0)))"
                },
                {
                    "fn_6 (fn_3 $0) _r": "(_rflatten (_rappend _r (fn_3 $0)))"
                },
                {
                    "fn_6 (fn_5 $0 _k) _rempty": "(_rflatten (_rappend _rempty (fn_5 $0 _k)))"
                }
            ],
            "dc_comparison_millis": null
        },
        {
            "body": "(fn_2 _w #1 #0)",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (_rflatten (cons $0 (cdr (_rsplit _rdot $1)))))) $0 (_rconcat $1 $2))))) _w $0 $1)))",
            "arity": 2,
            "name": "fn_7",
            "utility": 202,
            "final_cost": 5555,
            "compression_ratio": 1.0363636363636364,
            "cumulative_compression_ratio": 2.1274527452745273,
            "num_uses": 2,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": [
                {
                    "fn_7 $0 _a": "(fn_2 _w _a $0)"
                },
                {
                    "fn_7 $0 _b": "(fn_2 _w _b $0)"
                }
            ],
            "dc_comparison_millis": null
        }
    ]
}